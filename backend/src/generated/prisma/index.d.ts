
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Airport
 * 
 */
export type Airport = $Result.DefaultSelection<Prisma.$AirportPayload>
/**
 * Model Airline
 * 
 */
export type Airline = $Result.DefaultSelection<Prisma.$AirlinePayload>
/**
 * Model Aircraft
 * 
 */
export type Aircraft = $Result.DefaultSelection<Prisma.$AircraftPayload>
/**
 * Model Flight
 * 
 */
export type Flight = $Result.DefaultSelection<Prisma.$FlightPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model Operate
 * 
 */
export type Operate = $Result.DefaultSelection<Prisma.$OperatePayload>
/**
 * Model Assigned_To
 * 
 */
export type Assigned_To = $Result.DefaultSelection<Prisma.$Assigned_ToPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model Report_To
 * 
 */
export type Report_To = $Result.DefaultSelection<Prisma.$Report_ToPayload>
/**
 * Model CabinClass
 * 
 */
export type CabinClass = $Result.DefaultSelection<Prisma.$CabinClassPayload>
/**
 * Model Seat
 * 
 */
export type Seat = $Result.DefaultSelection<Prisma.$SeatPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Airline_Message
 * 
 */
export type Airline_Message = $Result.DefaultSelection<Prisma.$Airline_MessagePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model User_Tel_No
 * 
 */
export type User_Tel_No = $Result.DefaultSelection<Prisma.$User_Tel_NoPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model Domestic_Ticket
 * 
 */
export type Domestic_Ticket = $Result.DefaultSelection<Prisma.$Domestic_TicketPayload>
/**
 * Model International_Ticket
 * 
 */
export type International_Ticket = $Result.DefaultSelection<Prisma.$International_TicketPayload>
/**
 * Model Round_Trip_Ticket
 * 
 */
export type Round_Trip_Ticket = $Result.DefaultSelection<Prisma.$Round_Trip_TicketPayload>
/**
 * Model Purchase
 * 
 */
export type Purchase = $Result.DefaultSelection<Prisma.$PurchasePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Airline_Tel_No
 * 
 */
export type Airline_Tel_No = $Result.DefaultSelection<Prisma.$Airline_Tel_NoPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Airports
 * const airports = await prisma.airport.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Airports
   * const airports = await prisma.airport.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.airport`: Exposes CRUD operations for the **Airport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Airports
    * const airports = await prisma.airport.findMany()
    * ```
    */
  get airport(): Prisma.AirportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.airline`: Exposes CRUD operations for the **Airline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Airlines
    * const airlines = await prisma.airline.findMany()
    * ```
    */
  get airline(): Prisma.AirlineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aircraft`: Exposes CRUD operations for the **Aircraft** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aircraft
    * const aircraft = await prisma.aircraft.findMany()
    * ```
    */
  get aircraft(): Prisma.AircraftDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flight`: Exposes CRUD operations for the **Flight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Flights
    * const flights = await prisma.flight.findMany()
    * ```
    */
  get flight(): Prisma.FlightDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operate`: Exposes CRUD operations for the **Operate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operates
    * const operates = await prisma.operate.findMany()
    * ```
    */
  get operate(): Prisma.OperateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assigned_To`: Exposes CRUD operations for the **Assigned_To** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assigned_Tos
    * const assigned_Tos = await prisma.assigned_To.findMany()
    * ```
    */
  get assigned_To(): Prisma.Assigned_ToDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report_To`: Exposes CRUD operations for the **Report_To** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Report_Tos
    * const report_Tos = await prisma.report_To.findMany()
    * ```
    */
  get report_To(): Prisma.Report_ToDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cabinClass`: Exposes CRUD operations for the **CabinClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CabinClasses
    * const cabinClasses = await prisma.cabinClass.findMany()
    * ```
    */
  get cabinClass(): Prisma.CabinClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.seat`: Exposes CRUD operations for the **Seat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seats
    * const seats = await prisma.seat.findMany()
    * ```
    */
  get seat(): Prisma.SeatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.airline_Message`: Exposes CRUD operations for the **Airline_Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Airline_Messages
    * const airline_Messages = await prisma.airline_Message.findMany()
    * ```
    */
  get airline_Message(): Prisma.Airline_MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_Tel_No`: Exposes CRUD operations for the **User_Tel_No** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_Tel_Nos
    * const user_Tel_Nos = await prisma.user_Tel_No.findMany()
    * ```
    */
  get user_Tel_No(): Prisma.User_Tel_NoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.domestic_Ticket`: Exposes CRUD operations for the **Domestic_Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domestic_Tickets
    * const domestic_Tickets = await prisma.domestic_Ticket.findMany()
    * ```
    */
  get domestic_Ticket(): Prisma.Domestic_TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.international_Ticket`: Exposes CRUD operations for the **International_Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more International_Tickets
    * const international_Tickets = await prisma.international_Ticket.findMany()
    * ```
    */
  get international_Ticket(): Prisma.International_TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.round_Trip_Ticket`: Exposes CRUD operations for the **Round_Trip_Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Round_Trip_Tickets
    * const round_Trip_Tickets = await prisma.round_Trip_Ticket.findMany()
    * ```
    */
  get round_Trip_Ticket(): Prisma.Round_Trip_TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.airline_Tel_No`: Exposes CRUD operations for the **Airline_Tel_No** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Airline_Tel_Nos
    * const airline_Tel_Nos = await prisma.airline_Tel_No.findMany()
    * ```
    */
  get airline_Tel_No(): Prisma.Airline_Tel_NoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Airport: 'Airport',
    Airline: 'Airline',
    Aircraft: 'Aircraft',
    Flight: 'Flight',
    Ticket: 'Ticket',
    Operate: 'Operate',
    Assigned_To: 'Assigned_To',
    Contact: 'Contact',
    Report_To: 'Report_To',
    CabinClass: 'CabinClass',
    Seat: 'Seat',
    Admin: 'Admin',
    Airline_Message: 'Airline_Message',
    Account: 'Account',
    User: 'User',
    User_Tel_No: 'User_Tel_No',
    Report: 'Report',
    Domestic_Ticket: 'Domestic_Ticket',
    International_Ticket: 'International_Ticket',
    Round_Trip_Ticket: 'Round_Trip_Ticket',
    Purchase: 'Purchase',
    Payment: 'Payment',
    Airline_Tel_No: 'Airline_Tel_No',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "airport" | "airline" | "aircraft" | "flight" | "ticket" | "operate" | "assigned_To" | "contact" | "report_To" | "cabinClass" | "seat" | "admin" | "airline_Message" | "account" | "user" | "user_Tel_No" | "report" | "domestic_Ticket" | "international_Ticket" | "round_Trip_Ticket" | "purchase" | "payment" | "airline_Tel_No" | "session"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Airport: {
        payload: Prisma.$AirportPayload<ExtArgs>
        fields: Prisma.AirportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AirportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AirportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          findFirst: {
            args: Prisma.AirportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AirportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          findMany: {
            args: Prisma.AirportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>[]
          }
          create: {
            args: Prisma.AirportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          createMany: {
            args: Prisma.AirportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AirportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>[]
          }
          delete: {
            args: Prisma.AirportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          update: {
            args: Prisma.AirportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          deleteMany: {
            args: Prisma.AirportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AirportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AirportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>[]
          }
          upsert: {
            args: Prisma.AirportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirportPayload>
          }
          aggregate: {
            args: Prisma.AirportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAirport>
          }
          groupBy: {
            args: Prisma.AirportGroupByArgs<ExtArgs>
            result: $Utils.Optional<AirportGroupByOutputType>[]
          }
          count: {
            args: Prisma.AirportCountArgs<ExtArgs>
            result: $Utils.Optional<AirportCountAggregateOutputType> | number
          }
        }
      }
      Airline: {
        payload: Prisma.$AirlinePayload<ExtArgs>
        fields: Prisma.AirlineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AirlineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AirlineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          findFirst: {
            args: Prisma.AirlineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AirlineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          findMany: {
            args: Prisma.AirlineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>[]
          }
          create: {
            args: Prisma.AirlineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          createMany: {
            args: Prisma.AirlineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AirlineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>[]
          }
          delete: {
            args: Prisma.AirlineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          update: {
            args: Prisma.AirlineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          deleteMany: {
            args: Prisma.AirlineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AirlineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AirlineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>[]
          }
          upsert: {
            args: Prisma.AirlineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AirlinePayload>
          }
          aggregate: {
            args: Prisma.AirlineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAirline>
          }
          groupBy: {
            args: Prisma.AirlineGroupByArgs<ExtArgs>
            result: $Utils.Optional<AirlineGroupByOutputType>[]
          }
          count: {
            args: Prisma.AirlineCountArgs<ExtArgs>
            result: $Utils.Optional<AirlineCountAggregateOutputType> | number
          }
        }
      }
      Aircraft: {
        payload: Prisma.$AircraftPayload<ExtArgs>
        fields: Prisma.AircraftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AircraftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AircraftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          findFirst: {
            args: Prisma.AircraftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AircraftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          findMany: {
            args: Prisma.AircraftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>[]
          }
          create: {
            args: Prisma.AircraftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          createMany: {
            args: Prisma.AircraftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AircraftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>[]
          }
          delete: {
            args: Prisma.AircraftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          update: {
            args: Prisma.AircraftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          deleteMany: {
            args: Prisma.AircraftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AircraftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AircraftUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>[]
          }
          upsert: {
            args: Prisma.AircraftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AircraftPayload>
          }
          aggregate: {
            args: Prisma.AircraftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAircraft>
          }
          groupBy: {
            args: Prisma.AircraftGroupByArgs<ExtArgs>
            result: $Utils.Optional<AircraftGroupByOutputType>[]
          }
          count: {
            args: Prisma.AircraftCountArgs<ExtArgs>
            result: $Utils.Optional<AircraftCountAggregateOutputType> | number
          }
        }
      }
      Flight: {
        payload: Prisma.$FlightPayload<ExtArgs>
        fields: Prisma.FlightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          findFirst: {
            args: Prisma.FlightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          findMany: {
            args: Prisma.FlightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>[]
          }
          create: {
            args: Prisma.FlightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          createMany: {
            args: Prisma.FlightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>[]
          }
          delete: {
            args: Prisma.FlightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          update: {
            args: Prisma.FlightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          deleteMany: {
            args: Prisma.FlightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlightUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>[]
          }
          upsert: {
            args: Prisma.FlightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlightPayload>
          }
          aggregate: {
            args: Prisma.FlightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlight>
          }
          groupBy: {
            args: Prisma.FlightGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlightGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlightCountArgs<ExtArgs>
            result: $Utils.Optional<FlightCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      Operate: {
        payload: Prisma.$OperatePayload<ExtArgs>
        fields: Prisma.OperateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          findFirst: {
            args: Prisma.OperateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          findMany: {
            args: Prisma.OperateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>[]
          }
          create: {
            args: Prisma.OperateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          createMany: {
            args: Prisma.OperateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>[]
          }
          delete: {
            args: Prisma.OperateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          update: {
            args: Prisma.OperateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          deleteMany: {
            args: Prisma.OperateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>[]
          }
          upsert: {
            args: Prisma.OperateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatePayload>
          }
          aggregate: {
            args: Prisma.OperateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperate>
          }
          groupBy: {
            args: Prisma.OperateGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperateGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperateCountArgs<ExtArgs>
            result: $Utils.Optional<OperateCountAggregateOutputType> | number
          }
        }
      }
      Assigned_To: {
        payload: Prisma.$Assigned_ToPayload<ExtArgs>
        fields: Prisma.Assigned_ToFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Assigned_ToFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Assigned_ToFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          findFirst: {
            args: Prisma.Assigned_ToFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Assigned_ToFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          findMany: {
            args: Prisma.Assigned_ToFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>[]
          }
          create: {
            args: Prisma.Assigned_ToCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          createMany: {
            args: Prisma.Assigned_ToCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Assigned_ToCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>[]
          }
          delete: {
            args: Prisma.Assigned_ToDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          update: {
            args: Prisma.Assigned_ToUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          deleteMany: {
            args: Prisma.Assigned_ToDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Assigned_ToUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Assigned_ToUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>[]
          }
          upsert: {
            args: Prisma.Assigned_ToUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Assigned_ToPayload>
          }
          aggregate: {
            args: Prisma.Assigned_ToAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssigned_To>
          }
          groupBy: {
            args: Prisma.Assigned_ToGroupByArgs<ExtArgs>
            result: $Utils.Optional<Assigned_ToGroupByOutputType>[]
          }
          count: {
            args: Prisma.Assigned_ToCountArgs<ExtArgs>
            result: $Utils.Optional<Assigned_ToCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      Report_To: {
        payload: Prisma.$Report_ToPayload<ExtArgs>
        fields: Prisma.Report_ToFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Report_ToFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Report_ToFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          findFirst: {
            args: Prisma.Report_ToFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Report_ToFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          findMany: {
            args: Prisma.Report_ToFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>[]
          }
          create: {
            args: Prisma.Report_ToCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          createMany: {
            args: Prisma.Report_ToCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Report_ToCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>[]
          }
          delete: {
            args: Prisma.Report_ToDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          update: {
            args: Prisma.Report_ToUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          deleteMany: {
            args: Prisma.Report_ToDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Report_ToUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Report_ToUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>[]
          }
          upsert: {
            args: Prisma.Report_ToUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Report_ToPayload>
          }
          aggregate: {
            args: Prisma.Report_ToAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport_To>
          }
          groupBy: {
            args: Prisma.Report_ToGroupByArgs<ExtArgs>
            result: $Utils.Optional<Report_ToGroupByOutputType>[]
          }
          count: {
            args: Prisma.Report_ToCountArgs<ExtArgs>
            result: $Utils.Optional<Report_ToCountAggregateOutputType> | number
          }
        }
      }
      CabinClass: {
        payload: Prisma.$CabinClassPayload<ExtArgs>
        fields: Prisma.CabinClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CabinClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CabinClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          findFirst: {
            args: Prisma.CabinClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CabinClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          findMany: {
            args: Prisma.CabinClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>[]
          }
          create: {
            args: Prisma.CabinClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          createMany: {
            args: Prisma.CabinClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CabinClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>[]
          }
          delete: {
            args: Prisma.CabinClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          update: {
            args: Prisma.CabinClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          deleteMany: {
            args: Prisma.CabinClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CabinClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CabinClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>[]
          }
          upsert: {
            args: Prisma.CabinClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CabinClassPayload>
          }
          aggregate: {
            args: Prisma.CabinClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCabinClass>
          }
          groupBy: {
            args: Prisma.CabinClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<CabinClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.CabinClassCountArgs<ExtArgs>
            result: $Utils.Optional<CabinClassCountAggregateOutputType> | number
          }
        }
      }
      Seat: {
        payload: Prisma.$SeatPayload<ExtArgs>
        fields: Prisma.SeatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          findFirst: {
            args: Prisma.SeatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          findMany: {
            args: Prisma.SeatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          create: {
            args: Prisma.SeatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          createMany: {
            args: Prisma.SeatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          delete: {
            args: Prisma.SeatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          update: {
            args: Prisma.SeatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          deleteMany: {
            args: Prisma.SeatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SeatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          upsert: {
            args: Prisma.SeatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          aggregate: {
            args: Prisma.SeatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeat>
          }
          groupBy: {
            args: Prisma.SeatGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeatCountArgs<ExtArgs>
            result: $Utils.Optional<SeatCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Airline_Message: {
        payload: Prisma.$Airline_MessagePayload<ExtArgs>
        fields: Prisma.Airline_MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Airline_MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Airline_MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          findFirst: {
            args: Prisma.Airline_MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Airline_MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          findMany: {
            args: Prisma.Airline_MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>[]
          }
          create: {
            args: Prisma.Airline_MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          createMany: {
            args: Prisma.Airline_MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Airline_MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>[]
          }
          delete: {
            args: Prisma.Airline_MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          update: {
            args: Prisma.Airline_MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          deleteMany: {
            args: Prisma.Airline_MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Airline_MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Airline_MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>[]
          }
          upsert: {
            args: Prisma.Airline_MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_MessagePayload>
          }
          aggregate: {
            args: Prisma.Airline_MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAirline_Message>
          }
          groupBy: {
            args: Prisma.Airline_MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<Airline_MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.Airline_MessageCountArgs<ExtArgs>
            result: $Utils.Optional<Airline_MessageCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      User_Tel_No: {
        payload: Prisma.$User_Tel_NoPayload<ExtArgs>
        fields: Prisma.User_Tel_NoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.User_Tel_NoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.User_Tel_NoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          findFirst: {
            args: Prisma.User_Tel_NoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.User_Tel_NoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          findMany: {
            args: Prisma.User_Tel_NoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>[]
          }
          create: {
            args: Prisma.User_Tel_NoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          createMany: {
            args: Prisma.User_Tel_NoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.User_Tel_NoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>[]
          }
          delete: {
            args: Prisma.User_Tel_NoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          update: {
            args: Prisma.User_Tel_NoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          deleteMany: {
            args: Prisma.User_Tel_NoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.User_Tel_NoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.User_Tel_NoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>[]
          }
          upsert: {
            args: Prisma.User_Tel_NoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$User_Tel_NoPayload>
          }
          aggregate: {
            args: Prisma.User_Tel_NoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_Tel_No>
          }
          groupBy: {
            args: Prisma.User_Tel_NoGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_Tel_NoGroupByOutputType>[]
          }
          count: {
            args: Prisma.User_Tel_NoCountArgs<ExtArgs>
            result: $Utils.Optional<User_Tel_NoCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      Domestic_Ticket: {
        payload: Prisma.$Domestic_TicketPayload<ExtArgs>
        fields: Prisma.Domestic_TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Domestic_TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Domestic_TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          findFirst: {
            args: Prisma.Domestic_TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Domestic_TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          findMany: {
            args: Prisma.Domestic_TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>[]
          }
          create: {
            args: Prisma.Domestic_TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          createMany: {
            args: Prisma.Domestic_TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Domestic_TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>[]
          }
          delete: {
            args: Prisma.Domestic_TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          update: {
            args: Prisma.Domestic_TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          deleteMany: {
            args: Prisma.Domestic_TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Domestic_TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Domestic_TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>[]
          }
          upsert: {
            args: Prisma.Domestic_TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Domestic_TicketPayload>
          }
          aggregate: {
            args: Prisma.Domestic_TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDomestic_Ticket>
          }
          groupBy: {
            args: Prisma.Domestic_TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<Domestic_TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.Domestic_TicketCountArgs<ExtArgs>
            result: $Utils.Optional<Domestic_TicketCountAggregateOutputType> | number
          }
        }
      }
      International_Ticket: {
        payload: Prisma.$International_TicketPayload<ExtArgs>
        fields: Prisma.International_TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.International_TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.International_TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          findFirst: {
            args: Prisma.International_TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.International_TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          findMany: {
            args: Prisma.International_TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>[]
          }
          create: {
            args: Prisma.International_TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          createMany: {
            args: Prisma.International_TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.International_TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>[]
          }
          delete: {
            args: Prisma.International_TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          update: {
            args: Prisma.International_TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          deleteMany: {
            args: Prisma.International_TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.International_TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.International_TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>[]
          }
          upsert: {
            args: Prisma.International_TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$International_TicketPayload>
          }
          aggregate: {
            args: Prisma.International_TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInternational_Ticket>
          }
          groupBy: {
            args: Prisma.International_TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<International_TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.International_TicketCountArgs<ExtArgs>
            result: $Utils.Optional<International_TicketCountAggregateOutputType> | number
          }
        }
      }
      Round_Trip_Ticket: {
        payload: Prisma.$Round_Trip_TicketPayload<ExtArgs>
        fields: Prisma.Round_Trip_TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Round_Trip_TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Round_Trip_TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          findFirst: {
            args: Prisma.Round_Trip_TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Round_Trip_TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          findMany: {
            args: Prisma.Round_Trip_TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>[]
          }
          create: {
            args: Prisma.Round_Trip_TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          createMany: {
            args: Prisma.Round_Trip_TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Round_Trip_TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>[]
          }
          delete: {
            args: Prisma.Round_Trip_TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          update: {
            args: Prisma.Round_Trip_TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          deleteMany: {
            args: Prisma.Round_Trip_TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Round_Trip_TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Round_Trip_TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>[]
          }
          upsert: {
            args: Prisma.Round_Trip_TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Round_Trip_TicketPayload>
          }
          aggregate: {
            args: Prisma.Round_Trip_TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRound_Trip_Ticket>
          }
          groupBy: {
            args: Prisma.Round_Trip_TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<Round_Trip_TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.Round_Trip_TicketCountArgs<ExtArgs>
            result: $Utils.Optional<Round_Trip_TicketCountAggregateOutputType> | number
          }
        }
      }
      Purchase: {
        payload: Prisma.$PurchasePayload<ExtArgs>
        fields: Prisma.PurchaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findFirst: {
            args: Prisma.PurchaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findMany: {
            args: Prisma.PurchaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          create: {
            args: Prisma.PurchaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          createMany: {
            args: Prisma.PurchaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          delete: {
            args: Prisma.PurchaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          update: {
            args: Prisma.PurchaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          deleteMany: {
            args: Prisma.PurchaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PurchaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          upsert: {
            args: Prisma.PurchaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          aggregate: {
            args: Prisma.PurchaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchase>
          }
          groupBy: {
            args: Prisma.PurchaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Airline_Tel_No: {
        payload: Prisma.$Airline_Tel_NoPayload<ExtArgs>
        fields: Prisma.Airline_Tel_NoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Airline_Tel_NoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Airline_Tel_NoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          findFirst: {
            args: Prisma.Airline_Tel_NoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Airline_Tel_NoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          findMany: {
            args: Prisma.Airline_Tel_NoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>[]
          }
          create: {
            args: Prisma.Airline_Tel_NoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          createMany: {
            args: Prisma.Airline_Tel_NoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Airline_Tel_NoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>[]
          }
          delete: {
            args: Prisma.Airline_Tel_NoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          update: {
            args: Prisma.Airline_Tel_NoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          deleteMany: {
            args: Prisma.Airline_Tel_NoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Airline_Tel_NoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Airline_Tel_NoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>[]
          }
          upsert: {
            args: Prisma.Airline_Tel_NoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Airline_Tel_NoPayload>
          }
          aggregate: {
            args: Prisma.Airline_Tel_NoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAirline_Tel_No>
          }
          groupBy: {
            args: Prisma.Airline_Tel_NoGroupByArgs<ExtArgs>
            result: $Utils.Optional<Airline_Tel_NoGroupByOutputType>[]
          }
          count: {
            args: Prisma.Airline_Tel_NoCountArgs<ExtArgs>
            result: $Utils.Optional<Airline_Tel_NoCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    airport?: AirportOmit
    airline?: AirlineOmit
    aircraft?: AircraftOmit
    flight?: FlightOmit
    ticket?: TicketOmit
    operate?: OperateOmit
    assigned_To?: Assigned_ToOmit
    contact?: ContactOmit
    report_To?: Report_ToOmit
    cabinClass?: CabinClassOmit
    seat?: SeatOmit
    admin?: AdminOmit
    airline_Message?: Airline_MessageOmit
    account?: AccountOmit
    user?: UserOmit
    user_Tel_No?: User_Tel_NoOmit
    report?: ReportOmit
    domestic_Ticket?: Domestic_TicketOmit
    international_Ticket?: International_TicketOmit
    round_Trip_Ticket?: Round_Trip_TicketOmit
    purchase?: PurchaseOmit
    payment?: PaymentOmit
    airline_Tel_No?: Airline_Tel_NoOmit
    session?: SessionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AirportCountOutputType
   */

  export type AirportCountOutputType = {
    operates: number
    departureFlights: number
    arrivalFlights: number
  }

  export type AirportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operates?: boolean | AirportCountOutputTypeCountOperatesArgs
    departureFlights?: boolean | AirportCountOutputTypeCountDepartureFlightsArgs
    arrivalFlights?: boolean | AirportCountOutputTypeCountArrivalFlightsArgs
  }

  // Custom InputTypes
  /**
   * AirportCountOutputType without action
   */
  export type AirportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AirportCountOutputType
     */
    select?: AirportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AirportCountOutputType without action
   */
  export type AirportCountOutputTypeCountOperatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperateWhereInput
  }

  /**
   * AirportCountOutputType without action
   */
  export type AirportCountOutputTypeCountDepartureFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlightWhereInput
  }

  /**
   * AirportCountOutputType without action
   */
  export type AirportCountOutputTypeCountArrivalFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlightWhereInput
  }


  /**
   * Count Type AirlineCountOutputType
   */

  export type AirlineCountOutputType = {
    operates: number
    aircrafts: number
    flights: number
    telNos: number
    messages: number
    contacts: number
  }

  export type AirlineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operates?: boolean | AirlineCountOutputTypeCountOperatesArgs
    aircrafts?: boolean | AirlineCountOutputTypeCountAircraftsArgs
    flights?: boolean | AirlineCountOutputTypeCountFlightsArgs
    telNos?: boolean | AirlineCountOutputTypeCountTelNosArgs
    messages?: boolean | AirlineCountOutputTypeCountMessagesArgs
    contacts?: boolean | AirlineCountOutputTypeCountContactsArgs
  }

  // Custom InputTypes
  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AirlineCountOutputType
     */
    select?: AirlineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountOperatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperateWhereInput
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountAircraftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AircraftWhereInput
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlightWhereInput
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountTelNosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Airline_Tel_NoWhereInput
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Airline_MessageWhereInput
  }

  /**
   * AirlineCountOutputType without action
   */
  export type AirlineCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }


  /**
   * Count Type AircraftCountOutputType
   */

  export type AircraftCountOutputType = {
    seats: number
    flights: number
    cabins: number
  }

  export type AircraftCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seats?: boolean | AircraftCountOutputTypeCountSeatsArgs
    flights?: boolean | AircraftCountOutputTypeCountFlightsArgs
    cabins?: boolean | AircraftCountOutputTypeCountCabinsArgs
  }

  // Custom InputTypes
  /**
   * AircraftCountOutputType without action
   */
  export type AircraftCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AircraftCountOutputType
     */
    select?: AircraftCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AircraftCountOutputType without action
   */
  export type AircraftCountOutputTypeCountSeatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatWhereInput
  }

  /**
   * AircraftCountOutputType without action
   */
  export type AircraftCountOutputTypeCountFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlightWhereInput
  }

  /**
   * AircraftCountOutputType without action
   */
  export type AircraftCountOutputTypeCountCabinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CabinClassWhereInput
  }


  /**
   * Count Type FlightCountOutputType
   */

  export type FlightCountOutputType = {
    passengers: number
    tickets: number
  }

  export type FlightCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | FlightCountOutputTypeCountPassengersArgs
    tickets?: boolean | FlightCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * FlightCountOutputType without action
   */
  export type FlightCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlightCountOutputType
     */
    select?: FlightCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlightCountOutputType without action
   */
  export type FlightCountOutputTypeCountPassengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Assigned_ToWhereInput
  }

  /**
   * FlightCountOutputType without action
   */
  export type FlightCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type Report_ToCountOutputType
   */

  export type Report_ToCountOutputType = {
    Reports: number
  }

  export type Report_ToCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reports?: boolean | Report_ToCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * Report_ToCountOutputType without action
   */
  export type Report_ToCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_ToCountOutputType
     */
    select?: Report_ToCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Report_ToCountOutputType without action
   */
  export type Report_ToCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type SeatCountOutputType
   */

  export type SeatCountOutputType = {
    tickets: number
  }

  export type SeatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | SeatCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * SeatCountOutputType without action
   */
  export type SeatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatCountOutputType
     */
    select?: SeatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeatCountOutputType without action
   */
  export type SeatCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    sentAirlineMessages: number
    contacts: number
    involvedInReports: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentAirlineMessages?: boolean | AdminCountOutputTypeCountSentAirlineMessagesArgs
    contacts?: boolean | AdminCountOutputTypeCountContactsArgs
    involvedInReports?: boolean | AdminCountOutputTypeCountInvolvedInReportsArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountSentAirlineMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Airline_MessageWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountInvolvedInReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Report_ToWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    telNos: number
    assignedFlights: number
    purchases: number
    involvedInReports: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telNos?: boolean | UserCountOutputTypeCountTelNosArgs
    assignedFlights?: boolean | UserCountOutputTypeCountAssignedFlightsArgs
    purchases?: boolean | UserCountOutputTypeCountPurchasesArgs
    involvedInReports?: boolean | UserCountOutputTypeCountInvolvedInReportsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTelNosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: User_Tel_NoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Assigned_ToWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvolvedInReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Report_ToWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Airport
   */

  export type AggregateAirport = {
    _count: AirportCountAggregateOutputType | null
    _min: AirportMinAggregateOutputType | null
    _max: AirportMaxAggregateOutputType | null
  }

  export type AirportMinAggregateOutputType = {
    AirportID: string | null
    AirportName: string | null
    City: string | null
    Country: string | null
  }

  export type AirportMaxAggregateOutputType = {
    AirportID: string | null
    AirportName: string | null
    City: string | null
    Country: string | null
  }

  export type AirportCountAggregateOutputType = {
    AirportID: number
    AirportName: number
    City: number
    Country: number
    _all: number
  }


  export type AirportMinAggregateInputType = {
    AirportID?: true
    AirportName?: true
    City?: true
    Country?: true
  }

  export type AirportMaxAggregateInputType = {
    AirportID?: true
    AirportName?: true
    City?: true
    Country?: true
  }

  export type AirportCountAggregateInputType = {
    AirportID?: true
    AirportName?: true
    City?: true
    Country?: true
    _all?: true
  }

  export type AirportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airport to aggregate.
     */
    where?: AirportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airports to fetch.
     */
    orderBy?: AirportOrderByWithRelationInput | AirportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AirportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Airports
    **/
    _count?: true | AirportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AirportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AirportMaxAggregateInputType
  }

  export type GetAirportAggregateType<T extends AirportAggregateArgs> = {
        [P in keyof T & keyof AggregateAirport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAirport[P]>
      : GetScalarType<T[P], AggregateAirport[P]>
  }




  export type AirportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AirportWhereInput
    orderBy?: AirportOrderByWithAggregationInput | AirportOrderByWithAggregationInput[]
    by: AirportScalarFieldEnum[] | AirportScalarFieldEnum
    having?: AirportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AirportCountAggregateInputType | true
    _min?: AirportMinAggregateInputType
    _max?: AirportMaxAggregateInputType
  }

  export type AirportGroupByOutputType = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    _count: AirportCountAggregateOutputType | null
    _min: AirportMinAggregateOutputType | null
    _max: AirportMaxAggregateOutputType | null
  }

  type GetAirportGroupByPayload<T extends AirportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AirportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AirportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AirportGroupByOutputType[P]>
            : GetScalarType<T[P], AirportGroupByOutputType[P]>
        }
      >
    >


  export type AirportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirportName?: boolean
    City?: boolean
    Country?: boolean
    operates?: boolean | Airport$operatesArgs<ExtArgs>
    departureFlights?: boolean | Airport$departureFlightsArgs<ExtArgs>
    arrivalFlights?: boolean | Airport$arrivalFlightsArgs<ExtArgs>
    _count?: boolean | AirportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airport"]>

  export type AirportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirportName?: boolean
    City?: boolean
    Country?: boolean
  }, ExtArgs["result"]["airport"]>

  export type AirportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirportName?: boolean
    City?: boolean
    Country?: boolean
  }, ExtArgs["result"]["airport"]>

  export type AirportSelectScalar = {
    AirportID?: boolean
    AirportName?: boolean
    City?: boolean
    Country?: boolean
  }

  export type AirportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AirportID" | "AirportName" | "City" | "Country", ExtArgs["result"]["airport"]>
  export type AirportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operates?: boolean | Airport$operatesArgs<ExtArgs>
    departureFlights?: boolean | Airport$departureFlightsArgs<ExtArgs>
    arrivalFlights?: boolean | Airport$arrivalFlightsArgs<ExtArgs>
    _count?: boolean | AirportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AirportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AirportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AirportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Airport"
    objects: {
      operates: Prisma.$OperatePayload<ExtArgs>[]
      departureFlights: Prisma.$FlightPayload<ExtArgs>[]
      arrivalFlights: Prisma.$FlightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AirportID: string
      AirportName: string
      City: string
      Country: string
    }, ExtArgs["result"]["airport"]>
    composites: {}
  }

  type AirportGetPayload<S extends boolean | null | undefined | AirportDefaultArgs> = $Result.GetResult<Prisma.$AirportPayload, S>

  type AirportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AirportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AirportCountAggregateInputType | true
    }

  export interface AirportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Airport'], meta: { name: 'Airport' } }
    /**
     * Find zero or one Airport that matches the filter.
     * @param {AirportFindUniqueArgs} args - Arguments to find a Airport
     * @example
     * // Get one Airport
     * const airport = await prisma.airport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AirportFindUniqueArgs>(args: SelectSubset<T, AirportFindUniqueArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Airport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AirportFindUniqueOrThrowArgs} args - Arguments to find a Airport
     * @example
     * // Get one Airport
     * const airport = await prisma.airport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AirportFindUniqueOrThrowArgs>(args: SelectSubset<T, AirportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportFindFirstArgs} args - Arguments to find a Airport
     * @example
     * // Get one Airport
     * const airport = await prisma.airport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AirportFindFirstArgs>(args?: SelectSubset<T, AirportFindFirstArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportFindFirstOrThrowArgs} args - Arguments to find a Airport
     * @example
     * // Get one Airport
     * const airport = await prisma.airport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AirportFindFirstOrThrowArgs>(args?: SelectSubset<T, AirportFindFirstOrThrowArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Airports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Airports
     * const airports = await prisma.airport.findMany()
     * 
     * // Get first 10 Airports
     * const airports = await prisma.airport.findMany({ take: 10 })
     * 
     * // Only select the `AirportID`
     * const airportWithAirportIDOnly = await prisma.airport.findMany({ select: { AirportID: true } })
     * 
     */
    findMany<T extends AirportFindManyArgs>(args?: SelectSubset<T, AirportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Airport.
     * @param {AirportCreateArgs} args - Arguments to create a Airport.
     * @example
     * // Create one Airport
     * const Airport = await prisma.airport.create({
     *   data: {
     *     // ... data to create a Airport
     *   }
     * })
     * 
     */
    create<T extends AirportCreateArgs>(args: SelectSubset<T, AirportCreateArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Airports.
     * @param {AirportCreateManyArgs} args - Arguments to create many Airports.
     * @example
     * // Create many Airports
     * const airport = await prisma.airport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AirportCreateManyArgs>(args?: SelectSubset<T, AirportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Airports and returns the data saved in the database.
     * @param {AirportCreateManyAndReturnArgs} args - Arguments to create many Airports.
     * @example
     * // Create many Airports
     * const airport = await prisma.airport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Airports and only return the `AirportID`
     * const airportWithAirportIDOnly = await prisma.airport.createManyAndReturn({
     *   select: { AirportID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AirportCreateManyAndReturnArgs>(args?: SelectSubset<T, AirportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Airport.
     * @param {AirportDeleteArgs} args - Arguments to delete one Airport.
     * @example
     * // Delete one Airport
     * const Airport = await prisma.airport.delete({
     *   where: {
     *     // ... filter to delete one Airport
     *   }
     * })
     * 
     */
    delete<T extends AirportDeleteArgs>(args: SelectSubset<T, AirportDeleteArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Airport.
     * @param {AirportUpdateArgs} args - Arguments to update one Airport.
     * @example
     * // Update one Airport
     * const airport = await prisma.airport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AirportUpdateArgs>(args: SelectSubset<T, AirportUpdateArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Airports.
     * @param {AirportDeleteManyArgs} args - Arguments to filter Airports to delete.
     * @example
     * // Delete a few Airports
     * const { count } = await prisma.airport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AirportDeleteManyArgs>(args?: SelectSubset<T, AirportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Airports
     * const airport = await prisma.airport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AirportUpdateManyArgs>(args: SelectSubset<T, AirportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airports and returns the data updated in the database.
     * @param {AirportUpdateManyAndReturnArgs} args - Arguments to update many Airports.
     * @example
     * // Update many Airports
     * const airport = await prisma.airport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Airports and only return the `AirportID`
     * const airportWithAirportIDOnly = await prisma.airport.updateManyAndReturn({
     *   select: { AirportID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AirportUpdateManyAndReturnArgs>(args: SelectSubset<T, AirportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Airport.
     * @param {AirportUpsertArgs} args - Arguments to update or create a Airport.
     * @example
     * // Update or create a Airport
     * const airport = await prisma.airport.upsert({
     *   create: {
     *     // ... data to create a Airport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Airport we want to update
     *   }
     * })
     */
    upsert<T extends AirportUpsertArgs>(args: SelectSubset<T, AirportUpsertArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Airports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportCountArgs} args - Arguments to filter Airports to count.
     * @example
     * // Count the number of Airports
     * const count = await prisma.airport.count({
     *   where: {
     *     // ... the filter for the Airports we want to count
     *   }
     * })
    **/
    count<T extends AirportCountArgs>(
      args?: Subset<T, AirportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AirportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Airport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AirportAggregateArgs>(args: Subset<T, AirportAggregateArgs>): Prisma.PrismaPromise<GetAirportAggregateType<T>>

    /**
     * Group by Airport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AirportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AirportGroupByArgs['orderBy'] }
        : { orderBy?: AirportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AirportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAirportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Airport model
   */
  readonly fields: AirportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Airport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AirportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    operates<T extends Airport$operatesArgs<ExtArgs> = {}>(args?: Subset<T, Airport$operatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departureFlights<T extends Airport$departureFlightsArgs<ExtArgs> = {}>(args?: Subset<T, Airport$departureFlightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    arrivalFlights<T extends Airport$arrivalFlightsArgs<ExtArgs> = {}>(args?: Subset<T, Airport$arrivalFlightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Airport model
   */
  interface AirportFieldRefs {
    readonly AirportID: FieldRef<"Airport", 'String'>
    readonly AirportName: FieldRef<"Airport", 'String'>
    readonly City: FieldRef<"Airport", 'String'>
    readonly Country: FieldRef<"Airport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Airport findUnique
   */
  export type AirportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter, which Airport to fetch.
     */
    where: AirportWhereUniqueInput
  }

  /**
   * Airport findUniqueOrThrow
   */
  export type AirportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter, which Airport to fetch.
     */
    where: AirportWhereUniqueInput
  }

  /**
   * Airport findFirst
   */
  export type AirportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter, which Airport to fetch.
     */
    where?: AirportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airports to fetch.
     */
    orderBy?: AirportOrderByWithRelationInput | AirportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airports.
     */
    cursor?: AirportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airports.
     */
    distinct?: AirportScalarFieldEnum | AirportScalarFieldEnum[]
  }

  /**
   * Airport findFirstOrThrow
   */
  export type AirportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter, which Airport to fetch.
     */
    where?: AirportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airports to fetch.
     */
    orderBy?: AirportOrderByWithRelationInput | AirportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airports.
     */
    cursor?: AirportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airports.
     */
    distinct?: AirportScalarFieldEnum | AirportScalarFieldEnum[]
  }

  /**
   * Airport findMany
   */
  export type AirportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter, which Airports to fetch.
     */
    where?: AirportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airports to fetch.
     */
    orderBy?: AirportOrderByWithRelationInput | AirportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Airports.
     */
    cursor?: AirportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airports.
     */
    skip?: number
    distinct?: AirportScalarFieldEnum | AirportScalarFieldEnum[]
  }

  /**
   * Airport create
   */
  export type AirportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * The data needed to create a Airport.
     */
    data: XOR<AirportCreateInput, AirportUncheckedCreateInput>
  }

  /**
   * Airport createMany
   */
  export type AirportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Airports.
     */
    data: AirportCreateManyInput | AirportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airport createManyAndReturn
   */
  export type AirportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * The data used to create many Airports.
     */
    data: AirportCreateManyInput | AirportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airport update
   */
  export type AirportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * The data needed to update a Airport.
     */
    data: XOR<AirportUpdateInput, AirportUncheckedUpdateInput>
    /**
     * Choose, which Airport to update.
     */
    where: AirportWhereUniqueInput
  }

  /**
   * Airport updateMany
   */
  export type AirportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Airports.
     */
    data: XOR<AirportUpdateManyMutationInput, AirportUncheckedUpdateManyInput>
    /**
     * Filter which Airports to update
     */
    where?: AirportWhereInput
    /**
     * Limit how many Airports to update.
     */
    limit?: number
  }

  /**
   * Airport updateManyAndReturn
   */
  export type AirportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * The data used to update Airports.
     */
    data: XOR<AirportUpdateManyMutationInput, AirportUncheckedUpdateManyInput>
    /**
     * Filter which Airports to update
     */
    where?: AirportWhereInput
    /**
     * Limit how many Airports to update.
     */
    limit?: number
  }

  /**
   * Airport upsert
   */
  export type AirportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * The filter to search for the Airport to update in case it exists.
     */
    where: AirportWhereUniqueInput
    /**
     * In case the Airport found by the `where` argument doesn't exist, create a new Airport with this data.
     */
    create: XOR<AirportCreateInput, AirportUncheckedCreateInput>
    /**
     * In case the Airport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AirportUpdateInput, AirportUncheckedUpdateInput>
  }

  /**
   * Airport delete
   */
  export type AirportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
    /**
     * Filter which Airport to delete.
     */
    where: AirportWhereUniqueInput
  }

  /**
   * Airport deleteMany
   */
  export type AirportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airports to delete
     */
    where?: AirportWhereInput
    /**
     * Limit how many Airports to delete.
     */
    limit?: number
  }

  /**
   * Airport.operates
   */
  export type Airport$operatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    where?: OperateWhereInput
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    cursor?: OperateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperateScalarFieldEnum | OperateScalarFieldEnum[]
  }

  /**
   * Airport.departureFlights
   */
  export type Airport$departureFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    where?: FlightWhereInput
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    cursor?: FlightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Airport.arrivalFlights
   */
  export type Airport$arrivalFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    where?: FlightWhereInput
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    cursor?: FlightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Airport without action
   */
  export type AirportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airport
     */
    select?: AirportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airport
     */
    omit?: AirportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirportInclude<ExtArgs> | null
  }


  /**
   * Model Airline
   */

  export type AggregateAirline = {
    _count: AirlineCountAggregateOutputType | null
    _avg: AirlineAvgAggregateOutputType | null
    _sum: AirlineSumAggregateOutputType | null
    _min: AirlineMinAggregateOutputType | null
    _max: AirlineMaxAggregateOutputType | null
  }

  export type AirlineAvgAggregateOutputType = {
    AmountOfAircraft: number | null
  }

  export type AirlineSumAggregateOutputType = {
    AmountOfAircraft: number | null
  }

  export type AirlineMinAggregateOutputType = {
    AirlineName: string | null
    AirlineCaption: string | null
    Website: string | null
    AmountOfAircraft: number | null
    Logo: string | null
  }

  export type AirlineMaxAggregateOutputType = {
    AirlineName: string | null
    AirlineCaption: string | null
    Website: string | null
    AmountOfAircraft: number | null
    Logo: string | null
  }

  export type AirlineCountAggregateOutputType = {
    AirlineName: number
    AirlineCaption: number
    Website: number
    AmountOfAircraft: number
    Logo: number
    _all: number
  }


  export type AirlineAvgAggregateInputType = {
    AmountOfAircraft?: true
  }

  export type AirlineSumAggregateInputType = {
    AmountOfAircraft?: true
  }

  export type AirlineMinAggregateInputType = {
    AirlineName?: true
    AirlineCaption?: true
    Website?: true
    AmountOfAircraft?: true
    Logo?: true
  }

  export type AirlineMaxAggregateInputType = {
    AirlineName?: true
    AirlineCaption?: true
    Website?: true
    AmountOfAircraft?: true
    Logo?: true
  }

  export type AirlineCountAggregateInputType = {
    AirlineName?: true
    AirlineCaption?: true
    Website?: true
    AmountOfAircraft?: true
    Logo?: true
    _all?: true
  }

  export type AirlineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airline to aggregate.
     */
    where?: AirlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airlines to fetch.
     */
    orderBy?: AirlineOrderByWithRelationInput | AirlineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AirlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Airlines
    **/
    _count?: true | AirlineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AirlineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AirlineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AirlineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AirlineMaxAggregateInputType
  }

  export type GetAirlineAggregateType<T extends AirlineAggregateArgs> = {
        [P in keyof T & keyof AggregateAirline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAirline[P]>
      : GetScalarType<T[P], AggregateAirline[P]>
  }




  export type AirlineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AirlineWhereInput
    orderBy?: AirlineOrderByWithAggregationInput | AirlineOrderByWithAggregationInput[]
    by: AirlineScalarFieldEnum[] | AirlineScalarFieldEnum
    having?: AirlineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AirlineCountAggregateInputType | true
    _avg?: AirlineAvgAggregateInputType
    _sum?: AirlineSumAggregateInputType
    _min?: AirlineMinAggregateInputType
    _max?: AirlineMaxAggregateInputType
  }

  export type AirlineGroupByOutputType = {
    AirlineName: string
    AirlineCaption: string
    Website: string | null
    AmountOfAircraft: number
    Logo: string | null
    _count: AirlineCountAggregateOutputType | null
    _avg: AirlineAvgAggregateOutputType | null
    _sum: AirlineSumAggregateOutputType | null
    _min: AirlineMinAggregateOutputType | null
    _max: AirlineMaxAggregateOutputType | null
  }

  type GetAirlineGroupByPayload<T extends AirlineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AirlineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AirlineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AirlineGroupByOutputType[P]>
            : GetScalarType<T[P], AirlineGroupByOutputType[P]>
        }
      >
    >


  export type AirlineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AirlineCaption?: boolean
    Website?: boolean
    AmountOfAircraft?: boolean
    Logo?: boolean
    operates?: boolean | Airline$operatesArgs<ExtArgs>
    aircrafts?: boolean | Airline$aircraftsArgs<ExtArgs>
    flights?: boolean | Airline$flightsArgs<ExtArgs>
    telNos?: boolean | Airline$telNosArgs<ExtArgs>
    messages?: boolean | Airline$messagesArgs<ExtArgs>
    contacts?: boolean | Airline$contactsArgs<ExtArgs>
    _count?: boolean | AirlineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline"]>

  export type AirlineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AirlineCaption?: boolean
    Website?: boolean
    AmountOfAircraft?: boolean
    Logo?: boolean
  }, ExtArgs["result"]["airline"]>

  export type AirlineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AirlineCaption?: boolean
    Website?: boolean
    AmountOfAircraft?: boolean
    Logo?: boolean
  }, ExtArgs["result"]["airline"]>

  export type AirlineSelectScalar = {
    AirlineName?: boolean
    AirlineCaption?: boolean
    Website?: boolean
    AmountOfAircraft?: boolean
    Logo?: boolean
  }

  export type AirlineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AirlineName" | "AirlineCaption" | "Website" | "AmountOfAircraft" | "Logo", ExtArgs["result"]["airline"]>
  export type AirlineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operates?: boolean | Airline$operatesArgs<ExtArgs>
    aircrafts?: boolean | Airline$aircraftsArgs<ExtArgs>
    flights?: boolean | Airline$flightsArgs<ExtArgs>
    telNos?: boolean | Airline$telNosArgs<ExtArgs>
    messages?: boolean | Airline$messagesArgs<ExtArgs>
    contacts?: boolean | Airline$contactsArgs<ExtArgs>
    _count?: boolean | AirlineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AirlineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AirlineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AirlinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Airline"
    objects: {
      operates: Prisma.$OperatePayload<ExtArgs>[]
      aircrafts: Prisma.$AircraftPayload<ExtArgs>[]
      flights: Prisma.$FlightPayload<ExtArgs>[]
      telNos: Prisma.$Airline_Tel_NoPayload<ExtArgs>[]
      messages: Prisma.$Airline_MessagePayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AirlineName: string
      AirlineCaption: string
      Website: string | null
      AmountOfAircraft: number
      Logo: string | null
    }, ExtArgs["result"]["airline"]>
    composites: {}
  }

  type AirlineGetPayload<S extends boolean | null | undefined | AirlineDefaultArgs> = $Result.GetResult<Prisma.$AirlinePayload, S>

  type AirlineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AirlineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AirlineCountAggregateInputType | true
    }

  export interface AirlineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Airline'], meta: { name: 'Airline' } }
    /**
     * Find zero or one Airline that matches the filter.
     * @param {AirlineFindUniqueArgs} args - Arguments to find a Airline
     * @example
     * // Get one Airline
     * const airline = await prisma.airline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AirlineFindUniqueArgs>(args: SelectSubset<T, AirlineFindUniqueArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Airline that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AirlineFindUniqueOrThrowArgs} args - Arguments to find a Airline
     * @example
     * // Get one Airline
     * const airline = await prisma.airline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AirlineFindUniqueOrThrowArgs>(args: SelectSubset<T, AirlineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineFindFirstArgs} args - Arguments to find a Airline
     * @example
     * // Get one Airline
     * const airline = await prisma.airline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AirlineFindFirstArgs>(args?: SelectSubset<T, AirlineFindFirstArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineFindFirstOrThrowArgs} args - Arguments to find a Airline
     * @example
     * // Get one Airline
     * const airline = await prisma.airline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AirlineFindFirstOrThrowArgs>(args?: SelectSubset<T, AirlineFindFirstOrThrowArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Airlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Airlines
     * const airlines = await prisma.airline.findMany()
     * 
     * // Get first 10 Airlines
     * const airlines = await prisma.airline.findMany({ take: 10 })
     * 
     * // Only select the `AirlineName`
     * const airlineWithAirlineNameOnly = await prisma.airline.findMany({ select: { AirlineName: true } })
     * 
     */
    findMany<T extends AirlineFindManyArgs>(args?: SelectSubset<T, AirlineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Airline.
     * @param {AirlineCreateArgs} args - Arguments to create a Airline.
     * @example
     * // Create one Airline
     * const Airline = await prisma.airline.create({
     *   data: {
     *     // ... data to create a Airline
     *   }
     * })
     * 
     */
    create<T extends AirlineCreateArgs>(args: SelectSubset<T, AirlineCreateArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Airlines.
     * @param {AirlineCreateManyArgs} args - Arguments to create many Airlines.
     * @example
     * // Create many Airlines
     * const airline = await prisma.airline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AirlineCreateManyArgs>(args?: SelectSubset<T, AirlineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Airlines and returns the data saved in the database.
     * @param {AirlineCreateManyAndReturnArgs} args - Arguments to create many Airlines.
     * @example
     * // Create many Airlines
     * const airline = await prisma.airline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Airlines and only return the `AirlineName`
     * const airlineWithAirlineNameOnly = await prisma.airline.createManyAndReturn({
     *   select: { AirlineName: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AirlineCreateManyAndReturnArgs>(args?: SelectSubset<T, AirlineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Airline.
     * @param {AirlineDeleteArgs} args - Arguments to delete one Airline.
     * @example
     * // Delete one Airline
     * const Airline = await prisma.airline.delete({
     *   where: {
     *     // ... filter to delete one Airline
     *   }
     * })
     * 
     */
    delete<T extends AirlineDeleteArgs>(args: SelectSubset<T, AirlineDeleteArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Airline.
     * @param {AirlineUpdateArgs} args - Arguments to update one Airline.
     * @example
     * // Update one Airline
     * const airline = await prisma.airline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AirlineUpdateArgs>(args: SelectSubset<T, AirlineUpdateArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Airlines.
     * @param {AirlineDeleteManyArgs} args - Arguments to filter Airlines to delete.
     * @example
     * // Delete a few Airlines
     * const { count } = await prisma.airline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AirlineDeleteManyArgs>(args?: SelectSubset<T, AirlineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Airlines
     * const airline = await prisma.airline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AirlineUpdateManyArgs>(args: SelectSubset<T, AirlineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airlines and returns the data updated in the database.
     * @param {AirlineUpdateManyAndReturnArgs} args - Arguments to update many Airlines.
     * @example
     * // Update many Airlines
     * const airline = await prisma.airline.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Airlines and only return the `AirlineName`
     * const airlineWithAirlineNameOnly = await prisma.airline.updateManyAndReturn({
     *   select: { AirlineName: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AirlineUpdateManyAndReturnArgs>(args: SelectSubset<T, AirlineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Airline.
     * @param {AirlineUpsertArgs} args - Arguments to update or create a Airline.
     * @example
     * // Update or create a Airline
     * const airline = await prisma.airline.upsert({
     *   create: {
     *     // ... data to create a Airline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Airline we want to update
     *   }
     * })
     */
    upsert<T extends AirlineUpsertArgs>(args: SelectSubset<T, AirlineUpsertArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Airlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineCountArgs} args - Arguments to filter Airlines to count.
     * @example
     * // Count the number of Airlines
     * const count = await prisma.airline.count({
     *   where: {
     *     // ... the filter for the Airlines we want to count
     *   }
     * })
    **/
    count<T extends AirlineCountArgs>(
      args?: Subset<T, AirlineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AirlineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Airline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AirlineAggregateArgs>(args: Subset<T, AirlineAggregateArgs>): Prisma.PrismaPromise<GetAirlineAggregateType<T>>

    /**
     * Group by Airline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AirlineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AirlineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AirlineGroupByArgs['orderBy'] }
        : { orderBy?: AirlineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AirlineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAirlineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Airline model
   */
  readonly fields: AirlineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Airline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AirlineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    operates<T extends Airline$operatesArgs<ExtArgs> = {}>(args?: Subset<T, Airline$operatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aircrafts<T extends Airline$aircraftsArgs<ExtArgs> = {}>(args?: Subset<T, Airline$aircraftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    flights<T extends Airline$flightsArgs<ExtArgs> = {}>(args?: Subset<T, Airline$flightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    telNos<T extends Airline$telNosArgs<ExtArgs> = {}>(args?: Subset<T, Airline$telNosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Airline$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Airline$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contacts<T extends Airline$contactsArgs<ExtArgs> = {}>(args?: Subset<T, Airline$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Airline model
   */
  interface AirlineFieldRefs {
    readonly AirlineName: FieldRef<"Airline", 'String'>
    readonly AirlineCaption: FieldRef<"Airline", 'String'>
    readonly Website: FieldRef<"Airline", 'String'>
    readonly AmountOfAircraft: FieldRef<"Airline", 'Int'>
    readonly Logo: FieldRef<"Airline", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Airline findUnique
   */
  export type AirlineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter, which Airline to fetch.
     */
    where: AirlineWhereUniqueInput
  }

  /**
   * Airline findUniqueOrThrow
   */
  export type AirlineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter, which Airline to fetch.
     */
    where: AirlineWhereUniqueInput
  }

  /**
   * Airline findFirst
   */
  export type AirlineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter, which Airline to fetch.
     */
    where?: AirlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airlines to fetch.
     */
    orderBy?: AirlineOrderByWithRelationInput | AirlineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airlines.
     */
    cursor?: AirlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airlines.
     */
    distinct?: AirlineScalarFieldEnum | AirlineScalarFieldEnum[]
  }

  /**
   * Airline findFirstOrThrow
   */
  export type AirlineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter, which Airline to fetch.
     */
    where?: AirlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airlines to fetch.
     */
    orderBy?: AirlineOrderByWithRelationInput | AirlineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airlines.
     */
    cursor?: AirlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airlines.
     */
    distinct?: AirlineScalarFieldEnum | AirlineScalarFieldEnum[]
  }

  /**
   * Airline findMany
   */
  export type AirlineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter, which Airlines to fetch.
     */
    where?: AirlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airlines to fetch.
     */
    orderBy?: AirlineOrderByWithRelationInput | AirlineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Airlines.
     */
    cursor?: AirlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airlines.
     */
    skip?: number
    distinct?: AirlineScalarFieldEnum | AirlineScalarFieldEnum[]
  }

  /**
   * Airline create
   */
  export type AirlineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * The data needed to create a Airline.
     */
    data: XOR<AirlineCreateInput, AirlineUncheckedCreateInput>
  }

  /**
   * Airline createMany
   */
  export type AirlineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Airlines.
     */
    data: AirlineCreateManyInput | AirlineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airline createManyAndReturn
   */
  export type AirlineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * The data used to create many Airlines.
     */
    data: AirlineCreateManyInput | AirlineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airline update
   */
  export type AirlineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * The data needed to update a Airline.
     */
    data: XOR<AirlineUpdateInput, AirlineUncheckedUpdateInput>
    /**
     * Choose, which Airline to update.
     */
    where: AirlineWhereUniqueInput
  }

  /**
   * Airline updateMany
   */
  export type AirlineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Airlines.
     */
    data: XOR<AirlineUpdateManyMutationInput, AirlineUncheckedUpdateManyInput>
    /**
     * Filter which Airlines to update
     */
    where?: AirlineWhereInput
    /**
     * Limit how many Airlines to update.
     */
    limit?: number
  }

  /**
   * Airline updateManyAndReturn
   */
  export type AirlineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * The data used to update Airlines.
     */
    data: XOR<AirlineUpdateManyMutationInput, AirlineUncheckedUpdateManyInput>
    /**
     * Filter which Airlines to update
     */
    where?: AirlineWhereInput
    /**
     * Limit how many Airlines to update.
     */
    limit?: number
  }

  /**
   * Airline upsert
   */
  export type AirlineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * The filter to search for the Airline to update in case it exists.
     */
    where: AirlineWhereUniqueInput
    /**
     * In case the Airline found by the `where` argument doesn't exist, create a new Airline with this data.
     */
    create: XOR<AirlineCreateInput, AirlineUncheckedCreateInput>
    /**
     * In case the Airline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AirlineUpdateInput, AirlineUncheckedUpdateInput>
  }

  /**
   * Airline delete
   */
  export type AirlineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
    /**
     * Filter which Airline to delete.
     */
    where: AirlineWhereUniqueInput
  }

  /**
   * Airline deleteMany
   */
  export type AirlineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airlines to delete
     */
    where?: AirlineWhereInput
    /**
     * Limit how many Airlines to delete.
     */
    limit?: number
  }

  /**
   * Airline.operates
   */
  export type Airline$operatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    where?: OperateWhereInput
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    cursor?: OperateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperateScalarFieldEnum | OperateScalarFieldEnum[]
  }

  /**
   * Airline.aircrafts
   */
  export type Airline$aircraftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    where?: AircraftWhereInput
    orderBy?: AircraftOrderByWithRelationInput | AircraftOrderByWithRelationInput[]
    cursor?: AircraftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AircraftScalarFieldEnum | AircraftScalarFieldEnum[]
  }

  /**
   * Airline.flights
   */
  export type Airline$flightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    where?: FlightWhereInput
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    cursor?: FlightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Airline.telNos
   */
  export type Airline$telNosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    where?: Airline_Tel_NoWhereInput
    orderBy?: Airline_Tel_NoOrderByWithRelationInput | Airline_Tel_NoOrderByWithRelationInput[]
    cursor?: Airline_Tel_NoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Airline_Tel_NoScalarFieldEnum | Airline_Tel_NoScalarFieldEnum[]
  }

  /**
   * Airline.messages
   */
  export type Airline$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    where?: Airline_MessageWhereInput
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    cursor?: Airline_MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Airline_MessageScalarFieldEnum | Airline_MessageScalarFieldEnum[]
  }

  /**
   * Airline.contacts
   */
  export type Airline$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Airline without action
   */
  export type AirlineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline
     */
    select?: AirlineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline
     */
    omit?: AirlineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AirlineInclude<ExtArgs> | null
  }


  /**
   * Model Aircraft
   */

  export type AggregateAircraft = {
    _count: AircraftCountAggregateOutputType | null
    _avg: AircraftAvgAggregateOutputType | null
    _sum: AircraftSumAggregateOutputType | null
    _min: AircraftMinAggregateOutputType | null
    _max: AircraftMaxAggregateOutputType | null
  }

  export type AircraftAvgAggregateOutputType = {
    SeatCapacity: number | null
  }

  export type AircraftSumAggregateOutputType = {
    SeatCapacity: number | null
  }

  export type AircraftMinAggregateOutputType = {
    AircraftRegNo: string | null
    AirlineName: string | null
    SeatCapacity: number | null
    ModelName: string | null
  }

  export type AircraftMaxAggregateOutputType = {
    AircraftRegNo: string | null
    AirlineName: string | null
    SeatCapacity: number | null
    ModelName: string | null
  }

  export type AircraftCountAggregateOutputType = {
    AircraftRegNo: number
    AirlineName: number
    SeatCapacity: number
    ModelName: number
    _all: number
  }


  export type AircraftAvgAggregateInputType = {
    SeatCapacity?: true
  }

  export type AircraftSumAggregateInputType = {
    SeatCapacity?: true
  }

  export type AircraftMinAggregateInputType = {
    AircraftRegNo?: true
    AirlineName?: true
    SeatCapacity?: true
    ModelName?: true
  }

  export type AircraftMaxAggregateInputType = {
    AircraftRegNo?: true
    AirlineName?: true
    SeatCapacity?: true
    ModelName?: true
  }

  export type AircraftCountAggregateInputType = {
    AircraftRegNo?: true
    AirlineName?: true
    SeatCapacity?: true
    ModelName?: true
    _all?: true
  }

  export type AircraftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aircraft to aggregate.
     */
    where?: AircraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aircraft to fetch.
     */
    orderBy?: AircraftOrderByWithRelationInput | AircraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AircraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aircraft from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aircraft.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aircraft
    **/
    _count?: true | AircraftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AircraftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AircraftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AircraftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AircraftMaxAggregateInputType
  }

  export type GetAircraftAggregateType<T extends AircraftAggregateArgs> = {
        [P in keyof T & keyof AggregateAircraft]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAircraft[P]>
      : GetScalarType<T[P], AggregateAircraft[P]>
  }




  export type AircraftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AircraftWhereInput
    orderBy?: AircraftOrderByWithAggregationInput | AircraftOrderByWithAggregationInput[]
    by: AircraftScalarFieldEnum[] | AircraftScalarFieldEnum
    having?: AircraftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AircraftCountAggregateInputType | true
    _avg?: AircraftAvgAggregateInputType
    _sum?: AircraftSumAggregateInputType
    _min?: AircraftMinAggregateInputType
    _max?: AircraftMaxAggregateInputType
  }

  export type AircraftGroupByOutputType = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
    _count: AircraftCountAggregateOutputType | null
    _avg: AircraftAvgAggregateOutputType | null
    _sum: AircraftSumAggregateOutputType | null
    _min: AircraftMinAggregateOutputType | null
    _max: AircraftMaxAggregateOutputType | null
  }

  type GetAircraftGroupByPayload<T extends AircraftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AircraftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AircraftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AircraftGroupByOutputType[P]>
            : GetScalarType<T[P], AircraftGroupByOutputType[P]>
        }
      >
    >


  export type AircraftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    AirlineName?: boolean
    SeatCapacity?: boolean
    ModelName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    seats?: boolean | Aircraft$seatsArgs<ExtArgs>
    flights?: boolean | Aircraft$flightsArgs<ExtArgs>
    cabins?: boolean | Aircraft$cabinsArgs<ExtArgs>
    _count?: boolean | AircraftCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aircraft"]>

  export type AircraftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    AirlineName?: boolean
    SeatCapacity?: boolean
    ModelName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aircraft"]>

  export type AircraftSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    AirlineName?: boolean
    SeatCapacity?: boolean
    ModelName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aircraft"]>

  export type AircraftSelectScalar = {
    AircraftRegNo?: boolean
    AirlineName?: boolean
    SeatCapacity?: boolean
    ModelName?: boolean
  }

  export type AircraftOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AircraftRegNo" | "AirlineName" | "SeatCapacity" | "ModelName", ExtArgs["result"]["aircraft"]>
  export type AircraftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    seats?: boolean | Aircraft$seatsArgs<ExtArgs>
    flights?: boolean | Aircraft$flightsArgs<ExtArgs>
    cabins?: boolean | Aircraft$cabinsArgs<ExtArgs>
    _count?: boolean | AircraftCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AircraftIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type AircraftIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }

  export type $AircraftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aircraft"
    objects: {
      airline: Prisma.$AirlinePayload<ExtArgs>
      seats: Prisma.$SeatPayload<ExtArgs>[]
      flights: Prisma.$FlightPayload<ExtArgs>[]
      cabins: Prisma.$CabinClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AircraftRegNo: string
      AirlineName: string
      SeatCapacity: number
      ModelName: string
    }, ExtArgs["result"]["aircraft"]>
    composites: {}
  }

  type AircraftGetPayload<S extends boolean | null | undefined | AircraftDefaultArgs> = $Result.GetResult<Prisma.$AircraftPayload, S>

  type AircraftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AircraftFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AircraftCountAggregateInputType | true
    }

  export interface AircraftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aircraft'], meta: { name: 'Aircraft' } }
    /**
     * Find zero or one Aircraft that matches the filter.
     * @param {AircraftFindUniqueArgs} args - Arguments to find a Aircraft
     * @example
     * // Get one Aircraft
     * const aircraft = await prisma.aircraft.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AircraftFindUniqueArgs>(args: SelectSubset<T, AircraftFindUniqueArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Aircraft that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AircraftFindUniqueOrThrowArgs} args - Arguments to find a Aircraft
     * @example
     * // Get one Aircraft
     * const aircraft = await prisma.aircraft.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AircraftFindUniqueOrThrowArgs>(args: SelectSubset<T, AircraftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aircraft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftFindFirstArgs} args - Arguments to find a Aircraft
     * @example
     * // Get one Aircraft
     * const aircraft = await prisma.aircraft.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AircraftFindFirstArgs>(args?: SelectSubset<T, AircraftFindFirstArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aircraft that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftFindFirstOrThrowArgs} args - Arguments to find a Aircraft
     * @example
     * // Get one Aircraft
     * const aircraft = await prisma.aircraft.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AircraftFindFirstOrThrowArgs>(args?: SelectSubset<T, AircraftFindFirstOrThrowArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Aircraft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aircraft
     * const aircraft = await prisma.aircraft.findMany()
     * 
     * // Get first 10 Aircraft
     * const aircraft = await prisma.aircraft.findMany({ take: 10 })
     * 
     * // Only select the `AircraftRegNo`
     * const aircraftWithAircraftRegNoOnly = await prisma.aircraft.findMany({ select: { AircraftRegNo: true } })
     * 
     */
    findMany<T extends AircraftFindManyArgs>(args?: SelectSubset<T, AircraftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Aircraft.
     * @param {AircraftCreateArgs} args - Arguments to create a Aircraft.
     * @example
     * // Create one Aircraft
     * const Aircraft = await prisma.aircraft.create({
     *   data: {
     *     // ... data to create a Aircraft
     *   }
     * })
     * 
     */
    create<T extends AircraftCreateArgs>(args: SelectSubset<T, AircraftCreateArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Aircraft.
     * @param {AircraftCreateManyArgs} args - Arguments to create many Aircraft.
     * @example
     * // Create many Aircraft
     * const aircraft = await prisma.aircraft.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AircraftCreateManyArgs>(args?: SelectSubset<T, AircraftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Aircraft and returns the data saved in the database.
     * @param {AircraftCreateManyAndReturnArgs} args - Arguments to create many Aircraft.
     * @example
     * // Create many Aircraft
     * const aircraft = await prisma.aircraft.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Aircraft and only return the `AircraftRegNo`
     * const aircraftWithAircraftRegNoOnly = await prisma.aircraft.createManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AircraftCreateManyAndReturnArgs>(args?: SelectSubset<T, AircraftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Aircraft.
     * @param {AircraftDeleteArgs} args - Arguments to delete one Aircraft.
     * @example
     * // Delete one Aircraft
     * const Aircraft = await prisma.aircraft.delete({
     *   where: {
     *     // ... filter to delete one Aircraft
     *   }
     * })
     * 
     */
    delete<T extends AircraftDeleteArgs>(args: SelectSubset<T, AircraftDeleteArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Aircraft.
     * @param {AircraftUpdateArgs} args - Arguments to update one Aircraft.
     * @example
     * // Update one Aircraft
     * const aircraft = await prisma.aircraft.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AircraftUpdateArgs>(args: SelectSubset<T, AircraftUpdateArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Aircraft.
     * @param {AircraftDeleteManyArgs} args - Arguments to filter Aircraft to delete.
     * @example
     * // Delete a few Aircraft
     * const { count } = await prisma.aircraft.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AircraftDeleteManyArgs>(args?: SelectSubset<T, AircraftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aircraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aircraft
     * const aircraft = await prisma.aircraft.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AircraftUpdateManyArgs>(args: SelectSubset<T, AircraftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aircraft and returns the data updated in the database.
     * @param {AircraftUpdateManyAndReturnArgs} args - Arguments to update many Aircraft.
     * @example
     * // Update many Aircraft
     * const aircraft = await prisma.aircraft.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Aircraft and only return the `AircraftRegNo`
     * const aircraftWithAircraftRegNoOnly = await prisma.aircraft.updateManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AircraftUpdateManyAndReturnArgs>(args: SelectSubset<T, AircraftUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Aircraft.
     * @param {AircraftUpsertArgs} args - Arguments to update or create a Aircraft.
     * @example
     * // Update or create a Aircraft
     * const aircraft = await prisma.aircraft.upsert({
     *   create: {
     *     // ... data to create a Aircraft
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aircraft we want to update
     *   }
     * })
     */
    upsert<T extends AircraftUpsertArgs>(args: SelectSubset<T, AircraftUpsertArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Aircraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftCountArgs} args - Arguments to filter Aircraft to count.
     * @example
     * // Count the number of Aircraft
     * const count = await prisma.aircraft.count({
     *   where: {
     *     // ... the filter for the Aircraft we want to count
     *   }
     * })
    **/
    count<T extends AircraftCountArgs>(
      args?: Subset<T, AircraftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AircraftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aircraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AircraftAggregateArgs>(args: Subset<T, AircraftAggregateArgs>): Prisma.PrismaPromise<GetAircraftAggregateType<T>>

    /**
     * Group by Aircraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AircraftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AircraftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AircraftGroupByArgs['orderBy'] }
        : { orderBy?: AircraftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AircraftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAircraftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aircraft model
   */
  readonly fields: AircraftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aircraft.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AircraftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seats<T extends Aircraft$seatsArgs<ExtArgs> = {}>(args?: Subset<T, Aircraft$seatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    flights<T extends Aircraft$flightsArgs<ExtArgs> = {}>(args?: Subset<T, Aircraft$flightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cabins<T extends Aircraft$cabinsArgs<ExtArgs> = {}>(args?: Subset<T, Aircraft$cabinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Aircraft model
   */
  interface AircraftFieldRefs {
    readonly AircraftRegNo: FieldRef<"Aircraft", 'String'>
    readonly AirlineName: FieldRef<"Aircraft", 'String'>
    readonly SeatCapacity: FieldRef<"Aircraft", 'Int'>
    readonly ModelName: FieldRef<"Aircraft", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Aircraft findUnique
   */
  export type AircraftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter, which Aircraft to fetch.
     */
    where: AircraftWhereUniqueInput
  }

  /**
   * Aircraft findUniqueOrThrow
   */
  export type AircraftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter, which Aircraft to fetch.
     */
    where: AircraftWhereUniqueInput
  }

  /**
   * Aircraft findFirst
   */
  export type AircraftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter, which Aircraft to fetch.
     */
    where?: AircraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aircraft to fetch.
     */
    orderBy?: AircraftOrderByWithRelationInput | AircraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aircraft.
     */
    cursor?: AircraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aircraft from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aircraft.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aircraft.
     */
    distinct?: AircraftScalarFieldEnum | AircraftScalarFieldEnum[]
  }

  /**
   * Aircraft findFirstOrThrow
   */
  export type AircraftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter, which Aircraft to fetch.
     */
    where?: AircraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aircraft to fetch.
     */
    orderBy?: AircraftOrderByWithRelationInput | AircraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aircraft.
     */
    cursor?: AircraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aircraft from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aircraft.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aircraft.
     */
    distinct?: AircraftScalarFieldEnum | AircraftScalarFieldEnum[]
  }

  /**
   * Aircraft findMany
   */
  export type AircraftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter, which Aircraft to fetch.
     */
    where?: AircraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aircraft to fetch.
     */
    orderBy?: AircraftOrderByWithRelationInput | AircraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aircraft.
     */
    cursor?: AircraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aircraft from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aircraft.
     */
    skip?: number
    distinct?: AircraftScalarFieldEnum | AircraftScalarFieldEnum[]
  }

  /**
   * Aircraft create
   */
  export type AircraftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * The data needed to create a Aircraft.
     */
    data: XOR<AircraftCreateInput, AircraftUncheckedCreateInput>
  }

  /**
   * Aircraft createMany
   */
  export type AircraftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aircraft.
     */
    data: AircraftCreateManyInput | AircraftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aircraft createManyAndReturn
   */
  export type AircraftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * The data used to create many Aircraft.
     */
    data: AircraftCreateManyInput | AircraftCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Aircraft update
   */
  export type AircraftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * The data needed to update a Aircraft.
     */
    data: XOR<AircraftUpdateInput, AircraftUncheckedUpdateInput>
    /**
     * Choose, which Aircraft to update.
     */
    where: AircraftWhereUniqueInput
  }

  /**
   * Aircraft updateMany
   */
  export type AircraftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aircraft.
     */
    data: XOR<AircraftUpdateManyMutationInput, AircraftUncheckedUpdateManyInput>
    /**
     * Filter which Aircraft to update
     */
    where?: AircraftWhereInput
    /**
     * Limit how many Aircraft to update.
     */
    limit?: number
  }

  /**
   * Aircraft updateManyAndReturn
   */
  export type AircraftUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * The data used to update Aircraft.
     */
    data: XOR<AircraftUpdateManyMutationInput, AircraftUncheckedUpdateManyInput>
    /**
     * Filter which Aircraft to update
     */
    where?: AircraftWhereInput
    /**
     * Limit how many Aircraft to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Aircraft upsert
   */
  export type AircraftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * The filter to search for the Aircraft to update in case it exists.
     */
    where: AircraftWhereUniqueInput
    /**
     * In case the Aircraft found by the `where` argument doesn't exist, create a new Aircraft with this data.
     */
    create: XOR<AircraftCreateInput, AircraftUncheckedCreateInput>
    /**
     * In case the Aircraft was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AircraftUpdateInput, AircraftUncheckedUpdateInput>
  }

  /**
   * Aircraft delete
   */
  export type AircraftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
    /**
     * Filter which Aircraft to delete.
     */
    where: AircraftWhereUniqueInput
  }

  /**
   * Aircraft deleteMany
   */
  export type AircraftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aircraft to delete
     */
    where?: AircraftWhereInput
    /**
     * Limit how many Aircraft to delete.
     */
    limit?: number
  }

  /**
   * Aircraft.seats
   */
  export type Aircraft$seatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    where?: SeatWhereInput
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    cursor?: SeatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Aircraft.flights
   */
  export type Aircraft$flightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    where?: FlightWhereInput
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    cursor?: FlightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Aircraft.cabins
   */
  export type Aircraft$cabinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    where?: CabinClassWhereInput
    orderBy?: CabinClassOrderByWithRelationInput | CabinClassOrderByWithRelationInput[]
    cursor?: CabinClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CabinClassScalarFieldEnum | CabinClassScalarFieldEnum[]
  }

  /**
   * Aircraft without action
   */
  export type AircraftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aircraft
     */
    select?: AircraftSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Aircraft
     */
    omit?: AircraftOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AircraftInclude<ExtArgs> | null
  }


  /**
   * Model Flight
   */

  export type AggregateFlight = {
    _count: FlightCountAggregateOutputType | null
    _min: FlightMinAggregateOutputType | null
    _max: FlightMaxAggregateOutputType | null
  }

  export type FlightMinAggregateOutputType = {
    FlightNo: string | null
    Schedule: Date | null
    ArrivalAirportID: string | null
    DepartureAirportID: string | null
    AirlineName: string | null
    AircraftRegNo: string | null
  }

  export type FlightMaxAggregateOutputType = {
    FlightNo: string | null
    Schedule: Date | null
    ArrivalAirportID: string | null
    DepartureAirportID: string | null
    AirlineName: string | null
    AircraftRegNo: string | null
  }

  export type FlightCountAggregateOutputType = {
    FlightNo: number
    Schedule: number
    ArrivalAirportID: number
    DepartureAirportID: number
    AirlineName: number
    AircraftRegNo: number
    _all: number
  }


  export type FlightMinAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    ArrivalAirportID?: true
    DepartureAirportID?: true
    AirlineName?: true
    AircraftRegNo?: true
  }

  export type FlightMaxAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    ArrivalAirportID?: true
    DepartureAirportID?: true
    AirlineName?: true
    AircraftRegNo?: true
  }

  export type FlightCountAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    ArrivalAirportID?: true
    DepartureAirportID?: true
    AirlineName?: true
    AircraftRegNo?: true
    _all?: true
  }

  export type FlightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flight to aggregate.
     */
    where?: FlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flights to fetch.
     */
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Flights
    **/
    _count?: true | FlightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlightMaxAggregateInputType
  }

  export type GetFlightAggregateType<T extends FlightAggregateArgs> = {
        [P in keyof T & keyof AggregateFlight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlight[P]>
      : GetScalarType<T[P], AggregateFlight[P]>
  }




  export type FlightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlightWhereInput
    orderBy?: FlightOrderByWithAggregationInput | FlightOrderByWithAggregationInput[]
    by: FlightScalarFieldEnum[] | FlightScalarFieldEnum
    having?: FlightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlightCountAggregateInputType | true
    _min?: FlightMinAggregateInputType
    _max?: FlightMaxAggregateInputType
  }

  export type FlightGroupByOutputType = {
    FlightNo: string
    Schedule: Date
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
    _count: FlightCountAggregateOutputType | null
    _min: FlightMinAggregateOutputType | null
    _max: FlightMaxAggregateOutputType | null
  }

  type GetFlightGroupByPayload<T extends FlightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlightGroupByOutputType[P]>
            : GetScalarType<T[P], FlightGroupByOutputType[P]>
        }
      >
    >


  export type FlightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    ArrivalAirportID?: boolean
    DepartureAirportID?: boolean
    AirlineName?: boolean
    AircraftRegNo?: boolean
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
    passengers?: boolean | Flight$passengersArgs<ExtArgs>
    tickets?: boolean | Flight$ticketsArgs<ExtArgs>
    _count?: boolean | FlightCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flight"]>

  export type FlightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    ArrivalAirportID?: boolean
    DepartureAirportID?: boolean
    AirlineName?: boolean
    AircraftRegNo?: boolean
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flight"]>

  export type FlightSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    ArrivalAirportID?: boolean
    DepartureAirportID?: boolean
    AirlineName?: boolean
    AircraftRegNo?: boolean
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flight"]>

  export type FlightSelectScalar = {
    FlightNo?: boolean
    Schedule?: boolean
    ArrivalAirportID?: boolean
    DepartureAirportID?: boolean
    AirlineName?: boolean
    AircraftRegNo?: boolean
  }

  export type FlightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"FlightNo" | "Schedule" | "ArrivalAirportID" | "DepartureAirportID" | "AirlineName" | "AircraftRegNo", ExtArgs["result"]["flight"]>
  export type FlightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
    passengers?: boolean | Flight$passengersArgs<ExtArgs>
    tickets?: boolean | Flight$ticketsArgs<ExtArgs>
    _count?: boolean | FlightCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }
  export type FlightIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arrivalAirport?: boolean | AirportDefaultArgs<ExtArgs>
    departureAirport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }

  export type $FlightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Flight"
    objects: {
      arrivalAirport: Prisma.$AirportPayload<ExtArgs>
      departureAirport: Prisma.$AirportPayload<ExtArgs>
      airline: Prisma.$AirlinePayload<ExtArgs>
      aircraft: Prisma.$AircraftPayload<ExtArgs>
      passengers: Prisma.$Assigned_ToPayload<ExtArgs>[]
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      FlightNo: string
      Schedule: Date
      ArrivalAirportID: string
      DepartureAirportID: string
      AirlineName: string
      AircraftRegNo: string
    }, ExtArgs["result"]["flight"]>
    composites: {}
  }

  type FlightGetPayload<S extends boolean | null | undefined | FlightDefaultArgs> = $Result.GetResult<Prisma.$FlightPayload, S>

  type FlightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlightCountAggregateInputType | true
    }

  export interface FlightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Flight'], meta: { name: 'Flight' } }
    /**
     * Find zero or one Flight that matches the filter.
     * @param {FlightFindUniqueArgs} args - Arguments to find a Flight
     * @example
     * // Get one Flight
     * const flight = await prisma.flight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlightFindUniqueArgs>(args: SelectSubset<T, FlightFindUniqueArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Flight that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlightFindUniqueOrThrowArgs} args - Arguments to find a Flight
     * @example
     * // Get one Flight
     * const flight = await prisma.flight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlightFindUniqueOrThrowArgs>(args: SelectSubset<T, FlightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightFindFirstArgs} args - Arguments to find a Flight
     * @example
     * // Get one Flight
     * const flight = await prisma.flight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlightFindFirstArgs>(args?: SelectSubset<T, FlightFindFirstArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightFindFirstOrThrowArgs} args - Arguments to find a Flight
     * @example
     * // Get one Flight
     * const flight = await prisma.flight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlightFindFirstOrThrowArgs>(args?: SelectSubset<T, FlightFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Flights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Flights
     * const flights = await prisma.flight.findMany()
     * 
     * // Get first 10 Flights
     * const flights = await prisma.flight.findMany({ take: 10 })
     * 
     * // Only select the `FlightNo`
     * const flightWithFlightNoOnly = await prisma.flight.findMany({ select: { FlightNo: true } })
     * 
     */
    findMany<T extends FlightFindManyArgs>(args?: SelectSubset<T, FlightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Flight.
     * @param {FlightCreateArgs} args - Arguments to create a Flight.
     * @example
     * // Create one Flight
     * const Flight = await prisma.flight.create({
     *   data: {
     *     // ... data to create a Flight
     *   }
     * })
     * 
     */
    create<T extends FlightCreateArgs>(args: SelectSubset<T, FlightCreateArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Flights.
     * @param {FlightCreateManyArgs} args - Arguments to create many Flights.
     * @example
     * // Create many Flights
     * const flight = await prisma.flight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlightCreateManyArgs>(args?: SelectSubset<T, FlightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Flights and returns the data saved in the database.
     * @param {FlightCreateManyAndReturnArgs} args - Arguments to create many Flights.
     * @example
     * // Create many Flights
     * const flight = await prisma.flight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Flights and only return the `FlightNo`
     * const flightWithFlightNoOnly = await prisma.flight.createManyAndReturn({
     *   select: { FlightNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlightCreateManyAndReturnArgs>(args?: SelectSubset<T, FlightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Flight.
     * @param {FlightDeleteArgs} args - Arguments to delete one Flight.
     * @example
     * // Delete one Flight
     * const Flight = await prisma.flight.delete({
     *   where: {
     *     // ... filter to delete one Flight
     *   }
     * })
     * 
     */
    delete<T extends FlightDeleteArgs>(args: SelectSubset<T, FlightDeleteArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Flight.
     * @param {FlightUpdateArgs} args - Arguments to update one Flight.
     * @example
     * // Update one Flight
     * const flight = await prisma.flight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlightUpdateArgs>(args: SelectSubset<T, FlightUpdateArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Flights.
     * @param {FlightDeleteManyArgs} args - Arguments to filter Flights to delete.
     * @example
     * // Delete a few Flights
     * const { count } = await prisma.flight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlightDeleteManyArgs>(args?: SelectSubset<T, FlightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Flights
     * const flight = await prisma.flight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlightUpdateManyArgs>(args: SelectSubset<T, FlightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flights and returns the data updated in the database.
     * @param {FlightUpdateManyAndReturnArgs} args - Arguments to update many Flights.
     * @example
     * // Update many Flights
     * const flight = await prisma.flight.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Flights and only return the `FlightNo`
     * const flightWithFlightNoOnly = await prisma.flight.updateManyAndReturn({
     *   select: { FlightNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlightUpdateManyAndReturnArgs>(args: SelectSubset<T, FlightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Flight.
     * @param {FlightUpsertArgs} args - Arguments to update or create a Flight.
     * @example
     * // Update or create a Flight
     * const flight = await prisma.flight.upsert({
     *   create: {
     *     // ... data to create a Flight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Flight we want to update
     *   }
     * })
     */
    upsert<T extends FlightUpsertArgs>(args: SelectSubset<T, FlightUpsertArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Flights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightCountArgs} args - Arguments to filter Flights to count.
     * @example
     * // Count the number of Flights
     * const count = await prisma.flight.count({
     *   where: {
     *     // ... the filter for the Flights we want to count
     *   }
     * })
    **/
    count<T extends FlightCountArgs>(
      args?: Subset<T, FlightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Flight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlightAggregateArgs>(args: Subset<T, FlightAggregateArgs>): Prisma.PrismaPromise<GetFlightAggregateType<T>>

    /**
     * Group by Flight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlightGroupByArgs['orderBy'] }
        : { orderBy?: FlightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Flight model
   */
  readonly fields: FlightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Flight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arrivalAirport<T extends AirportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirportDefaultArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    departureAirport<T extends AirportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirportDefaultArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    aircraft<T extends AircraftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AircraftDefaultArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    passengers<T extends Flight$passengersArgs<ExtArgs> = {}>(args?: Subset<T, Flight$passengersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets<T extends Flight$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Flight$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Flight model
   */
  interface FlightFieldRefs {
    readonly FlightNo: FieldRef<"Flight", 'String'>
    readonly Schedule: FieldRef<"Flight", 'DateTime'>
    readonly ArrivalAirportID: FieldRef<"Flight", 'String'>
    readonly DepartureAirportID: FieldRef<"Flight", 'String'>
    readonly AirlineName: FieldRef<"Flight", 'String'>
    readonly AircraftRegNo: FieldRef<"Flight", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Flight findUnique
   */
  export type FlightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter, which Flight to fetch.
     */
    where: FlightWhereUniqueInput
  }

  /**
   * Flight findUniqueOrThrow
   */
  export type FlightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter, which Flight to fetch.
     */
    where: FlightWhereUniqueInput
  }

  /**
   * Flight findFirst
   */
  export type FlightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter, which Flight to fetch.
     */
    where?: FlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flights to fetch.
     */
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flights.
     */
    cursor?: FlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flights.
     */
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Flight findFirstOrThrow
   */
  export type FlightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter, which Flight to fetch.
     */
    where?: FlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flights to fetch.
     */
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flights.
     */
    cursor?: FlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flights.
     */
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Flight findMany
   */
  export type FlightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter, which Flights to fetch.
     */
    where?: FlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flights to fetch.
     */
    orderBy?: FlightOrderByWithRelationInput | FlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Flights.
     */
    cursor?: FlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flights.
     */
    skip?: number
    distinct?: FlightScalarFieldEnum | FlightScalarFieldEnum[]
  }

  /**
   * Flight create
   */
  export type FlightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * The data needed to create a Flight.
     */
    data: XOR<FlightCreateInput, FlightUncheckedCreateInput>
  }

  /**
   * Flight createMany
   */
  export type FlightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Flights.
     */
    data: FlightCreateManyInput | FlightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Flight createManyAndReturn
   */
  export type FlightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * The data used to create many Flights.
     */
    data: FlightCreateManyInput | FlightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flight update
   */
  export type FlightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * The data needed to update a Flight.
     */
    data: XOR<FlightUpdateInput, FlightUncheckedUpdateInput>
    /**
     * Choose, which Flight to update.
     */
    where: FlightWhereUniqueInput
  }

  /**
   * Flight updateMany
   */
  export type FlightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Flights.
     */
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyInput>
    /**
     * Filter which Flights to update
     */
    where?: FlightWhereInput
    /**
     * Limit how many Flights to update.
     */
    limit?: number
  }

  /**
   * Flight updateManyAndReturn
   */
  export type FlightUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * The data used to update Flights.
     */
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyInput>
    /**
     * Filter which Flights to update
     */
    where?: FlightWhereInput
    /**
     * Limit how many Flights to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flight upsert
   */
  export type FlightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * The filter to search for the Flight to update in case it exists.
     */
    where: FlightWhereUniqueInput
    /**
     * In case the Flight found by the `where` argument doesn't exist, create a new Flight with this data.
     */
    create: XOR<FlightCreateInput, FlightUncheckedCreateInput>
    /**
     * In case the Flight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlightUpdateInput, FlightUncheckedUpdateInput>
  }

  /**
   * Flight delete
   */
  export type FlightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
    /**
     * Filter which Flight to delete.
     */
    where: FlightWhereUniqueInput
  }

  /**
   * Flight deleteMany
   */
  export type FlightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flights to delete
     */
    where?: FlightWhereInput
    /**
     * Limit how many Flights to delete.
     */
    limit?: number
  }

  /**
   * Flight.passengers
   */
  export type Flight$passengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    where?: Assigned_ToWhereInput
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    cursor?: Assigned_ToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Assigned_ToScalarFieldEnum | Assigned_ToScalarFieldEnum[]
  }

  /**
   * Flight.tickets
   */
  export type Flight$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Flight without action
   */
  export type FlightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flight
     */
    select?: FlightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flight
     */
    omit?: FlightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlightInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    Price: number | null
    BaggageChecked: number | null
    BaggageCabin: number | null
  }

  export type TicketSumAggregateOutputType = {
    Price: number | null
    BaggageChecked: number | null
    BaggageCabin: number | null
  }

  export type TicketMinAggregateOutputType = {
    TicketID: string | null
    Price: number | null
    TicketStatus: string | null
    PassengerName: string | null
    PassengerLastName: string | null
    Gender: string | null
    DateOfBirth: Date | null
    Nationality: string | null
    BaggageChecked: number | null
    BaggageCabin: number | null
    SeatNo: string | null
    AircraftRegNo: string | null
    FlightNo: string | null
    Schedule: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    TicketID: string | null
    Price: number | null
    TicketStatus: string | null
    PassengerName: string | null
    PassengerLastName: string | null
    Gender: string | null
    DateOfBirth: Date | null
    Nationality: string | null
    BaggageChecked: number | null
    BaggageCabin: number | null
    SeatNo: string | null
    AircraftRegNo: string | null
    FlightNo: string | null
    Schedule: Date | null
  }

  export type TicketCountAggregateOutputType = {
    TicketID: number
    Price: number
    TicketStatus: number
    PassengerName: number
    PassengerLastName: number
    Gender: number
    DateOfBirth: number
    Nationality: number
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: number
    AircraftRegNo: number
    FlightNo: number
    Schedule: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    Price?: true
    BaggageChecked?: true
    BaggageCabin?: true
  }

  export type TicketSumAggregateInputType = {
    Price?: true
    BaggageChecked?: true
    BaggageCabin?: true
  }

  export type TicketMinAggregateInputType = {
    TicketID?: true
    Price?: true
    TicketStatus?: true
    PassengerName?: true
    PassengerLastName?: true
    Gender?: true
    DateOfBirth?: true
    Nationality?: true
    BaggageChecked?: true
    BaggageCabin?: true
    SeatNo?: true
    AircraftRegNo?: true
    FlightNo?: true
    Schedule?: true
  }

  export type TicketMaxAggregateInputType = {
    TicketID?: true
    Price?: true
    TicketStatus?: true
    PassengerName?: true
    PassengerLastName?: true
    Gender?: true
    DateOfBirth?: true
    Nationality?: true
    BaggageChecked?: true
    BaggageCabin?: true
    SeatNo?: true
    AircraftRegNo?: true
    FlightNo?: true
    Schedule?: true
  }

  export type TicketCountAggregateInputType = {
    TicketID?: true
    Price?: true
    TicketStatus?: true
    PassengerName?: true
    PassengerLastName?: true
    Gender?: true
    DateOfBirth?: true
    Nationality?: true
    BaggageChecked?: true
    BaggageCabin?: true
    SeatNo?: true
    AircraftRegNo?: true
    FlightNo?: true
    Schedule?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    Price?: boolean
    TicketStatus?: boolean
    PassengerName?: boolean
    PassengerLastName?: boolean
    Gender?: boolean
    DateOfBirth?: boolean
    Nationality?: boolean
    BaggageChecked?: boolean
    BaggageCabin?: boolean
    SeatNo?: boolean
    AircraftRegNo?: boolean
    FlightNo?: boolean
    Schedule?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
    purchase?: boolean | Ticket$purchaseArgs<ExtArgs>
    domesticTicket?: boolean | Ticket$domesticTicketArgs<ExtArgs>
    internationalTicket?: boolean | Ticket$internationalTicketArgs<ExtArgs>
    roundTripTicketPart1?: boolean | Ticket$roundTripTicketPart1Args<ExtArgs>
    roundTripTicketPart2?: boolean | Ticket$roundTripTicketPart2Args<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    Price?: boolean
    TicketStatus?: boolean
    PassengerName?: boolean
    PassengerLastName?: boolean
    Gender?: boolean
    DateOfBirth?: boolean
    Nationality?: boolean
    BaggageChecked?: boolean
    BaggageCabin?: boolean
    SeatNo?: boolean
    AircraftRegNo?: boolean
    FlightNo?: boolean
    Schedule?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    Price?: boolean
    TicketStatus?: boolean
    PassengerName?: boolean
    PassengerLastName?: boolean
    Gender?: boolean
    DateOfBirth?: boolean
    Nationality?: boolean
    BaggageChecked?: boolean
    BaggageCabin?: boolean
    SeatNo?: boolean
    AircraftRegNo?: boolean
    FlightNo?: boolean
    Schedule?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectScalar = {
    TicketID?: boolean
    Price?: boolean
    TicketStatus?: boolean
    PassengerName?: boolean
    PassengerLastName?: boolean
    Gender?: boolean
    DateOfBirth?: boolean
    Nationality?: boolean
    BaggageChecked?: boolean
    BaggageCabin?: boolean
    SeatNo?: boolean
    AircraftRegNo?: boolean
    FlightNo?: boolean
    Schedule?: boolean
  }

  export type TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TicketID" | "Price" | "TicketStatus" | "PassengerName" | "PassengerLastName" | "Gender" | "DateOfBirth" | "Nationality" | "BaggageChecked" | "BaggageCabin" | "SeatNo" | "AircraftRegNo" | "FlightNo" | "Schedule", ExtArgs["result"]["ticket"]>
  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
    purchase?: boolean | Ticket$purchaseArgs<ExtArgs>
    domesticTicket?: boolean | Ticket$domesticTicketArgs<ExtArgs>
    internationalTicket?: boolean | Ticket$internationalTicketArgs<ExtArgs>
    roundTripTicketPart1?: boolean | Ticket$roundTripTicketPart1Args<ExtArgs>
    roundTripTicketPart2?: boolean | Ticket$roundTripTicketPart2Args<ExtArgs>
  }
  export type TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
  }
  export type TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    seat?: boolean | SeatDefaultArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      flight: Prisma.$FlightPayload<ExtArgs>
      seat: Prisma.$SeatPayload<ExtArgs>
      purchase: Prisma.$PurchasePayload<ExtArgs> | null
      domesticTicket: Prisma.$Domestic_TicketPayload<ExtArgs> | null
      internationalTicket: Prisma.$International_TicketPayload<ExtArgs> | null
      roundTripTicketPart1: Prisma.$Round_Trip_TicketPayload<ExtArgs> | null
      roundTripTicketPart2: Prisma.$Round_Trip_TicketPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      TicketID: string
      Price: number
      TicketStatus: string
      PassengerName: string
      PassengerLastName: string
      Gender: string
      DateOfBirth: Date
      Nationality: string
      BaggageChecked: number
      BaggageCabin: number
      SeatNo: string
      AircraftRegNo: string
      FlightNo: string
      Schedule: Date
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `TicketID`
     * const ticketWithTicketIDOnly = await prisma.ticket.findMany({ select: { TicketID: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `TicketID`
     * const ticketWithTicketIDOnly = await prisma.ticket.createManyAndReturn({
     *   select: { TicketID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {TicketUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `TicketID`
     * const ticketWithTicketIDOnly = await prisma.ticket.updateManyAndReturn({
     *   select: { TicketID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flight<T extends FlightDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlightDefaultArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seat<T extends SeatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeatDefaultArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    purchase<T extends Ticket$purchaseArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$purchaseArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    domesticTicket<T extends Ticket$domesticTicketArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$domesticTicketArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    internationalTicket<T extends Ticket$internationalTicketArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$internationalTicketArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    roundTripTicketPart1<T extends Ticket$roundTripTicketPart1Args<ExtArgs> = {}>(args?: Subset<T, Ticket$roundTripTicketPart1Args<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    roundTripTicketPart2<T extends Ticket$roundTripTicketPart2Args<ExtArgs> = {}>(args?: Subset<T, Ticket$roundTripTicketPart2Args<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */
  interface TicketFieldRefs {
    readonly TicketID: FieldRef<"Ticket", 'String'>
    readonly Price: FieldRef<"Ticket", 'Float'>
    readonly TicketStatus: FieldRef<"Ticket", 'String'>
    readonly PassengerName: FieldRef<"Ticket", 'String'>
    readonly PassengerLastName: FieldRef<"Ticket", 'String'>
    readonly Gender: FieldRef<"Ticket", 'String'>
    readonly DateOfBirth: FieldRef<"Ticket", 'DateTime'>
    readonly Nationality: FieldRef<"Ticket", 'String'>
    readonly BaggageChecked: FieldRef<"Ticket", 'Float'>
    readonly BaggageCabin: FieldRef<"Ticket", 'Float'>
    readonly SeatNo: FieldRef<"Ticket", 'String'>
    readonly AircraftRegNo: FieldRef<"Ticket", 'String'>
    readonly FlightNo: FieldRef<"Ticket", 'String'>
    readonly Schedule: FieldRef<"Ticket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket createManyAndReturn
   */
  export type TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
  }

  /**
   * Ticket updateManyAndReturn
   */
  export type TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to delete.
     */
    limit?: number
  }

  /**
   * Ticket.purchase
   */
  export type Ticket$purchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
  }

  /**
   * Ticket.domesticTicket
   */
  export type Ticket$domesticTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    where?: Domestic_TicketWhereInput
  }

  /**
   * Ticket.internationalTicket
   */
  export type Ticket$internationalTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    where?: International_TicketWhereInput
  }

  /**
   * Ticket.roundTripTicketPart1
   */
  export type Ticket$roundTripTicketPart1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    where?: Round_Trip_TicketWhereInput
  }

  /**
   * Ticket.roundTripTicketPart2
   */
  export type Ticket$roundTripTicketPart2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    where?: Round_Trip_TicketWhereInput
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model Operate
   */

  export type AggregateOperate = {
    _count: OperateCountAggregateOutputType | null
    _min: OperateMinAggregateOutputType | null
    _max: OperateMaxAggregateOutputType | null
  }

  export type OperateMinAggregateOutputType = {
    AirportID: string | null
    AirlineName: string | null
  }

  export type OperateMaxAggregateOutputType = {
    AirportID: string | null
    AirlineName: string | null
  }

  export type OperateCountAggregateOutputType = {
    AirportID: number
    AirlineName: number
    _all: number
  }


  export type OperateMinAggregateInputType = {
    AirportID?: true
    AirlineName?: true
  }

  export type OperateMaxAggregateInputType = {
    AirportID?: true
    AirlineName?: true
  }

  export type OperateCountAggregateInputType = {
    AirportID?: true
    AirlineName?: true
    _all?: true
  }

  export type OperateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operate to aggregate.
     */
    where?: OperateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operates to fetch.
     */
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operates
    **/
    _count?: true | OperateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperateMaxAggregateInputType
  }

  export type GetOperateAggregateType<T extends OperateAggregateArgs> = {
        [P in keyof T & keyof AggregateOperate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperate[P]>
      : GetScalarType<T[P], AggregateOperate[P]>
  }




  export type OperateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperateWhereInput
    orderBy?: OperateOrderByWithAggregationInput | OperateOrderByWithAggregationInput[]
    by: OperateScalarFieldEnum[] | OperateScalarFieldEnum
    having?: OperateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperateCountAggregateInputType | true
    _min?: OperateMinAggregateInputType
    _max?: OperateMaxAggregateInputType
  }

  export type OperateGroupByOutputType = {
    AirportID: string
    AirlineName: string
    _count: OperateCountAggregateOutputType | null
    _min: OperateMinAggregateOutputType | null
    _max: OperateMaxAggregateOutputType | null
  }

  type GetOperateGroupByPayload<T extends OperateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperateGroupByOutputType[P]>
            : GetScalarType<T[P], OperateGroupByOutputType[P]>
        }
      >
    >


  export type OperateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirlineName?: boolean
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operate"]>

  export type OperateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirlineName?: boolean
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operate"]>

  export type OperateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirportID?: boolean
    AirlineName?: boolean
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operate"]>

  export type OperateSelectScalar = {
    AirportID?: boolean
    AirlineName?: boolean
  }

  export type OperateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AirportID" | "AirlineName", ExtArgs["result"]["operate"]>
  export type OperateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type OperateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type OperateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airport?: boolean | AirportDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }

  export type $OperatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operate"
    objects: {
      airport: Prisma.$AirportPayload<ExtArgs>
      airline: Prisma.$AirlinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AirportID: string
      AirlineName: string
    }, ExtArgs["result"]["operate"]>
    composites: {}
  }

  type OperateGetPayload<S extends boolean | null | undefined | OperateDefaultArgs> = $Result.GetResult<Prisma.$OperatePayload, S>

  type OperateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperateCountAggregateInputType | true
    }

  export interface OperateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operate'], meta: { name: 'Operate' } }
    /**
     * Find zero or one Operate that matches the filter.
     * @param {OperateFindUniqueArgs} args - Arguments to find a Operate
     * @example
     * // Get one Operate
     * const operate = await prisma.operate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperateFindUniqueArgs>(args: SelectSubset<T, OperateFindUniqueArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperateFindUniqueOrThrowArgs} args - Arguments to find a Operate
     * @example
     * // Get one Operate
     * const operate = await prisma.operate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperateFindUniqueOrThrowArgs>(args: SelectSubset<T, OperateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateFindFirstArgs} args - Arguments to find a Operate
     * @example
     * // Get one Operate
     * const operate = await prisma.operate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperateFindFirstArgs>(args?: SelectSubset<T, OperateFindFirstArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateFindFirstOrThrowArgs} args - Arguments to find a Operate
     * @example
     * // Get one Operate
     * const operate = await prisma.operate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperateFindFirstOrThrowArgs>(args?: SelectSubset<T, OperateFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operates
     * const operates = await prisma.operate.findMany()
     * 
     * // Get first 10 Operates
     * const operates = await prisma.operate.findMany({ take: 10 })
     * 
     * // Only select the `AirportID`
     * const operateWithAirportIDOnly = await prisma.operate.findMany({ select: { AirportID: true } })
     * 
     */
    findMany<T extends OperateFindManyArgs>(args?: SelectSubset<T, OperateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operate.
     * @param {OperateCreateArgs} args - Arguments to create a Operate.
     * @example
     * // Create one Operate
     * const Operate = await prisma.operate.create({
     *   data: {
     *     // ... data to create a Operate
     *   }
     * })
     * 
     */
    create<T extends OperateCreateArgs>(args: SelectSubset<T, OperateCreateArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operates.
     * @param {OperateCreateManyArgs} args - Arguments to create many Operates.
     * @example
     * // Create many Operates
     * const operate = await prisma.operate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperateCreateManyArgs>(args?: SelectSubset<T, OperateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operates and returns the data saved in the database.
     * @param {OperateCreateManyAndReturnArgs} args - Arguments to create many Operates.
     * @example
     * // Create many Operates
     * const operate = await prisma.operate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operates and only return the `AirportID`
     * const operateWithAirportIDOnly = await prisma.operate.createManyAndReturn({
     *   select: { AirportID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperateCreateManyAndReturnArgs>(args?: SelectSubset<T, OperateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Operate.
     * @param {OperateDeleteArgs} args - Arguments to delete one Operate.
     * @example
     * // Delete one Operate
     * const Operate = await prisma.operate.delete({
     *   where: {
     *     // ... filter to delete one Operate
     *   }
     * })
     * 
     */
    delete<T extends OperateDeleteArgs>(args: SelectSubset<T, OperateDeleteArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operate.
     * @param {OperateUpdateArgs} args - Arguments to update one Operate.
     * @example
     * // Update one Operate
     * const operate = await prisma.operate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperateUpdateArgs>(args: SelectSubset<T, OperateUpdateArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operates.
     * @param {OperateDeleteManyArgs} args - Arguments to filter Operates to delete.
     * @example
     * // Delete a few Operates
     * const { count } = await prisma.operate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperateDeleteManyArgs>(args?: SelectSubset<T, OperateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operates
     * const operate = await prisma.operate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperateUpdateManyArgs>(args: SelectSubset<T, OperateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operates and returns the data updated in the database.
     * @param {OperateUpdateManyAndReturnArgs} args - Arguments to update many Operates.
     * @example
     * // Update many Operates
     * const operate = await prisma.operate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Operates and only return the `AirportID`
     * const operateWithAirportIDOnly = await prisma.operate.updateManyAndReturn({
     *   select: { AirportID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperateUpdateManyAndReturnArgs>(args: SelectSubset<T, OperateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Operate.
     * @param {OperateUpsertArgs} args - Arguments to update or create a Operate.
     * @example
     * // Update or create a Operate
     * const operate = await prisma.operate.upsert({
     *   create: {
     *     // ... data to create a Operate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operate we want to update
     *   }
     * })
     */
    upsert<T extends OperateUpsertArgs>(args: SelectSubset<T, OperateUpsertArgs<ExtArgs>>): Prisma__OperateClient<$Result.GetResult<Prisma.$OperatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateCountArgs} args - Arguments to filter Operates to count.
     * @example
     * // Count the number of Operates
     * const count = await prisma.operate.count({
     *   where: {
     *     // ... the filter for the Operates we want to count
     *   }
     * })
    **/
    count<T extends OperateCountArgs>(
      args?: Subset<T, OperateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperateAggregateArgs>(args: Subset<T, OperateAggregateArgs>): Prisma.PrismaPromise<GetOperateAggregateType<T>>

    /**
     * Group by Operate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperateGroupByArgs['orderBy'] }
        : { orderBy?: OperateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operate model
   */
  readonly fields: OperateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    airport<T extends AirportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirportDefaultArgs<ExtArgs>>): Prisma__AirportClient<$Result.GetResult<Prisma.$AirportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operate model
   */
  interface OperateFieldRefs {
    readonly AirportID: FieldRef<"Operate", 'String'>
    readonly AirlineName: FieldRef<"Operate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Operate findUnique
   */
  export type OperateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter, which Operate to fetch.
     */
    where: OperateWhereUniqueInput
  }

  /**
   * Operate findUniqueOrThrow
   */
  export type OperateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter, which Operate to fetch.
     */
    where: OperateWhereUniqueInput
  }

  /**
   * Operate findFirst
   */
  export type OperateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter, which Operate to fetch.
     */
    where?: OperateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operates to fetch.
     */
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operates.
     */
    cursor?: OperateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operates.
     */
    distinct?: OperateScalarFieldEnum | OperateScalarFieldEnum[]
  }

  /**
   * Operate findFirstOrThrow
   */
  export type OperateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter, which Operate to fetch.
     */
    where?: OperateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operates to fetch.
     */
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operates.
     */
    cursor?: OperateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operates.
     */
    distinct?: OperateScalarFieldEnum | OperateScalarFieldEnum[]
  }

  /**
   * Operate findMany
   */
  export type OperateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter, which Operates to fetch.
     */
    where?: OperateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operates to fetch.
     */
    orderBy?: OperateOrderByWithRelationInput | OperateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operates.
     */
    cursor?: OperateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operates.
     */
    skip?: number
    distinct?: OperateScalarFieldEnum | OperateScalarFieldEnum[]
  }

  /**
   * Operate create
   */
  export type OperateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * The data needed to create a Operate.
     */
    data: XOR<OperateCreateInput, OperateUncheckedCreateInput>
  }

  /**
   * Operate createMany
   */
  export type OperateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operates.
     */
    data: OperateCreateManyInput | OperateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operate createManyAndReturn
   */
  export type OperateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * The data used to create many Operates.
     */
    data: OperateCreateManyInput | OperateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operate update
   */
  export type OperateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * The data needed to update a Operate.
     */
    data: XOR<OperateUpdateInput, OperateUncheckedUpdateInput>
    /**
     * Choose, which Operate to update.
     */
    where: OperateWhereUniqueInput
  }

  /**
   * Operate updateMany
   */
  export type OperateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operates.
     */
    data: XOR<OperateUpdateManyMutationInput, OperateUncheckedUpdateManyInput>
    /**
     * Filter which Operates to update
     */
    where?: OperateWhereInput
    /**
     * Limit how many Operates to update.
     */
    limit?: number
  }

  /**
   * Operate updateManyAndReturn
   */
  export type OperateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * The data used to update Operates.
     */
    data: XOR<OperateUpdateManyMutationInput, OperateUncheckedUpdateManyInput>
    /**
     * Filter which Operates to update
     */
    where?: OperateWhereInput
    /**
     * Limit how many Operates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operate upsert
   */
  export type OperateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * The filter to search for the Operate to update in case it exists.
     */
    where: OperateWhereUniqueInput
    /**
     * In case the Operate found by the `where` argument doesn't exist, create a new Operate with this data.
     */
    create: XOR<OperateCreateInput, OperateUncheckedCreateInput>
    /**
     * In case the Operate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperateUpdateInput, OperateUncheckedUpdateInput>
  }

  /**
   * Operate delete
   */
  export type OperateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
    /**
     * Filter which Operate to delete.
     */
    where: OperateWhereUniqueInput
  }

  /**
   * Operate deleteMany
   */
  export type OperateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operates to delete
     */
    where?: OperateWhereInput
    /**
     * Limit how many Operates to delete.
     */
    limit?: number
  }

  /**
   * Operate without action
   */
  export type OperateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operate
     */
    select?: OperateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operate
     */
    omit?: OperateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperateInclude<ExtArgs> | null
  }


  /**
   * Model Assigned_To
   */

  export type AggregateAssigned_To = {
    _count: Assigned_ToCountAggregateOutputType | null
    _min: Assigned_ToMinAggregateOutputType | null
    _max: Assigned_ToMaxAggregateOutputType | null
  }

  export type Assigned_ToMinAggregateOutputType = {
    FlightNo: string | null
    Schedule: Date | null
    UserAccountID: string | null
  }

  export type Assigned_ToMaxAggregateOutputType = {
    FlightNo: string | null
    Schedule: Date | null
    UserAccountID: string | null
  }

  export type Assigned_ToCountAggregateOutputType = {
    FlightNo: number
    Schedule: number
    UserAccountID: number
    _all: number
  }


  export type Assigned_ToMinAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    UserAccountID?: true
  }

  export type Assigned_ToMaxAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    UserAccountID?: true
  }

  export type Assigned_ToCountAggregateInputType = {
    FlightNo?: true
    Schedule?: true
    UserAccountID?: true
    _all?: true
  }

  export type Assigned_ToAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assigned_To to aggregate.
     */
    where?: Assigned_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assigned_Tos to fetch.
     */
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Assigned_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assigned_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assigned_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assigned_Tos
    **/
    _count?: true | Assigned_ToCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Assigned_ToMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Assigned_ToMaxAggregateInputType
  }

  export type GetAssigned_ToAggregateType<T extends Assigned_ToAggregateArgs> = {
        [P in keyof T & keyof AggregateAssigned_To]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssigned_To[P]>
      : GetScalarType<T[P], AggregateAssigned_To[P]>
  }




  export type Assigned_ToGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Assigned_ToWhereInput
    orderBy?: Assigned_ToOrderByWithAggregationInput | Assigned_ToOrderByWithAggregationInput[]
    by: Assigned_ToScalarFieldEnum[] | Assigned_ToScalarFieldEnum
    having?: Assigned_ToScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Assigned_ToCountAggregateInputType | true
    _min?: Assigned_ToMinAggregateInputType
    _max?: Assigned_ToMaxAggregateInputType
  }

  export type Assigned_ToGroupByOutputType = {
    FlightNo: string
    Schedule: Date
    UserAccountID: string
    _count: Assigned_ToCountAggregateOutputType | null
    _min: Assigned_ToMinAggregateOutputType | null
    _max: Assigned_ToMaxAggregateOutputType | null
  }

  type GetAssigned_ToGroupByPayload<T extends Assigned_ToGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Assigned_ToGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Assigned_ToGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Assigned_ToGroupByOutputType[P]>
            : GetScalarType<T[P], Assigned_ToGroupByOutputType[P]>
        }
      >
    >


  export type Assigned_ToSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    UserAccountID?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assigned_To"]>

  export type Assigned_ToSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    UserAccountID?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assigned_To"]>

  export type Assigned_ToSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FlightNo?: boolean
    Schedule?: boolean
    UserAccountID?: boolean
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assigned_To"]>

  export type Assigned_ToSelectScalar = {
    FlightNo?: boolean
    Schedule?: boolean
    UserAccountID?: boolean
  }

  export type Assigned_ToOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"FlightNo" | "Schedule" | "UserAccountID", ExtArgs["result"]["assigned_To"]>
  export type Assigned_ToInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type Assigned_ToIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type Assigned_ToIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flight?: boolean | FlightDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $Assigned_ToPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assigned_To"
    objects: {
      flight: Prisma.$FlightPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      FlightNo: string
      Schedule: Date
      UserAccountID: string
    }, ExtArgs["result"]["assigned_To"]>
    composites: {}
  }

  type Assigned_ToGetPayload<S extends boolean | null | undefined | Assigned_ToDefaultArgs> = $Result.GetResult<Prisma.$Assigned_ToPayload, S>

  type Assigned_ToCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Assigned_ToFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Assigned_ToCountAggregateInputType | true
    }

  export interface Assigned_ToDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assigned_To'], meta: { name: 'Assigned_To' } }
    /**
     * Find zero or one Assigned_To that matches the filter.
     * @param {Assigned_ToFindUniqueArgs} args - Arguments to find a Assigned_To
     * @example
     * // Get one Assigned_To
     * const assigned_To = await prisma.assigned_To.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Assigned_ToFindUniqueArgs>(args: SelectSubset<T, Assigned_ToFindUniqueArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assigned_To that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Assigned_ToFindUniqueOrThrowArgs} args - Arguments to find a Assigned_To
     * @example
     * // Get one Assigned_To
     * const assigned_To = await prisma.assigned_To.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Assigned_ToFindUniqueOrThrowArgs>(args: SelectSubset<T, Assigned_ToFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assigned_To that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToFindFirstArgs} args - Arguments to find a Assigned_To
     * @example
     * // Get one Assigned_To
     * const assigned_To = await prisma.assigned_To.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Assigned_ToFindFirstArgs>(args?: SelectSubset<T, Assigned_ToFindFirstArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assigned_To that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToFindFirstOrThrowArgs} args - Arguments to find a Assigned_To
     * @example
     * // Get one Assigned_To
     * const assigned_To = await prisma.assigned_To.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Assigned_ToFindFirstOrThrowArgs>(args?: SelectSubset<T, Assigned_ToFindFirstOrThrowArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assigned_Tos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assigned_Tos
     * const assigned_Tos = await prisma.assigned_To.findMany()
     * 
     * // Get first 10 Assigned_Tos
     * const assigned_Tos = await prisma.assigned_To.findMany({ take: 10 })
     * 
     * // Only select the `FlightNo`
     * const assigned_ToWithFlightNoOnly = await prisma.assigned_To.findMany({ select: { FlightNo: true } })
     * 
     */
    findMany<T extends Assigned_ToFindManyArgs>(args?: SelectSubset<T, Assigned_ToFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assigned_To.
     * @param {Assigned_ToCreateArgs} args - Arguments to create a Assigned_To.
     * @example
     * // Create one Assigned_To
     * const Assigned_To = await prisma.assigned_To.create({
     *   data: {
     *     // ... data to create a Assigned_To
     *   }
     * })
     * 
     */
    create<T extends Assigned_ToCreateArgs>(args: SelectSubset<T, Assigned_ToCreateArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assigned_Tos.
     * @param {Assigned_ToCreateManyArgs} args - Arguments to create many Assigned_Tos.
     * @example
     * // Create many Assigned_Tos
     * const assigned_To = await prisma.assigned_To.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Assigned_ToCreateManyArgs>(args?: SelectSubset<T, Assigned_ToCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assigned_Tos and returns the data saved in the database.
     * @param {Assigned_ToCreateManyAndReturnArgs} args - Arguments to create many Assigned_Tos.
     * @example
     * // Create many Assigned_Tos
     * const assigned_To = await prisma.assigned_To.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assigned_Tos and only return the `FlightNo`
     * const assigned_ToWithFlightNoOnly = await prisma.assigned_To.createManyAndReturn({
     *   select: { FlightNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Assigned_ToCreateManyAndReturnArgs>(args?: SelectSubset<T, Assigned_ToCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assigned_To.
     * @param {Assigned_ToDeleteArgs} args - Arguments to delete one Assigned_To.
     * @example
     * // Delete one Assigned_To
     * const Assigned_To = await prisma.assigned_To.delete({
     *   where: {
     *     // ... filter to delete one Assigned_To
     *   }
     * })
     * 
     */
    delete<T extends Assigned_ToDeleteArgs>(args: SelectSubset<T, Assigned_ToDeleteArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assigned_To.
     * @param {Assigned_ToUpdateArgs} args - Arguments to update one Assigned_To.
     * @example
     * // Update one Assigned_To
     * const assigned_To = await prisma.assigned_To.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Assigned_ToUpdateArgs>(args: SelectSubset<T, Assigned_ToUpdateArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assigned_Tos.
     * @param {Assigned_ToDeleteManyArgs} args - Arguments to filter Assigned_Tos to delete.
     * @example
     * // Delete a few Assigned_Tos
     * const { count } = await prisma.assigned_To.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Assigned_ToDeleteManyArgs>(args?: SelectSubset<T, Assigned_ToDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assigned_Tos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assigned_Tos
     * const assigned_To = await prisma.assigned_To.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Assigned_ToUpdateManyArgs>(args: SelectSubset<T, Assigned_ToUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assigned_Tos and returns the data updated in the database.
     * @param {Assigned_ToUpdateManyAndReturnArgs} args - Arguments to update many Assigned_Tos.
     * @example
     * // Update many Assigned_Tos
     * const assigned_To = await prisma.assigned_To.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assigned_Tos and only return the `FlightNo`
     * const assigned_ToWithFlightNoOnly = await prisma.assigned_To.updateManyAndReturn({
     *   select: { FlightNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Assigned_ToUpdateManyAndReturnArgs>(args: SelectSubset<T, Assigned_ToUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assigned_To.
     * @param {Assigned_ToUpsertArgs} args - Arguments to update or create a Assigned_To.
     * @example
     * // Update or create a Assigned_To
     * const assigned_To = await prisma.assigned_To.upsert({
     *   create: {
     *     // ... data to create a Assigned_To
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assigned_To we want to update
     *   }
     * })
     */
    upsert<T extends Assigned_ToUpsertArgs>(args: SelectSubset<T, Assigned_ToUpsertArgs<ExtArgs>>): Prisma__Assigned_ToClient<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assigned_Tos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToCountArgs} args - Arguments to filter Assigned_Tos to count.
     * @example
     * // Count the number of Assigned_Tos
     * const count = await prisma.assigned_To.count({
     *   where: {
     *     // ... the filter for the Assigned_Tos we want to count
     *   }
     * })
    **/
    count<T extends Assigned_ToCountArgs>(
      args?: Subset<T, Assigned_ToCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Assigned_ToCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assigned_To.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Assigned_ToAggregateArgs>(args: Subset<T, Assigned_ToAggregateArgs>): Prisma.PrismaPromise<GetAssigned_ToAggregateType<T>>

    /**
     * Group by Assigned_To.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Assigned_ToGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Assigned_ToGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Assigned_ToGroupByArgs['orderBy'] }
        : { orderBy?: Assigned_ToGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Assigned_ToGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssigned_ToGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assigned_To model
   */
  readonly fields: Assigned_ToFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assigned_To.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Assigned_ToClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flight<T extends FlightDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlightDefaultArgs<ExtArgs>>): Prisma__FlightClient<$Result.GetResult<Prisma.$FlightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assigned_To model
   */
  interface Assigned_ToFieldRefs {
    readonly FlightNo: FieldRef<"Assigned_To", 'String'>
    readonly Schedule: FieldRef<"Assigned_To", 'DateTime'>
    readonly UserAccountID: FieldRef<"Assigned_To", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Assigned_To findUnique
   */
  export type Assigned_ToFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter, which Assigned_To to fetch.
     */
    where: Assigned_ToWhereUniqueInput
  }

  /**
   * Assigned_To findUniqueOrThrow
   */
  export type Assigned_ToFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter, which Assigned_To to fetch.
     */
    where: Assigned_ToWhereUniqueInput
  }

  /**
   * Assigned_To findFirst
   */
  export type Assigned_ToFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter, which Assigned_To to fetch.
     */
    where?: Assigned_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assigned_Tos to fetch.
     */
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assigned_Tos.
     */
    cursor?: Assigned_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assigned_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assigned_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assigned_Tos.
     */
    distinct?: Assigned_ToScalarFieldEnum | Assigned_ToScalarFieldEnum[]
  }

  /**
   * Assigned_To findFirstOrThrow
   */
  export type Assigned_ToFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter, which Assigned_To to fetch.
     */
    where?: Assigned_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assigned_Tos to fetch.
     */
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assigned_Tos.
     */
    cursor?: Assigned_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assigned_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assigned_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assigned_Tos.
     */
    distinct?: Assigned_ToScalarFieldEnum | Assigned_ToScalarFieldEnum[]
  }

  /**
   * Assigned_To findMany
   */
  export type Assigned_ToFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter, which Assigned_Tos to fetch.
     */
    where?: Assigned_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assigned_Tos to fetch.
     */
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assigned_Tos.
     */
    cursor?: Assigned_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assigned_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assigned_Tos.
     */
    skip?: number
    distinct?: Assigned_ToScalarFieldEnum | Assigned_ToScalarFieldEnum[]
  }

  /**
   * Assigned_To create
   */
  export type Assigned_ToCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * The data needed to create a Assigned_To.
     */
    data: XOR<Assigned_ToCreateInput, Assigned_ToUncheckedCreateInput>
  }

  /**
   * Assigned_To createMany
   */
  export type Assigned_ToCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assigned_Tos.
     */
    data: Assigned_ToCreateManyInput | Assigned_ToCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assigned_To createManyAndReturn
   */
  export type Assigned_ToCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * The data used to create many Assigned_Tos.
     */
    data: Assigned_ToCreateManyInput | Assigned_ToCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assigned_To update
   */
  export type Assigned_ToUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * The data needed to update a Assigned_To.
     */
    data: XOR<Assigned_ToUpdateInput, Assigned_ToUncheckedUpdateInput>
    /**
     * Choose, which Assigned_To to update.
     */
    where: Assigned_ToWhereUniqueInput
  }

  /**
   * Assigned_To updateMany
   */
  export type Assigned_ToUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assigned_Tos.
     */
    data: XOR<Assigned_ToUpdateManyMutationInput, Assigned_ToUncheckedUpdateManyInput>
    /**
     * Filter which Assigned_Tos to update
     */
    where?: Assigned_ToWhereInput
    /**
     * Limit how many Assigned_Tos to update.
     */
    limit?: number
  }

  /**
   * Assigned_To updateManyAndReturn
   */
  export type Assigned_ToUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * The data used to update Assigned_Tos.
     */
    data: XOR<Assigned_ToUpdateManyMutationInput, Assigned_ToUncheckedUpdateManyInput>
    /**
     * Filter which Assigned_Tos to update
     */
    where?: Assigned_ToWhereInput
    /**
     * Limit how many Assigned_Tos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assigned_To upsert
   */
  export type Assigned_ToUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * The filter to search for the Assigned_To to update in case it exists.
     */
    where: Assigned_ToWhereUniqueInput
    /**
     * In case the Assigned_To found by the `where` argument doesn't exist, create a new Assigned_To with this data.
     */
    create: XOR<Assigned_ToCreateInput, Assigned_ToUncheckedCreateInput>
    /**
     * In case the Assigned_To was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Assigned_ToUpdateInput, Assigned_ToUncheckedUpdateInput>
  }

  /**
   * Assigned_To delete
   */
  export type Assigned_ToDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    /**
     * Filter which Assigned_To to delete.
     */
    where: Assigned_ToWhereUniqueInput
  }

  /**
   * Assigned_To deleteMany
   */
  export type Assigned_ToDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assigned_Tos to delete
     */
    where?: Assigned_ToWhereInput
    /**
     * Limit how many Assigned_Tos to delete.
     */
    limit?: number
  }

  /**
   * Assigned_To without action
   */
  export type Assigned_ToDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    AdminAccountID: string | null
    AirlineName: string | null
    ContactStatus: string | null
  }

  export type ContactMaxAggregateOutputType = {
    AdminAccountID: string | null
    AirlineName: string | null
    ContactStatus: string | null
  }

  export type ContactCountAggregateOutputType = {
    AdminAccountID: number
    AirlineName: number
    ContactStatus: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    AdminAccountID?: true
    AirlineName?: true
    ContactStatus?: true
  }

  export type ContactMaxAggregateInputType = {
    AdminAccountID?: true
    AirlineName?: true
    ContactStatus?: true
  }

  export type ContactCountAggregateInputType = {
    AdminAccountID?: true
    AirlineName?: true
    ContactStatus?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    AdminAccountID: string
    AirlineName: string
    ContactStatus: string
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    AirlineName?: boolean
    ContactStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    AirlineName?: boolean
    ContactStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    AirlineName?: boolean
    ContactStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    AdminAccountID?: boolean
    AirlineName?: boolean
    ContactStatus?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AdminAccountID" | "AirlineName" | "ContactStatus", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      airline: Prisma.$AirlinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AdminAccountID: string
      AirlineName: string
      ContactStatus: string
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `AdminAccountID`
     * const contactWithAdminAccountIDOnly = await prisma.contact.findMany({ select: { AdminAccountID: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `AdminAccountID`
     * const contactWithAdminAccountIDOnly = await prisma.contact.createManyAndReturn({
     *   select: { AdminAccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `AdminAccountID`
     * const contactWithAdminAccountIDOnly = await prisma.contact.updateManyAndReturn({
     *   select: { AdminAccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly AdminAccountID: FieldRef<"Contact", 'String'>
    readonly AirlineName: FieldRef<"Contact", 'String'>
    readonly ContactStatus: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model Report_To
   */

  export type AggregateReport_To = {
    _count: Report_ToCountAggregateOutputType | null
    _min: Report_ToMinAggregateOutputType | null
    _max: Report_ToMaxAggregateOutputType | null
  }

  export type Report_ToMinAggregateOutputType = {
    UserAccountID: string | null
    AdminAccountID: string | null
    ReportStatus: string | null
  }

  export type Report_ToMaxAggregateOutputType = {
    UserAccountID: string | null
    AdminAccountID: string | null
    ReportStatus: string | null
  }

  export type Report_ToCountAggregateOutputType = {
    UserAccountID: number
    AdminAccountID: number
    ReportStatus: number
    _all: number
  }


  export type Report_ToMinAggregateInputType = {
    UserAccountID?: true
    AdminAccountID?: true
    ReportStatus?: true
  }

  export type Report_ToMaxAggregateInputType = {
    UserAccountID?: true
    AdminAccountID?: true
    ReportStatus?: true
  }

  export type Report_ToCountAggregateInputType = {
    UserAccountID?: true
    AdminAccountID?: true
    ReportStatus?: true
    _all?: true
  }

  export type Report_ToAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report_To to aggregate.
     */
    where?: Report_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Report_Tos to fetch.
     */
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Report_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Report_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Report_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Report_Tos
    **/
    _count?: true | Report_ToCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Report_ToMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Report_ToMaxAggregateInputType
  }

  export type GetReport_ToAggregateType<T extends Report_ToAggregateArgs> = {
        [P in keyof T & keyof AggregateReport_To]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport_To[P]>
      : GetScalarType<T[P], AggregateReport_To[P]>
  }




  export type Report_ToGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Report_ToWhereInput
    orderBy?: Report_ToOrderByWithAggregationInput | Report_ToOrderByWithAggregationInput[]
    by: Report_ToScalarFieldEnum[] | Report_ToScalarFieldEnum
    having?: Report_ToScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Report_ToCountAggregateInputType | true
    _min?: Report_ToMinAggregateInputType
    _max?: Report_ToMaxAggregateInputType
  }

  export type Report_ToGroupByOutputType = {
    UserAccountID: string
    AdminAccountID: string
    ReportStatus: string
    _count: Report_ToCountAggregateOutputType | null
    _min: Report_ToMinAggregateOutputType | null
    _max: Report_ToMaxAggregateOutputType | null
  }

  type GetReport_ToGroupByPayload<T extends Report_ToGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Report_ToGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Report_ToGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Report_ToGroupByOutputType[P]>
            : GetScalarType<T[P], Report_ToGroupByOutputType[P]>
        }
      >
    >


  export type Report_ToSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    AdminAccountID?: boolean
    ReportStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Reports?: boolean | Report_To$ReportsArgs<ExtArgs>
    _count?: boolean | Report_ToCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report_To"]>

  export type Report_ToSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    AdminAccountID?: boolean
    ReportStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report_To"]>

  export type Report_ToSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    AdminAccountID?: boolean
    ReportStatus?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report_To"]>

  export type Report_ToSelectScalar = {
    UserAccountID?: boolean
    AdminAccountID?: boolean
    ReportStatus?: boolean
  }

  export type Report_ToOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"UserAccountID" | "AdminAccountID" | "ReportStatus", ExtArgs["result"]["report_To"]>
  export type Report_ToInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Reports?: boolean | Report_To$ReportsArgs<ExtArgs>
    _count?: boolean | Report_ToCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type Report_ToIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type Report_ToIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $Report_ToPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report_To"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      Reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserAccountID: string
      AdminAccountID: string
      ReportStatus: string
    }, ExtArgs["result"]["report_To"]>
    composites: {}
  }

  type Report_ToGetPayload<S extends boolean | null | undefined | Report_ToDefaultArgs> = $Result.GetResult<Prisma.$Report_ToPayload, S>

  type Report_ToCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Report_ToFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Report_ToCountAggregateInputType | true
    }

  export interface Report_ToDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report_To'], meta: { name: 'Report_To' } }
    /**
     * Find zero or one Report_To that matches the filter.
     * @param {Report_ToFindUniqueArgs} args - Arguments to find a Report_To
     * @example
     * // Get one Report_To
     * const report_To = await prisma.report_To.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Report_ToFindUniqueArgs>(args: SelectSubset<T, Report_ToFindUniqueArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report_To that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Report_ToFindUniqueOrThrowArgs} args - Arguments to find a Report_To
     * @example
     * // Get one Report_To
     * const report_To = await prisma.report_To.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Report_ToFindUniqueOrThrowArgs>(args: SelectSubset<T, Report_ToFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report_To that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToFindFirstArgs} args - Arguments to find a Report_To
     * @example
     * // Get one Report_To
     * const report_To = await prisma.report_To.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Report_ToFindFirstArgs>(args?: SelectSubset<T, Report_ToFindFirstArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report_To that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToFindFirstOrThrowArgs} args - Arguments to find a Report_To
     * @example
     * // Get one Report_To
     * const report_To = await prisma.report_To.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Report_ToFindFirstOrThrowArgs>(args?: SelectSubset<T, Report_ToFindFirstOrThrowArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Report_Tos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Report_Tos
     * const report_Tos = await prisma.report_To.findMany()
     * 
     * // Get first 10 Report_Tos
     * const report_Tos = await prisma.report_To.findMany({ take: 10 })
     * 
     * // Only select the `UserAccountID`
     * const report_ToWithUserAccountIDOnly = await prisma.report_To.findMany({ select: { UserAccountID: true } })
     * 
     */
    findMany<T extends Report_ToFindManyArgs>(args?: SelectSubset<T, Report_ToFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report_To.
     * @param {Report_ToCreateArgs} args - Arguments to create a Report_To.
     * @example
     * // Create one Report_To
     * const Report_To = await prisma.report_To.create({
     *   data: {
     *     // ... data to create a Report_To
     *   }
     * })
     * 
     */
    create<T extends Report_ToCreateArgs>(args: SelectSubset<T, Report_ToCreateArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Report_Tos.
     * @param {Report_ToCreateManyArgs} args - Arguments to create many Report_Tos.
     * @example
     * // Create many Report_Tos
     * const report_To = await prisma.report_To.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Report_ToCreateManyArgs>(args?: SelectSubset<T, Report_ToCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Report_Tos and returns the data saved in the database.
     * @param {Report_ToCreateManyAndReturnArgs} args - Arguments to create many Report_Tos.
     * @example
     * // Create many Report_Tos
     * const report_To = await prisma.report_To.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Report_Tos and only return the `UserAccountID`
     * const report_ToWithUserAccountIDOnly = await prisma.report_To.createManyAndReturn({
     *   select: { UserAccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Report_ToCreateManyAndReturnArgs>(args?: SelectSubset<T, Report_ToCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report_To.
     * @param {Report_ToDeleteArgs} args - Arguments to delete one Report_To.
     * @example
     * // Delete one Report_To
     * const Report_To = await prisma.report_To.delete({
     *   where: {
     *     // ... filter to delete one Report_To
     *   }
     * })
     * 
     */
    delete<T extends Report_ToDeleteArgs>(args: SelectSubset<T, Report_ToDeleteArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report_To.
     * @param {Report_ToUpdateArgs} args - Arguments to update one Report_To.
     * @example
     * // Update one Report_To
     * const report_To = await prisma.report_To.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Report_ToUpdateArgs>(args: SelectSubset<T, Report_ToUpdateArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Report_Tos.
     * @param {Report_ToDeleteManyArgs} args - Arguments to filter Report_Tos to delete.
     * @example
     * // Delete a few Report_Tos
     * const { count } = await prisma.report_To.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Report_ToDeleteManyArgs>(args?: SelectSubset<T, Report_ToDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Report_Tos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Report_Tos
     * const report_To = await prisma.report_To.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Report_ToUpdateManyArgs>(args: SelectSubset<T, Report_ToUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Report_Tos and returns the data updated in the database.
     * @param {Report_ToUpdateManyAndReturnArgs} args - Arguments to update many Report_Tos.
     * @example
     * // Update many Report_Tos
     * const report_To = await prisma.report_To.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Report_Tos and only return the `UserAccountID`
     * const report_ToWithUserAccountIDOnly = await prisma.report_To.updateManyAndReturn({
     *   select: { UserAccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Report_ToUpdateManyAndReturnArgs>(args: SelectSubset<T, Report_ToUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report_To.
     * @param {Report_ToUpsertArgs} args - Arguments to update or create a Report_To.
     * @example
     * // Update or create a Report_To
     * const report_To = await prisma.report_To.upsert({
     *   create: {
     *     // ... data to create a Report_To
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report_To we want to update
     *   }
     * })
     */
    upsert<T extends Report_ToUpsertArgs>(args: SelectSubset<T, Report_ToUpsertArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Report_Tos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToCountArgs} args - Arguments to filter Report_Tos to count.
     * @example
     * // Count the number of Report_Tos
     * const count = await prisma.report_To.count({
     *   where: {
     *     // ... the filter for the Report_Tos we want to count
     *   }
     * })
    **/
    count<T extends Report_ToCountArgs>(
      args?: Subset<T, Report_ToCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Report_ToCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report_To.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Report_ToAggregateArgs>(args: Subset<T, Report_ToAggregateArgs>): Prisma.PrismaPromise<GetReport_ToAggregateType<T>>

    /**
     * Group by Report_To.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Report_ToGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Report_ToGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Report_ToGroupByArgs['orderBy'] }
        : { orderBy?: Report_ToGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Report_ToGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReport_ToGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report_To model
   */
  readonly fields: Report_ToFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report_To.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Report_ToClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Reports<T extends Report_To$ReportsArgs<ExtArgs> = {}>(args?: Subset<T, Report_To$ReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report_To model
   */
  interface Report_ToFieldRefs {
    readonly UserAccountID: FieldRef<"Report_To", 'String'>
    readonly AdminAccountID: FieldRef<"Report_To", 'String'>
    readonly ReportStatus: FieldRef<"Report_To", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report_To findUnique
   */
  export type Report_ToFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter, which Report_To to fetch.
     */
    where: Report_ToWhereUniqueInput
  }

  /**
   * Report_To findUniqueOrThrow
   */
  export type Report_ToFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter, which Report_To to fetch.
     */
    where: Report_ToWhereUniqueInput
  }

  /**
   * Report_To findFirst
   */
  export type Report_ToFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter, which Report_To to fetch.
     */
    where?: Report_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Report_Tos to fetch.
     */
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Report_Tos.
     */
    cursor?: Report_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Report_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Report_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Report_Tos.
     */
    distinct?: Report_ToScalarFieldEnum | Report_ToScalarFieldEnum[]
  }

  /**
   * Report_To findFirstOrThrow
   */
  export type Report_ToFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter, which Report_To to fetch.
     */
    where?: Report_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Report_Tos to fetch.
     */
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Report_Tos.
     */
    cursor?: Report_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Report_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Report_Tos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Report_Tos.
     */
    distinct?: Report_ToScalarFieldEnum | Report_ToScalarFieldEnum[]
  }

  /**
   * Report_To findMany
   */
  export type Report_ToFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter, which Report_Tos to fetch.
     */
    where?: Report_ToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Report_Tos to fetch.
     */
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Report_Tos.
     */
    cursor?: Report_ToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Report_Tos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Report_Tos.
     */
    skip?: number
    distinct?: Report_ToScalarFieldEnum | Report_ToScalarFieldEnum[]
  }

  /**
   * Report_To create
   */
  export type Report_ToCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * The data needed to create a Report_To.
     */
    data: XOR<Report_ToCreateInput, Report_ToUncheckedCreateInput>
  }

  /**
   * Report_To createMany
   */
  export type Report_ToCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Report_Tos.
     */
    data: Report_ToCreateManyInput | Report_ToCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report_To createManyAndReturn
   */
  export type Report_ToCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * The data used to create many Report_Tos.
     */
    data: Report_ToCreateManyInput | Report_ToCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report_To update
   */
  export type Report_ToUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * The data needed to update a Report_To.
     */
    data: XOR<Report_ToUpdateInput, Report_ToUncheckedUpdateInput>
    /**
     * Choose, which Report_To to update.
     */
    where: Report_ToWhereUniqueInput
  }

  /**
   * Report_To updateMany
   */
  export type Report_ToUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Report_Tos.
     */
    data: XOR<Report_ToUpdateManyMutationInput, Report_ToUncheckedUpdateManyInput>
    /**
     * Filter which Report_Tos to update
     */
    where?: Report_ToWhereInput
    /**
     * Limit how many Report_Tos to update.
     */
    limit?: number
  }

  /**
   * Report_To updateManyAndReturn
   */
  export type Report_ToUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * The data used to update Report_Tos.
     */
    data: XOR<Report_ToUpdateManyMutationInput, Report_ToUncheckedUpdateManyInput>
    /**
     * Filter which Report_Tos to update
     */
    where?: Report_ToWhereInput
    /**
     * Limit how many Report_Tos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report_To upsert
   */
  export type Report_ToUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * The filter to search for the Report_To to update in case it exists.
     */
    where: Report_ToWhereUniqueInput
    /**
     * In case the Report_To found by the `where` argument doesn't exist, create a new Report_To with this data.
     */
    create: XOR<Report_ToCreateInput, Report_ToUncheckedCreateInput>
    /**
     * In case the Report_To was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Report_ToUpdateInput, Report_ToUncheckedUpdateInput>
  }

  /**
   * Report_To delete
   */
  export type Report_ToDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    /**
     * Filter which Report_To to delete.
     */
    where: Report_ToWhereUniqueInput
  }

  /**
   * Report_To deleteMany
   */
  export type Report_ToDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report_Tos to delete
     */
    where?: Report_ToWhereInput
    /**
     * Limit how many Report_Tos to delete.
     */
    limit?: number
  }

  /**
   * Report_To.Reports
   */
  export type Report_To$ReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report_To without action
   */
  export type Report_ToDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
  }


  /**
   * Model CabinClass
   */

  export type AggregateCabinClass = {
    _count: CabinClassCountAggregateOutputType | null
    _avg: CabinClassAvgAggregateOutputType | null
    _sum: CabinClassSumAggregateOutputType | null
    _min: CabinClassMinAggregateOutputType | null
    _max: CabinClassMaxAggregateOutputType | null
  }

  export type CabinClassAvgAggregateOutputType = {
    StandardPrice: number | null
  }

  export type CabinClassSumAggregateOutputType = {
    StandardPrice: number | null
  }

  export type CabinClassMinAggregateOutputType = {
    AircraftRegNo: string | null
    Class: string | null
    StandardPrice: number | null
  }

  export type CabinClassMaxAggregateOutputType = {
    AircraftRegNo: string | null
    Class: string | null
    StandardPrice: number | null
  }

  export type CabinClassCountAggregateOutputType = {
    AircraftRegNo: number
    Class: number
    StandardPrice: number
    _all: number
  }


  export type CabinClassAvgAggregateInputType = {
    StandardPrice?: true
  }

  export type CabinClassSumAggregateInputType = {
    StandardPrice?: true
  }

  export type CabinClassMinAggregateInputType = {
    AircraftRegNo?: true
    Class?: true
    StandardPrice?: true
  }

  export type CabinClassMaxAggregateInputType = {
    AircraftRegNo?: true
    Class?: true
    StandardPrice?: true
  }

  export type CabinClassCountAggregateInputType = {
    AircraftRegNo?: true
    Class?: true
    StandardPrice?: true
    _all?: true
  }

  export type CabinClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CabinClass to aggregate.
     */
    where?: CabinClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CabinClasses to fetch.
     */
    orderBy?: CabinClassOrderByWithRelationInput | CabinClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CabinClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CabinClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CabinClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CabinClasses
    **/
    _count?: true | CabinClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CabinClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CabinClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CabinClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CabinClassMaxAggregateInputType
  }

  export type GetCabinClassAggregateType<T extends CabinClassAggregateArgs> = {
        [P in keyof T & keyof AggregateCabinClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCabinClass[P]>
      : GetScalarType<T[P], AggregateCabinClass[P]>
  }




  export type CabinClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CabinClassWhereInput
    orderBy?: CabinClassOrderByWithAggregationInput | CabinClassOrderByWithAggregationInput[]
    by: CabinClassScalarFieldEnum[] | CabinClassScalarFieldEnum
    having?: CabinClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CabinClassCountAggregateInputType | true
    _avg?: CabinClassAvgAggregateInputType
    _sum?: CabinClassSumAggregateInputType
    _min?: CabinClassMinAggregateInputType
    _max?: CabinClassMaxAggregateInputType
  }

  export type CabinClassGroupByOutputType = {
    AircraftRegNo: string
    Class: string
    StandardPrice: number
    _count: CabinClassCountAggregateOutputType | null
    _avg: CabinClassAvgAggregateOutputType | null
    _sum: CabinClassSumAggregateOutputType | null
    _min: CabinClassMinAggregateOutputType | null
    _max: CabinClassMaxAggregateOutputType | null
  }

  type GetCabinClassGroupByPayload<T extends CabinClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CabinClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CabinClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CabinClassGroupByOutputType[P]>
            : GetScalarType<T[P], CabinClassGroupByOutputType[P]>
        }
      >
    >


  export type CabinClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    Class?: boolean
    StandardPrice?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cabinClass"]>

  export type CabinClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    Class?: boolean
    StandardPrice?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cabinClass"]>

  export type CabinClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    Class?: boolean
    StandardPrice?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cabinClass"]>

  export type CabinClassSelectScalar = {
    AircraftRegNo?: boolean
    Class?: boolean
    StandardPrice?: boolean
  }

  export type CabinClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AircraftRegNo" | "Class" | "StandardPrice", ExtArgs["result"]["cabinClass"]>
  export type CabinClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }
  export type CabinClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }
  export type CabinClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }

  export type $CabinClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CabinClass"
    objects: {
      aircraft: Prisma.$AircraftPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AircraftRegNo: string
      Class: string
      StandardPrice: number
    }, ExtArgs["result"]["cabinClass"]>
    composites: {}
  }

  type CabinClassGetPayload<S extends boolean | null | undefined | CabinClassDefaultArgs> = $Result.GetResult<Prisma.$CabinClassPayload, S>

  type CabinClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CabinClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CabinClassCountAggregateInputType | true
    }

  export interface CabinClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CabinClass'], meta: { name: 'CabinClass' } }
    /**
     * Find zero or one CabinClass that matches the filter.
     * @param {CabinClassFindUniqueArgs} args - Arguments to find a CabinClass
     * @example
     * // Get one CabinClass
     * const cabinClass = await prisma.cabinClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CabinClassFindUniqueArgs>(args: SelectSubset<T, CabinClassFindUniqueArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CabinClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CabinClassFindUniqueOrThrowArgs} args - Arguments to find a CabinClass
     * @example
     * // Get one CabinClass
     * const cabinClass = await prisma.cabinClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CabinClassFindUniqueOrThrowArgs>(args: SelectSubset<T, CabinClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CabinClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassFindFirstArgs} args - Arguments to find a CabinClass
     * @example
     * // Get one CabinClass
     * const cabinClass = await prisma.cabinClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CabinClassFindFirstArgs>(args?: SelectSubset<T, CabinClassFindFirstArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CabinClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassFindFirstOrThrowArgs} args - Arguments to find a CabinClass
     * @example
     * // Get one CabinClass
     * const cabinClass = await prisma.cabinClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CabinClassFindFirstOrThrowArgs>(args?: SelectSubset<T, CabinClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CabinClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CabinClasses
     * const cabinClasses = await prisma.cabinClass.findMany()
     * 
     * // Get first 10 CabinClasses
     * const cabinClasses = await prisma.cabinClass.findMany({ take: 10 })
     * 
     * // Only select the `AircraftRegNo`
     * const cabinClassWithAircraftRegNoOnly = await prisma.cabinClass.findMany({ select: { AircraftRegNo: true } })
     * 
     */
    findMany<T extends CabinClassFindManyArgs>(args?: SelectSubset<T, CabinClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CabinClass.
     * @param {CabinClassCreateArgs} args - Arguments to create a CabinClass.
     * @example
     * // Create one CabinClass
     * const CabinClass = await prisma.cabinClass.create({
     *   data: {
     *     // ... data to create a CabinClass
     *   }
     * })
     * 
     */
    create<T extends CabinClassCreateArgs>(args: SelectSubset<T, CabinClassCreateArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CabinClasses.
     * @param {CabinClassCreateManyArgs} args - Arguments to create many CabinClasses.
     * @example
     * // Create many CabinClasses
     * const cabinClass = await prisma.cabinClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CabinClassCreateManyArgs>(args?: SelectSubset<T, CabinClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CabinClasses and returns the data saved in the database.
     * @param {CabinClassCreateManyAndReturnArgs} args - Arguments to create many CabinClasses.
     * @example
     * // Create many CabinClasses
     * const cabinClass = await prisma.cabinClass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CabinClasses and only return the `AircraftRegNo`
     * const cabinClassWithAircraftRegNoOnly = await prisma.cabinClass.createManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CabinClassCreateManyAndReturnArgs>(args?: SelectSubset<T, CabinClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CabinClass.
     * @param {CabinClassDeleteArgs} args - Arguments to delete one CabinClass.
     * @example
     * // Delete one CabinClass
     * const CabinClass = await prisma.cabinClass.delete({
     *   where: {
     *     // ... filter to delete one CabinClass
     *   }
     * })
     * 
     */
    delete<T extends CabinClassDeleteArgs>(args: SelectSubset<T, CabinClassDeleteArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CabinClass.
     * @param {CabinClassUpdateArgs} args - Arguments to update one CabinClass.
     * @example
     * // Update one CabinClass
     * const cabinClass = await prisma.cabinClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CabinClassUpdateArgs>(args: SelectSubset<T, CabinClassUpdateArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CabinClasses.
     * @param {CabinClassDeleteManyArgs} args - Arguments to filter CabinClasses to delete.
     * @example
     * // Delete a few CabinClasses
     * const { count } = await prisma.cabinClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CabinClassDeleteManyArgs>(args?: SelectSubset<T, CabinClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CabinClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CabinClasses
     * const cabinClass = await prisma.cabinClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CabinClassUpdateManyArgs>(args: SelectSubset<T, CabinClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CabinClasses and returns the data updated in the database.
     * @param {CabinClassUpdateManyAndReturnArgs} args - Arguments to update many CabinClasses.
     * @example
     * // Update many CabinClasses
     * const cabinClass = await prisma.cabinClass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CabinClasses and only return the `AircraftRegNo`
     * const cabinClassWithAircraftRegNoOnly = await prisma.cabinClass.updateManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CabinClassUpdateManyAndReturnArgs>(args: SelectSubset<T, CabinClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CabinClass.
     * @param {CabinClassUpsertArgs} args - Arguments to update or create a CabinClass.
     * @example
     * // Update or create a CabinClass
     * const cabinClass = await prisma.cabinClass.upsert({
     *   create: {
     *     // ... data to create a CabinClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CabinClass we want to update
     *   }
     * })
     */
    upsert<T extends CabinClassUpsertArgs>(args: SelectSubset<T, CabinClassUpsertArgs<ExtArgs>>): Prisma__CabinClassClient<$Result.GetResult<Prisma.$CabinClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CabinClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassCountArgs} args - Arguments to filter CabinClasses to count.
     * @example
     * // Count the number of CabinClasses
     * const count = await prisma.cabinClass.count({
     *   where: {
     *     // ... the filter for the CabinClasses we want to count
     *   }
     * })
    **/
    count<T extends CabinClassCountArgs>(
      args?: Subset<T, CabinClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CabinClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CabinClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CabinClassAggregateArgs>(args: Subset<T, CabinClassAggregateArgs>): Prisma.PrismaPromise<GetCabinClassAggregateType<T>>

    /**
     * Group by CabinClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CabinClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CabinClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CabinClassGroupByArgs['orderBy'] }
        : { orderBy?: CabinClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CabinClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCabinClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CabinClass model
   */
  readonly fields: CabinClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CabinClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CabinClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aircraft<T extends AircraftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AircraftDefaultArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CabinClass model
   */
  interface CabinClassFieldRefs {
    readonly AircraftRegNo: FieldRef<"CabinClass", 'String'>
    readonly Class: FieldRef<"CabinClass", 'String'>
    readonly StandardPrice: FieldRef<"CabinClass", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CabinClass findUnique
   */
  export type CabinClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter, which CabinClass to fetch.
     */
    where: CabinClassWhereUniqueInput
  }

  /**
   * CabinClass findUniqueOrThrow
   */
  export type CabinClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter, which CabinClass to fetch.
     */
    where: CabinClassWhereUniqueInput
  }

  /**
   * CabinClass findFirst
   */
  export type CabinClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter, which CabinClass to fetch.
     */
    where?: CabinClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CabinClasses to fetch.
     */
    orderBy?: CabinClassOrderByWithRelationInput | CabinClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CabinClasses.
     */
    cursor?: CabinClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CabinClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CabinClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CabinClasses.
     */
    distinct?: CabinClassScalarFieldEnum | CabinClassScalarFieldEnum[]
  }

  /**
   * CabinClass findFirstOrThrow
   */
  export type CabinClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter, which CabinClass to fetch.
     */
    where?: CabinClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CabinClasses to fetch.
     */
    orderBy?: CabinClassOrderByWithRelationInput | CabinClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CabinClasses.
     */
    cursor?: CabinClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CabinClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CabinClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CabinClasses.
     */
    distinct?: CabinClassScalarFieldEnum | CabinClassScalarFieldEnum[]
  }

  /**
   * CabinClass findMany
   */
  export type CabinClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter, which CabinClasses to fetch.
     */
    where?: CabinClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CabinClasses to fetch.
     */
    orderBy?: CabinClassOrderByWithRelationInput | CabinClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CabinClasses.
     */
    cursor?: CabinClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CabinClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CabinClasses.
     */
    skip?: number
    distinct?: CabinClassScalarFieldEnum | CabinClassScalarFieldEnum[]
  }

  /**
   * CabinClass create
   */
  export type CabinClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * The data needed to create a CabinClass.
     */
    data: XOR<CabinClassCreateInput, CabinClassUncheckedCreateInput>
  }

  /**
   * CabinClass createMany
   */
  export type CabinClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CabinClasses.
     */
    data: CabinClassCreateManyInput | CabinClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CabinClass createManyAndReturn
   */
  export type CabinClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * The data used to create many CabinClasses.
     */
    data: CabinClassCreateManyInput | CabinClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CabinClass update
   */
  export type CabinClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * The data needed to update a CabinClass.
     */
    data: XOR<CabinClassUpdateInput, CabinClassUncheckedUpdateInput>
    /**
     * Choose, which CabinClass to update.
     */
    where: CabinClassWhereUniqueInput
  }

  /**
   * CabinClass updateMany
   */
  export type CabinClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CabinClasses.
     */
    data: XOR<CabinClassUpdateManyMutationInput, CabinClassUncheckedUpdateManyInput>
    /**
     * Filter which CabinClasses to update
     */
    where?: CabinClassWhereInput
    /**
     * Limit how many CabinClasses to update.
     */
    limit?: number
  }

  /**
   * CabinClass updateManyAndReturn
   */
  export type CabinClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * The data used to update CabinClasses.
     */
    data: XOR<CabinClassUpdateManyMutationInput, CabinClassUncheckedUpdateManyInput>
    /**
     * Filter which CabinClasses to update
     */
    where?: CabinClassWhereInput
    /**
     * Limit how many CabinClasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CabinClass upsert
   */
  export type CabinClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * The filter to search for the CabinClass to update in case it exists.
     */
    where: CabinClassWhereUniqueInput
    /**
     * In case the CabinClass found by the `where` argument doesn't exist, create a new CabinClass with this data.
     */
    create: XOR<CabinClassCreateInput, CabinClassUncheckedCreateInput>
    /**
     * In case the CabinClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CabinClassUpdateInput, CabinClassUncheckedUpdateInput>
  }

  /**
   * CabinClass delete
   */
  export type CabinClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
    /**
     * Filter which CabinClass to delete.
     */
    where: CabinClassWhereUniqueInput
  }

  /**
   * CabinClass deleteMany
   */
  export type CabinClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CabinClasses to delete
     */
    where?: CabinClassWhereInput
    /**
     * Limit how many CabinClasses to delete.
     */
    limit?: number
  }

  /**
   * CabinClass without action
   */
  export type CabinClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CabinClass
     */
    select?: CabinClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CabinClass
     */
    omit?: CabinClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CabinClassInclude<ExtArgs> | null
  }


  /**
   * Model Seat
   */

  export type AggregateSeat = {
    _count: SeatCountAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  export type SeatMinAggregateOutputType = {
    AircraftRegNo: string | null
    SeatNo: string | null
    SeatType: string | null
  }

  export type SeatMaxAggregateOutputType = {
    AircraftRegNo: string | null
    SeatNo: string | null
    SeatType: string | null
  }

  export type SeatCountAggregateOutputType = {
    AircraftRegNo: number
    SeatNo: number
    SeatType: number
    _all: number
  }


  export type SeatMinAggregateInputType = {
    AircraftRegNo?: true
    SeatNo?: true
    SeatType?: true
  }

  export type SeatMaxAggregateInputType = {
    AircraftRegNo?: true
    SeatNo?: true
    SeatType?: true
  }

  export type SeatCountAggregateInputType = {
    AircraftRegNo?: true
    SeatNo?: true
    SeatType?: true
    _all?: true
  }

  export type SeatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seat to aggregate.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seats
    **/
    _count?: true | SeatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatMaxAggregateInputType
  }

  export type GetSeatAggregateType<T extends SeatAggregateArgs> = {
        [P in keyof T & keyof AggregateSeat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeat[P]>
      : GetScalarType<T[P], AggregateSeat[P]>
  }




  export type SeatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatWhereInput
    orderBy?: SeatOrderByWithAggregationInput | SeatOrderByWithAggregationInput[]
    by: SeatScalarFieldEnum[] | SeatScalarFieldEnum
    having?: SeatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatCountAggregateInputType | true
    _min?: SeatMinAggregateInputType
    _max?: SeatMaxAggregateInputType
  }

  export type SeatGroupByOutputType = {
    AircraftRegNo: string
    SeatNo: string
    SeatType: string
    _count: SeatCountAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  type GetSeatGroupByPayload<T extends SeatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatGroupByOutputType[P]>
            : GetScalarType<T[P], SeatGroupByOutputType[P]>
        }
      >
    >


  export type SeatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    SeatNo?: boolean
    SeatType?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
    tickets?: boolean | Seat$ticketsArgs<ExtArgs>
    _count?: boolean | SeatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    SeatNo?: boolean
    SeatType?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AircraftRegNo?: boolean
    SeatNo?: boolean
    SeatType?: boolean
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectScalar = {
    AircraftRegNo?: boolean
    SeatNo?: boolean
    SeatType?: boolean
  }

  export type SeatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AircraftRegNo" | "SeatNo" | "SeatType", ExtArgs["result"]["seat"]>
  export type SeatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
    tickets?: boolean | Seat$ticketsArgs<ExtArgs>
    _count?: boolean | SeatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }
  export type SeatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aircraft?: boolean | AircraftDefaultArgs<ExtArgs>
  }

  export type $SeatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seat"
    objects: {
      aircraft: Prisma.$AircraftPayload<ExtArgs>
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AircraftRegNo: string
      SeatNo: string
      SeatType: string
    }, ExtArgs["result"]["seat"]>
    composites: {}
  }

  type SeatGetPayload<S extends boolean | null | undefined | SeatDefaultArgs> = $Result.GetResult<Prisma.$SeatPayload, S>

  type SeatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SeatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeatCountAggregateInputType | true
    }

  export interface SeatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seat'], meta: { name: 'Seat' } }
    /**
     * Find zero or one Seat that matches the filter.
     * @param {SeatFindUniqueArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeatFindUniqueArgs>(args: SelectSubset<T, SeatFindUniqueArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Seat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SeatFindUniqueOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeatFindUniqueOrThrowArgs>(args: SelectSubset<T, SeatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindFirstArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeatFindFirstArgs>(args?: SelectSubset<T, SeatFindFirstArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindFirstOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeatFindFirstOrThrowArgs>(args?: SelectSubset<T, SeatFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Seats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seats
     * const seats = await prisma.seat.findMany()
     * 
     * // Get first 10 Seats
     * const seats = await prisma.seat.findMany({ take: 10 })
     * 
     * // Only select the `AircraftRegNo`
     * const seatWithAircraftRegNoOnly = await prisma.seat.findMany({ select: { AircraftRegNo: true } })
     * 
     */
    findMany<T extends SeatFindManyArgs>(args?: SelectSubset<T, SeatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Seat.
     * @param {SeatCreateArgs} args - Arguments to create a Seat.
     * @example
     * // Create one Seat
     * const Seat = await prisma.seat.create({
     *   data: {
     *     // ... data to create a Seat
     *   }
     * })
     * 
     */
    create<T extends SeatCreateArgs>(args: SelectSubset<T, SeatCreateArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Seats.
     * @param {SeatCreateManyArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seat = await prisma.seat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeatCreateManyArgs>(args?: SelectSubset<T, SeatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seats and returns the data saved in the database.
     * @param {SeatCreateManyAndReturnArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seat = await prisma.seat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seats and only return the `AircraftRegNo`
     * const seatWithAircraftRegNoOnly = await prisma.seat.createManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeatCreateManyAndReturnArgs>(args?: SelectSubset<T, SeatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Seat.
     * @param {SeatDeleteArgs} args - Arguments to delete one Seat.
     * @example
     * // Delete one Seat
     * const Seat = await prisma.seat.delete({
     *   where: {
     *     // ... filter to delete one Seat
     *   }
     * })
     * 
     */
    delete<T extends SeatDeleteArgs>(args: SelectSubset<T, SeatDeleteArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Seat.
     * @param {SeatUpdateArgs} args - Arguments to update one Seat.
     * @example
     * // Update one Seat
     * const seat = await prisma.seat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeatUpdateArgs>(args: SelectSubset<T, SeatUpdateArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Seats.
     * @param {SeatDeleteManyArgs} args - Arguments to filter Seats to delete.
     * @example
     * // Delete a few Seats
     * const { count } = await prisma.seat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeatDeleteManyArgs>(args?: SelectSubset<T, SeatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seats
     * const seat = await prisma.seat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeatUpdateManyArgs>(args: SelectSubset<T, SeatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats and returns the data updated in the database.
     * @param {SeatUpdateManyAndReturnArgs} args - Arguments to update many Seats.
     * @example
     * // Update many Seats
     * const seat = await prisma.seat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Seats and only return the `AircraftRegNo`
     * const seatWithAircraftRegNoOnly = await prisma.seat.updateManyAndReturn({
     *   select: { AircraftRegNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SeatUpdateManyAndReturnArgs>(args: SelectSubset<T, SeatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Seat.
     * @param {SeatUpsertArgs} args - Arguments to update or create a Seat.
     * @example
     * // Update or create a Seat
     * const seat = await prisma.seat.upsert({
     *   create: {
     *     // ... data to create a Seat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seat we want to update
     *   }
     * })
     */
    upsert<T extends SeatUpsertArgs>(args: SelectSubset<T, SeatUpsertArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatCountArgs} args - Arguments to filter Seats to count.
     * @example
     * // Count the number of Seats
     * const count = await prisma.seat.count({
     *   where: {
     *     // ... the filter for the Seats we want to count
     *   }
     * })
    **/
    count<T extends SeatCountArgs>(
      args?: Subset<T, SeatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatAggregateArgs>(args: Subset<T, SeatAggregateArgs>): Prisma.PrismaPromise<GetSeatAggregateType<T>>

    /**
     * Group by Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatGroupByArgs['orderBy'] }
        : { orderBy?: SeatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seat model
   */
  readonly fields: SeatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aircraft<T extends AircraftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AircraftDefaultArgs<ExtArgs>>): Prisma__AircraftClient<$Result.GetResult<Prisma.$AircraftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tickets<T extends Seat$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Seat$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seat model
   */
  interface SeatFieldRefs {
    readonly AircraftRegNo: FieldRef<"Seat", 'String'>
    readonly SeatNo: FieldRef<"Seat", 'String'>
    readonly SeatType: FieldRef<"Seat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Seat findUnique
   */
  export type SeatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat findUniqueOrThrow
   */
  export type SeatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat findFirst
   */
  export type SeatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat findFirstOrThrow
   */
  export type SeatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat findMany
   */
  export type SeatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat create
   */
  export type SeatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The data needed to create a Seat.
     */
    data: XOR<SeatCreateInput, SeatUncheckedCreateInput>
  }

  /**
   * Seat createMany
   */
  export type SeatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seats.
     */
    data: SeatCreateManyInput | SeatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seat createManyAndReturn
   */
  export type SeatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * The data used to create many Seats.
     */
    data: SeatCreateManyInput | SeatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seat update
   */
  export type SeatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The data needed to update a Seat.
     */
    data: XOR<SeatUpdateInput, SeatUncheckedUpdateInput>
    /**
     * Choose, which Seat to update.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat updateMany
   */
  export type SeatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to update.
     */
    limit?: number
  }

  /**
   * Seat updateManyAndReturn
   */
  export type SeatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seat upsert
   */
  export type SeatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The filter to search for the Seat to update in case it exists.
     */
    where: SeatWhereUniqueInput
    /**
     * In case the Seat found by the `where` argument doesn't exist, create a new Seat with this data.
     */
    create: XOR<SeatCreateInput, SeatUncheckedCreateInput>
    /**
     * In case the Seat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeatUpdateInput, SeatUncheckedUpdateInput>
  }

  /**
   * Seat delete
   */
  export type SeatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter which Seat to delete.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat deleteMany
   */
  export type SeatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seats to delete
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to delete.
     */
    limit?: number
  }

  /**
   * Seat.tickets
   */
  export type Seat$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Seat without action
   */
  export type SeatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    AdminAccountID: string | null
    IPAddress: string | null
  }

  export type AdminMaxAggregateOutputType = {
    AdminAccountID: string | null
    IPAddress: string | null
  }

  export type AdminCountAggregateOutputType = {
    AdminAccountID: number
    IPAddress: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    AdminAccountID?: true
    IPAddress?: true
  }

  export type AdminMaxAggregateInputType = {
    AdminAccountID?: true
    IPAddress?: true
  }

  export type AdminCountAggregateInputType = {
    AdminAccountID?: true
    IPAddress?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    AdminAccountID: string
    IPAddress: string | null
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    IPAddress?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    sentAirlineMessages?: boolean | Admin$sentAirlineMessagesArgs<ExtArgs>
    contacts?: boolean | Admin$contactsArgs<ExtArgs>
    involvedInReports?: boolean | Admin$involvedInReportsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    IPAddress?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AdminAccountID?: boolean
    IPAddress?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    AdminAccountID?: boolean
    IPAddress?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AdminAccountID" | "IPAddress", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    sentAirlineMessages?: boolean | Admin$sentAirlineMessagesArgs<ExtArgs>
    contacts?: boolean | Admin$contactsArgs<ExtArgs>
    involvedInReports?: boolean | Admin$involvedInReportsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      sentAirlineMessages: Prisma.$Airline_MessagePayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      involvedInReports: Prisma.$Report_ToPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AdminAccountID: string
      IPAddress: string | null
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `AdminAccountID`
     * const adminWithAdminAccountIDOnly = await prisma.admin.findMany({ select: { AdminAccountID: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `AdminAccountID`
     * const adminWithAdminAccountIDOnly = await prisma.admin.createManyAndReturn({
     *   select: { AdminAccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `AdminAccountID`
     * const adminWithAdminAccountIDOnly = await prisma.admin.updateManyAndReturn({
     *   select: { AdminAccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sentAirlineMessages<T extends Admin$sentAirlineMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Admin$sentAirlineMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contacts<T extends Admin$contactsArgs<ExtArgs> = {}>(args?: Subset<T, Admin$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    involvedInReports<T extends Admin$involvedInReportsArgs<ExtArgs> = {}>(args?: Subset<T, Admin$involvedInReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly AdminAccountID: FieldRef<"Admin", 'String'>
    readonly IPAddress: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.sentAirlineMessages
   */
  export type Admin$sentAirlineMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    where?: Airline_MessageWhereInput
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    cursor?: Airline_MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Airline_MessageScalarFieldEnum | Airline_MessageScalarFieldEnum[]
  }

  /**
   * Admin.contacts
   */
  export type Admin$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Admin.involvedInReports
   */
  export type Admin$involvedInReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    where?: Report_ToWhereInput
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    cursor?: Report_ToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Report_ToScalarFieldEnum | Report_ToScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Airline_Message
   */

  export type AggregateAirline_Message = {
    _count: Airline_MessageCountAggregateOutputType | null
    _min: Airline_MessageMinAggregateOutputType | null
    _max: Airline_MessageMaxAggregateOutputType | null
  }

  export type Airline_MessageMinAggregateOutputType = {
    AirlineName: string | null
    AdminAccountID: string | null
    MessageText: string | null
  }

  export type Airline_MessageMaxAggregateOutputType = {
    AirlineName: string | null
    AdminAccountID: string | null
    MessageText: string | null
  }

  export type Airline_MessageCountAggregateOutputType = {
    AirlineName: number
    AdminAccountID: number
    MessageText: number
    _all: number
  }


  export type Airline_MessageMinAggregateInputType = {
    AirlineName?: true
    AdminAccountID?: true
    MessageText?: true
  }

  export type Airline_MessageMaxAggregateInputType = {
    AirlineName?: true
    AdminAccountID?: true
    MessageText?: true
  }

  export type Airline_MessageCountAggregateInputType = {
    AirlineName?: true
    AdminAccountID?: true
    MessageText?: true
    _all?: true
  }

  export type Airline_MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airline_Message to aggregate.
     */
    where?: Airline_MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Messages to fetch.
     */
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Airline_MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Airline_Messages
    **/
    _count?: true | Airline_MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Airline_MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Airline_MessageMaxAggregateInputType
  }

  export type GetAirline_MessageAggregateType<T extends Airline_MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateAirline_Message]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAirline_Message[P]>
      : GetScalarType<T[P], AggregateAirline_Message[P]>
  }




  export type Airline_MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Airline_MessageWhereInput
    orderBy?: Airline_MessageOrderByWithAggregationInput | Airline_MessageOrderByWithAggregationInput[]
    by: Airline_MessageScalarFieldEnum[] | Airline_MessageScalarFieldEnum
    having?: Airline_MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Airline_MessageCountAggregateInputType | true
    _min?: Airline_MessageMinAggregateInputType
    _max?: Airline_MessageMaxAggregateInputType
  }

  export type Airline_MessageGroupByOutputType = {
    AirlineName: string
    AdminAccountID: string
    MessageText: string
    _count: Airline_MessageCountAggregateOutputType | null
    _min: Airline_MessageMinAggregateOutputType | null
    _max: Airline_MessageMaxAggregateOutputType | null
  }

  type GetAirline_MessageGroupByPayload<T extends Airline_MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Airline_MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Airline_MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Airline_MessageGroupByOutputType[P]>
            : GetScalarType<T[P], Airline_MessageGroupByOutputType[P]>
        }
      >
    >


  export type Airline_MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AdminAccountID?: boolean
    MessageText?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Message"]>

  export type Airline_MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AdminAccountID?: boolean
    MessageText?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Message"]>

  export type Airline_MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AirlineName?: boolean
    AdminAccountID?: boolean
    MessageText?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Message"]>

  export type Airline_MessageSelectScalar = {
    AirlineName?: boolean
    AdminAccountID?: boolean
    MessageText?: boolean
  }

  export type Airline_MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AirlineName" | "AdminAccountID" | "MessageText", ExtArgs["result"]["airline_Message"]>
  export type Airline_MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type Airline_MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type Airline_MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }

  export type $Airline_MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Airline_Message"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      airline: Prisma.$AirlinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AirlineName: string
      AdminAccountID: string
      MessageText: string
    }, ExtArgs["result"]["airline_Message"]>
    composites: {}
  }

  type Airline_MessageGetPayload<S extends boolean | null | undefined | Airline_MessageDefaultArgs> = $Result.GetResult<Prisma.$Airline_MessagePayload, S>

  type Airline_MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Airline_MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Airline_MessageCountAggregateInputType | true
    }

  export interface Airline_MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Airline_Message'], meta: { name: 'Airline_Message' } }
    /**
     * Find zero or one Airline_Message that matches the filter.
     * @param {Airline_MessageFindUniqueArgs} args - Arguments to find a Airline_Message
     * @example
     * // Get one Airline_Message
     * const airline_Message = await prisma.airline_Message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Airline_MessageFindUniqueArgs>(args: SelectSubset<T, Airline_MessageFindUniqueArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Airline_Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Airline_MessageFindUniqueOrThrowArgs} args - Arguments to find a Airline_Message
     * @example
     * // Get one Airline_Message
     * const airline_Message = await prisma.airline_Message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Airline_MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, Airline_MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline_Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageFindFirstArgs} args - Arguments to find a Airline_Message
     * @example
     * // Get one Airline_Message
     * const airline_Message = await prisma.airline_Message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Airline_MessageFindFirstArgs>(args?: SelectSubset<T, Airline_MessageFindFirstArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline_Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageFindFirstOrThrowArgs} args - Arguments to find a Airline_Message
     * @example
     * // Get one Airline_Message
     * const airline_Message = await prisma.airline_Message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Airline_MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, Airline_MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Airline_Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Airline_Messages
     * const airline_Messages = await prisma.airline_Message.findMany()
     * 
     * // Get first 10 Airline_Messages
     * const airline_Messages = await prisma.airline_Message.findMany({ take: 10 })
     * 
     * // Only select the `AirlineName`
     * const airline_MessageWithAirlineNameOnly = await prisma.airline_Message.findMany({ select: { AirlineName: true } })
     * 
     */
    findMany<T extends Airline_MessageFindManyArgs>(args?: SelectSubset<T, Airline_MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Airline_Message.
     * @param {Airline_MessageCreateArgs} args - Arguments to create a Airline_Message.
     * @example
     * // Create one Airline_Message
     * const Airline_Message = await prisma.airline_Message.create({
     *   data: {
     *     // ... data to create a Airline_Message
     *   }
     * })
     * 
     */
    create<T extends Airline_MessageCreateArgs>(args: SelectSubset<T, Airline_MessageCreateArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Airline_Messages.
     * @param {Airline_MessageCreateManyArgs} args - Arguments to create many Airline_Messages.
     * @example
     * // Create many Airline_Messages
     * const airline_Message = await prisma.airline_Message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Airline_MessageCreateManyArgs>(args?: SelectSubset<T, Airline_MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Airline_Messages and returns the data saved in the database.
     * @param {Airline_MessageCreateManyAndReturnArgs} args - Arguments to create many Airline_Messages.
     * @example
     * // Create many Airline_Messages
     * const airline_Message = await prisma.airline_Message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Airline_Messages and only return the `AirlineName`
     * const airline_MessageWithAirlineNameOnly = await prisma.airline_Message.createManyAndReturn({
     *   select: { AirlineName: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Airline_MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, Airline_MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Airline_Message.
     * @param {Airline_MessageDeleteArgs} args - Arguments to delete one Airline_Message.
     * @example
     * // Delete one Airline_Message
     * const Airline_Message = await prisma.airline_Message.delete({
     *   where: {
     *     // ... filter to delete one Airline_Message
     *   }
     * })
     * 
     */
    delete<T extends Airline_MessageDeleteArgs>(args: SelectSubset<T, Airline_MessageDeleteArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Airline_Message.
     * @param {Airline_MessageUpdateArgs} args - Arguments to update one Airline_Message.
     * @example
     * // Update one Airline_Message
     * const airline_Message = await prisma.airline_Message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Airline_MessageUpdateArgs>(args: SelectSubset<T, Airline_MessageUpdateArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Airline_Messages.
     * @param {Airline_MessageDeleteManyArgs} args - Arguments to filter Airline_Messages to delete.
     * @example
     * // Delete a few Airline_Messages
     * const { count } = await prisma.airline_Message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Airline_MessageDeleteManyArgs>(args?: SelectSubset<T, Airline_MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airline_Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Airline_Messages
     * const airline_Message = await prisma.airline_Message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Airline_MessageUpdateManyArgs>(args: SelectSubset<T, Airline_MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airline_Messages and returns the data updated in the database.
     * @param {Airline_MessageUpdateManyAndReturnArgs} args - Arguments to update many Airline_Messages.
     * @example
     * // Update many Airline_Messages
     * const airline_Message = await prisma.airline_Message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Airline_Messages and only return the `AirlineName`
     * const airline_MessageWithAirlineNameOnly = await prisma.airline_Message.updateManyAndReturn({
     *   select: { AirlineName: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Airline_MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, Airline_MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Airline_Message.
     * @param {Airline_MessageUpsertArgs} args - Arguments to update or create a Airline_Message.
     * @example
     * // Update or create a Airline_Message
     * const airline_Message = await prisma.airline_Message.upsert({
     *   create: {
     *     // ... data to create a Airline_Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Airline_Message we want to update
     *   }
     * })
     */
    upsert<T extends Airline_MessageUpsertArgs>(args: SelectSubset<T, Airline_MessageUpsertArgs<ExtArgs>>): Prisma__Airline_MessageClient<$Result.GetResult<Prisma.$Airline_MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Airline_Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageCountArgs} args - Arguments to filter Airline_Messages to count.
     * @example
     * // Count the number of Airline_Messages
     * const count = await prisma.airline_Message.count({
     *   where: {
     *     // ... the filter for the Airline_Messages we want to count
     *   }
     * })
    **/
    count<T extends Airline_MessageCountArgs>(
      args?: Subset<T, Airline_MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Airline_MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Airline_Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Airline_MessageAggregateArgs>(args: Subset<T, Airline_MessageAggregateArgs>): Prisma.PrismaPromise<GetAirline_MessageAggregateType<T>>

    /**
     * Group by Airline_Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Airline_MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Airline_MessageGroupByArgs['orderBy'] }
        : { orderBy?: Airline_MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Airline_MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAirline_MessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Airline_Message model
   */
  readonly fields: Airline_MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Airline_Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Airline_MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Airline_Message model
   */
  interface Airline_MessageFieldRefs {
    readonly AirlineName: FieldRef<"Airline_Message", 'String'>
    readonly AdminAccountID: FieldRef<"Airline_Message", 'String'>
    readonly MessageText: FieldRef<"Airline_Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Airline_Message findUnique
   */
  export type Airline_MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Message to fetch.
     */
    where: Airline_MessageWhereUniqueInput
  }

  /**
   * Airline_Message findUniqueOrThrow
   */
  export type Airline_MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Message to fetch.
     */
    where: Airline_MessageWhereUniqueInput
  }

  /**
   * Airline_Message findFirst
   */
  export type Airline_MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Message to fetch.
     */
    where?: Airline_MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Messages to fetch.
     */
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airline_Messages.
     */
    cursor?: Airline_MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airline_Messages.
     */
    distinct?: Airline_MessageScalarFieldEnum | Airline_MessageScalarFieldEnum[]
  }

  /**
   * Airline_Message findFirstOrThrow
   */
  export type Airline_MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Message to fetch.
     */
    where?: Airline_MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Messages to fetch.
     */
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airline_Messages.
     */
    cursor?: Airline_MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airline_Messages.
     */
    distinct?: Airline_MessageScalarFieldEnum | Airline_MessageScalarFieldEnum[]
  }

  /**
   * Airline_Message findMany
   */
  export type Airline_MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Messages to fetch.
     */
    where?: Airline_MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Messages to fetch.
     */
    orderBy?: Airline_MessageOrderByWithRelationInput | Airline_MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Airline_Messages.
     */
    cursor?: Airline_MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Messages.
     */
    skip?: number
    distinct?: Airline_MessageScalarFieldEnum | Airline_MessageScalarFieldEnum[]
  }

  /**
   * Airline_Message create
   */
  export type Airline_MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Airline_Message.
     */
    data: XOR<Airline_MessageCreateInput, Airline_MessageUncheckedCreateInput>
  }

  /**
   * Airline_Message createMany
   */
  export type Airline_MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Airline_Messages.
     */
    data: Airline_MessageCreateManyInput | Airline_MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airline_Message createManyAndReturn
   */
  export type Airline_MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Airline_Messages.
     */
    data: Airline_MessageCreateManyInput | Airline_MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Airline_Message update
   */
  export type Airline_MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Airline_Message.
     */
    data: XOR<Airline_MessageUpdateInput, Airline_MessageUncheckedUpdateInput>
    /**
     * Choose, which Airline_Message to update.
     */
    where: Airline_MessageWhereUniqueInput
  }

  /**
   * Airline_Message updateMany
   */
  export type Airline_MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Airline_Messages.
     */
    data: XOR<Airline_MessageUpdateManyMutationInput, Airline_MessageUncheckedUpdateManyInput>
    /**
     * Filter which Airline_Messages to update
     */
    where?: Airline_MessageWhereInput
    /**
     * Limit how many Airline_Messages to update.
     */
    limit?: number
  }

  /**
   * Airline_Message updateManyAndReturn
   */
  export type Airline_MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * The data used to update Airline_Messages.
     */
    data: XOR<Airline_MessageUpdateManyMutationInput, Airline_MessageUncheckedUpdateManyInput>
    /**
     * Filter which Airline_Messages to update
     */
    where?: Airline_MessageWhereInput
    /**
     * Limit how many Airline_Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Airline_Message upsert
   */
  export type Airline_MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Airline_Message to update in case it exists.
     */
    where: Airline_MessageWhereUniqueInput
    /**
     * In case the Airline_Message found by the `where` argument doesn't exist, create a new Airline_Message with this data.
     */
    create: XOR<Airline_MessageCreateInput, Airline_MessageUncheckedCreateInput>
    /**
     * In case the Airline_Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Airline_MessageUpdateInput, Airline_MessageUncheckedUpdateInput>
  }

  /**
   * Airline_Message delete
   */
  export type Airline_MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
    /**
     * Filter which Airline_Message to delete.
     */
    where: Airline_MessageWhereUniqueInput
  }

  /**
   * Airline_Message deleteMany
   */
  export type Airline_MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airline_Messages to delete
     */
    where?: Airline_MessageWhereInput
    /**
     * Limit how many Airline_Messages to delete.
     */
    limit?: number
  }

  /**
   * Airline_Message without action
   */
  export type Airline_MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Message
     */
    select?: Airline_MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Message
     */
    omit?: Airline_MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_MessageInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    AccountID: string | null
    Password: string | null
    FirstName: string | null
    LastName: string | null
  }

  export type AccountMaxAggregateOutputType = {
    AccountID: string | null
    Password: string | null
    FirstName: string | null
    LastName: string | null
  }

  export type AccountCountAggregateOutputType = {
    AccountID: number
    Password: number
    FirstName: number
    LastName: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    AccountID?: true
    Password?: true
    FirstName?: true
    LastName?: true
  }

  export type AccountMaxAggregateInputType = {
    AccountID?: true
    Password?: true
    FirstName?: true
    LastName?: true
  }

  export type AccountCountAggregateInputType = {
    AccountID?: true
    Password?: true
    FirstName?: true
    LastName?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AccountID?: boolean
    Password?: boolean
    FirstName?: boolean
    LastName?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
    admin?: boolean | Account$adminArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AccountID?: boolean
    Password?: boolean
    FirstName?: boolean
    LastName?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AccountID?: boolean
    Password?: boolean
    FirstName?: boolean
    LastName?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    AccountID?: boolean
    Password?: boolean
    FirstName?: boolean
    LastName?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"AccountID" | "Password" | "FirstName" | "LastName", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
    admin?: boolean | Account$adminArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      AccountID: string
      Password: string
      FirstName: string
      LastName: string
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `AccountID`
     * const accountWithAccountIDOnly = await prisma.account.findMany({ select: { AccountID: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `AccountID`
     * const accountWithAccountIDOnly = await prisma.account.createManyAndReturn({
     *   select: { AccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `AccountID`
     * const accountWithAccountIDOnly = await prisma.account.updateManyAndReturn({
     *   select: { AccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Account$userArgs<ExtArgs> = {}>(args?: Subset<T, Account$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    admin<T extends Account$adminArgs<ExtArgs> = {}>(args?: Subset<T, Account$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly AccountID: FieldRef<"Account", 'String'>
    readonly Password: FieldRef<"Account", 'String'>
    readonly FirstName: FieldRef<"Account", 'String'>
    readonly LastName: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.user
   */
  export type Account$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account.admin
   */
  export type Account$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    UserAccountID: string | null
    Email: string | null
  }

  export type UserMaxAggregateOutputType = {
    UserAccountID: string | null
    Email: string | null
  }

  export type UserCountAggregateOutputType = {
    UserAccountID: number
    Email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    UserAccountID?: true
    Email?: true
  }

  export type UserMaxAggregateInputType = {
    UserAccountID?: true
    Email?: true
  }

  export type UserCountAggregateInputType = {
    UserAccountID?: true
    Email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    UserAccountID: string
    Email: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    Email?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    telNos?: boolean | User$telNosArgs<ExtArgs>
    assignedFlights?: boolean | User$assignedFlightsArgs<ExtArgs>
    purchases?: boolean | User$purchasesArgs<ExtArgs>
    involvedInReports?: boolean | User$involvedInReportsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    Email?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    Email?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    UserAccountID?: boolean
    Email?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"UserAccountID" | "Email", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    telNos?: boolean | User$telNosArgs<ExtArgs>
    assignedFlights?: boolean | User$assignedFlightsArgs<ExtArgs>
    purchases?: boolean | User$purchasesArgs<ExtArgs>
    involvedInReports?: boolean | User$involvedInReportsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      telNos: Prisma.$User_Tel_NoPayload<ExtArgs>[]
      assignedFlights: Prisma.$Assigned_ToPayload<ExtArgs>[]
      purchases: Prisma.$PurchasePayload<ExtArgs>[]
      involvedInReports: Prisma.$Report_ToPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserAccountID: string
      Email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `UserAccountID`
     * const userWithUserAccountIDOnly = await prisma.user.findMany({ select: { UserAccountID: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `UserAccountID`
     * const userWithUserAccountIDOnly = await prisma.user.createManyAndReturn({
     *   select: { UserAccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `UserAccountID`
     * const userWithUserAccountIDOnly = await prisma.user.updateManyAndReturn({
     *   select: { UserAccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    telNos<T extends User$telNosArgs<ExtArgs> = {}>(args?: Subset<T, User$telNosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedFlights<T extends User$assignedFlightsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedFlightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Assigned_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchases<T extends User$purchasesArgs<ExtArgs> = {}>(args?: Subset<T, User$purchasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    involvedInReports<T extends User$involvedInReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$involvedInReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly UserAccountID: FieldRef<"User", 'String'>
    readonly Email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.telNos
   */
  export type User$telNosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    where?: User_Tel_NoWhereInput
    orderBy?: User_Tel_NoOrderByWithRelationInput | User_Tel_NoOrderByWithRelationInput[]
    cursor?: User_Tel_NoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_Tel_NoScalarFieldEnum | User_Tel_NoScalarFieldEnum[]
  }

  /**
   * User.assignedFlights
   */
  export type User$assignedFlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assigned_To
     */
    select?: Assigned_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assigned_To
     */
    omit?: Assigned_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Assigned_ToInclude<ExtArgs> | null
    where?: Assigned_ToWhereInput
    orderBy?: Assigned_ToOrderByWithRelationInput | Assigned_ToOrderByWithRelationInput[]
    cursor?: Assigned_ToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Assigned_ToScalarFieldEnum | Assigned_ToScalarFieldEnum[]
  }

  /**
   * User.purchases
   */
  export type User$purchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    cursor?: PurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * User.involvedInReports
   */
  export type User$involvedInReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report_To
     */
    select?: Report_ToSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report_To
     */
    omit?: Report_ToOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Report_ToInclude<ExtArgs> | null
    where?: Report_ToWhereInput
    orderBy?: Report_ToOrderByWithRelationInput | Report_ToOrderByWithRelationInput[]
    cursor?: Report_ToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Report_ToScalarFieldEnum | Report_ToScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model User_Tel_No
   */

  export type AggregateUser_Tel_No = {
    _count: User_Tel_NoCountAggregateOutputType | null
    _min: User_Tel_NoMinAggregateOutputType | null
    _max: User_Tel_NoMaxAggregateOutputType | null
  }

  export type User_Tel_NoMinAggregateOutputType = {
    UserAccountID: string | null
    TelNo: string | null
  }

  export type User_Tel_NoMaxAggregateOutputType = {
    UserAccountID: string | null
    TelNo: string | null
  }

  export type User_Tel_NoCountAggregateOutputType = {
    UserAccountID: number
    TelNo: number
    _all: number
  }


  export type User_Tel_NoMinAggregateInputType = {
    UserAccountID?: true
    TelNo?: true
  }

  export type User_Tel_NoMaxAggregateInputType = {
    UserAccountID?: true
    TelNo?: true
  }

  export type User_Tel_NoCountAggregateInputType = {
    UserAccountID?: true
    TelNo?: true
    _all?: true
  }

  export type User_Tel_NoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_Tel_No to aggregate.
     */
    where?: User_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Tel_Nos to fetch.
     */
    orderBy?: User_Tel_NoOrderByWithRelationInput | User_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: User_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned User_Tel_Nos
    **/
    _count?: true | User_Tel_NoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_Tel_NoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_Tel_NoMaxAggregateInputType
  }

  export type GetUser_Tel_NoAggregateType<T extends User_Tel_NoAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_Tel_No]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_Tel_No[P]>
      : GetScalarType<T[P], AggregateUser_Tel_No[P]>
  }




  export type User_Tel_NoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: User_Tel_NoWhereInput
    orderBy?: User_Tel_NoOrderByWithAggregationInput | User_Tel_NoOrderByWithAggregationInput[]
    by: User_Tel_NoScalarFieldEnum[] | User_Tel_NoScalarFieldEnum
    having?: User_Tel_NoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_Tel_NoCountAggregateInputType | true
    _min?: User_Tel_NoMinAggregateInputType
    _max?: User_Tel_NoMaxAggregateInputType
  }

  export type User_Tel_NoGroupByOutputType = {
    UserAccountID: string
    TelNo: string
    _count: User_Tel_NoCountAggregateOutputType | null
    _min: User_Tel_NoMinAggregateOutputType | null
    _max: User_Tel_NoMaxAggregateOutputType | null
  }

  type GetUser_Tel_NoGroupByPayload<T extends User_Tel_NoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_Tel_NoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_Tel_NoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_Tel_NoGroupByOutputType[P]>
            : GetScalarType<T[P], User_Tel_NoGroupByOutputType[P]>
        }
      >
    >


  export type User_Tel_NoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    TelNo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_Tel_No"]>

  export type User_Tel_NoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    TelNo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_Tel_No"]>

  export type User_Tel_NoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserAccountID?: boolean
    TelNo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_Tel_No"]>

  export type User_Tel_NoSelectScalar = {
    UserAccountID?: boolean
    TelNo?: boolean
  }

  export type User_Tel_NoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"UserAccountID" | "TelNo", ExtArgs["result"]["user_Tel_No"]>
  export type User_Tel_NoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type User_Tel_NoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type User_Tel_NoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $User_Tel_NoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User_Tel_No"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      UserAccountID: string
      TelNo: string
    }, ExtArgs["result"]["user_Tel_No"]>
    composites: {}
  }

  type User_Tel_NoGetPayload<S extends boolean | null | undefined | User_Tel_NoDefaultArgs> = $Result.GetResult<Prisma.$User_Tel_NoPayload, S>

  type User_Tel_NoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<User_Tel_NoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_Tel_NoCountAggregateInputType | true
    }

  export interface User_Tel_NoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User_Tel_No'], meta: { name: 'User_Tel_No' } }
    /**
     * Find zero or one User_Tel_No that matches the filter.
     * @param {User_Tel_NoFindUniqueArgs} args - Arguments to find a User_Tel_No
     * @example
     * // Get one User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends User_Tel_NoFindUniqueArgs>(args: SelectSubset<T, User_Tel_NoFindUniqueArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_Tel_No that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {User_Tel_NoFindUniqueOrThrowArgs} args - Arguments to find a User_Tel_No
     * @example
     * // Get one User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends User_Tel_NoFindUniqueOrThrowArgs>(args: SelectSubset<T, User_Tel_NoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_Tel_No that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoFindFirstArgs} args - Arguments to find a User_Tel_No
     * @example
     * // Get one User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends User_Tel_NoFindFirstArgs>(args?: SelectSubset<T, User_Tel_NoFindFirstArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_Tel_No that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoFindFirstOrThrowArgs} args - Arguments to find a User_Tel_No
     * @example
     * // Get one User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends User_Tel_NoFindFirstOrThrowArgs>(args?: SelectSubset<T, User_Tel_NoFindFirstOrThrowArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_Tel_Nos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_Tel_Nos
     * const user_Tel_Nos = await prisma.user_Tel_No.findMany()
     * 
     * // Get first 10 User_Tel_Nos
     * const user_Tel_Nos = await prisma.user_Tel_No.findMany({ take: 10 })
     * 
     * // Only select the `UserAccountID`
     * const user_Tel_NoWithUserAccountIDOnly = await prisma.user_Tel_No.findMany({ select: { UserAccountID: true } })
     * 
     */
    findMany<T extends User_Tel_NoFindManyArgs>(args?: SelectSubset<T, User_Tel_NoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_Tel_No.
     * @param {User_Tel_NoCreateArgs} args - Arguments to create a User_Tel_No.
     * @example
     * // Create one User_Tel_No
     * const User_Tel_No = await prisma.user_Tel_No.create({
     *   data: {
     *     // ... data to create a User_Tel_No
     *   }
     * })
     * 
     */
    create<T extends User_Tel_NoCreateArgs>(args: SelectSubset<T, User_Tel_NoCreateArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_Tel_Nos.
     * @param {User_Tel_NoCreateManyArgs} args - Arguments to create many User_Tel_Nos.
     * @example
     * // Create many User_Tel_Nos
     * const user_Tel_No = await prisma.user_Tel_No.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends User_Tel_NoCreateManyArgs>(args?: SelectSubset<T, User_Tel_NoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_Tel_Nos and returns the data saved in the database.
     * @param {User_Tel_NoCreateManyAndReturnArgs} args - Arguments to create many User_Tel_Nos.
     * @example
     * // Create many User_Tel_Nos
     * const user_Tel_No = await prisma.user_Tel_No.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_Tel_Nos and only return the `UserAccountID`
     * const user_Tel_NoWithUserAccountIDOnly = await prisma.user_Tel_No.createManyAndReturn({
     *   select: { UserAccountID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends User_Tel_NoCreateManyAndReturnArgs>(args?: SelectSubset<T, User_Tel_NoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_Tel_No.
     * @param {User_Tel_NoDeleteArgs} args - Arguments to delete one User_Tel_No.
     * @example
     * // Delete one User_Tel_No
     * const User_Tel_No = await prisma.user_Tel_No.delete({
     *   where: {
     *     // ... filter to delete one User_Tel_No
     *   }
     * })
     * 
     */
    delete<T extends User_Tel_NoDeleteArgs>(args: SelectSubset<T, User_Tel_NoDeleteArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_Tel_No.
     * @param {User_Tel_NoUpdateArgs} args - Arguments to update one User_Tel_No.
     * @example
     * // Update one User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends User_Tel_NoUpdateArgs>(args: SelectSubset<T, User_Tel_NoUpdateArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_Tel_Nos.
     * @param {User_Tel_NoDeleteManyArgs} args - Arguments to filter User_Tel_Nos to delete.
     * @example
     * // Delete a few User_Tel_Nos
     * const { count } = await prisma.user_Tel_No.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends User_Tel_NoDeleteManyArgs>(args?: SelectSubset<T, User_Tel_NoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_Tel_Nos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_Tel_Nos
     * const user_Tel_No = await prisma.user_Tel_No.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends User_Tel_NoUpdateManyArgs>(args: SelectSubset<T, User_Tel_NoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_Tel_Nos and returns the data updated in the database.
     * @param {User_Tel_NoUpdateManyAndReturnArgs} args - Arguments to update many User_Tel_Nos.
     * @example
     * // Update many User_Tel_Nos
     * const user_Tel_No = await prisma.user_Tel_No.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_Tel_Nos and only return the `UserAccountID`
     * const user_Tel_NoWithUserAccountIDOnly = await prisma.user_Tel_No.updateManyAndReturn({
     *   select: { UserAccountID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends User_Tel_NoUpdateManyAndReturnArgs>(args: SelectSubset<T, User_Tel_NoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_Tel_No.
     * @param {User_Tel_NoUpsertArgs} args - Arguments to update or create a User_Tel_No.
     * @example
     * // Update or create a User_Tel_No
     * const user_Tel_No = await prisma.user_Tel_No.upsert({
     *   create: {
     *     // ... data to create a User_Tel_No
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_Tel_No we want to update
     *   }
     * })
     */
    upsert<T extends User_Tel_NoUpsertArgs>(args: SelectSubset<T, User_Tel_NoUpsertArgs<ExtArgs>>): Prisma__User_Tel_NoClient<$Result.GetResult<Prisma.$User_Tel_NoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_Tel_Nos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoCountArgs} args - Arguments to filter User_Tel_Nos to count.
     * @example
     * // Count the number of User_Tel_Nos
     * const count = await prisma.user_Tel_No.count({
     *   where: {
     *     // ... the filter for the User_Tel_Nos we want to count
     *   }
     * })
    **/
    count<T extends User_Tel_NoCountArgs>(
      args?: Subset<T, User_Tel_NoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_Tel_NoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_Tel_No.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_Tel_NoAggregateArgs>(args: Subset<T, User_Tel_NoAggregateArgs>): Prisma.PrismaPromise<GetUser_Tel_NoAggregateType<T>>

    /**
     * Group by User_Tel_No.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_Tel_NoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_Tel_NoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_Tel_NoGroupByArgs['orderBy'] }
        : { orderBy?: User_Tel_NoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_Tel_NoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_Tel_NoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User_Tel_No model
   */
  readonly fields: User_Tel_NoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User_Tel_No.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__User_Tel_NoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User_Tel_No model
   */
  interface User_Tel_NoFieldRefs {
    readonly UserAccountID: FieldRef<"User_Tel_No", 'String'>
    readonly TelNo: FieldRef<"User_Tel_No", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User_Tel_No findUnique
   */
  export type User_Tel_NoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which User_Tel_No to fetch.
     */
    where: User_Tel_NoWhereUniqueInput
  }

  /**
   * User_Tel_No findUniqueOrThrow
   */
  export type User_Tel_NoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which User_Tel_No to fetch.
     */
    where: User_Tel_NoWhereUniqueInput
  }

  /**
   * User_Tel_No findFirst
   */
  export type User_Tel_NoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which User_Tel_No to fetch.
     */
    where?: User_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Tel_Nos to fetch.
     */
    orderBy?: User_Tel_NoOrderByWithRelationInput | User_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_Tel_Nos.
     */
    cursor?: User_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_Tel_Nos.
     */
    distinct?: User_Tel_NoScalarFieldEnum | User_Tel_NoScalarFieldEnum[]
  }

  /**
   * User_Tel_No findFirstOrThrow
   */
  export type User_Tel_NoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which User_Tel_No to fetch.
     */
    where?: User_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Tel_Nos to fetch.
     */
    orderBy?: User_Tel_NoOrderByWithRelationInput | User_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_Tel_Nos.
     */
    cursor?: User_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_Tel_Nos.
     */
    distinct?: User_Tel_NoScalarFieldEnum | User_Tel_NoScalarFieldEnum[]
  }

  /**
   * User_Tel_No findMany
   */
  export type User_Tel_NoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which User_Tel_Nos to fetch.
     */
    where?: User_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Tel_Nos to fetch.
     */
    orderBy?: User_Tel_NoOrderByWithRelationInput | User_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing User_Tel_Nos.
     */
    cursor?: User_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Tel_Nos.
     */
    skip?: number
    distinct?: User_Tel_NoScalarFieldEnum | User_Tel_NoScalarFieldEnum[]
  }

  /**
   * User_Tel_No create
   */
  export type User_Tel_NoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * The data needed to create a User_Tel_No.
     */
    data: XOR<User_Tel_NoCreateInput, User_Tel_NoUncheckedCreateInput>
  }

  /**
   * User_Tel_No createMany
   */
  export type User_Tel_NoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many User_Tel_Nos.
     */
    data: User_Tel_NoCreateManyInput | User_Tel_NoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User_Tel_No createManyAndReturn
   */
  export type User_Tel_NoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * The data used to create many User_Tel_Nos.
     */
    data: User_Tel_NoCreateManyInput | User_Tel_NoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User_Tel_No update
   */
  export type User_Tel_NoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * The data needed to update a User_Tel_No.
     */
    data: XOR<User_Tel_NoUpdateInput, User_Tel_NoUncheckedUpdateInput>
    /**
     * Choose, which User_Tel_No to update.
     */
    where: User_Tel_NoWhereUniqueInput
  }

  /**
   * User_Tel_No updateMany
   */
  export type User_Tel_NoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update User_Tel_Nos.
     */
    data: XOR<User_Tel_NoUpdateManyMutationInput, User_Tel_NoUncheckedUpdateManyInput>
    /**
     * Filter which User_Tel_Nos to update
     */
    where?: User_Tel_NoWhereInput
    /**
     * Limit how many User_Tel_Nos to update.
     */
    limit?: number
  }

  /**
   * User_Tel_No updateManyAndReturn
   */
  export type User_Tel_NoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * The data used to update User_Tel_Nos.
     */
    data: XOR<User_Tel_NoUpdateManyMutationInput, User_Tel_NoUncheckedUpdateManyInput>
    /**
     * Filter which User_Tel_Nos to update
     */
    where?: User_Tel_NoWhereInput
    /**
     * Limit how many User_Tel_Nos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User_Tel_No upsert
   */
  export type User_Tel_NoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * The filter to search for the User_Tel_No to update in case it exists.
     */
    where: User_Tel_NoWhereUniqueInput
    /**
     * In case the User_Tel_No found by the `where` argument doesn't exist, create a new User_Tel_No with this data.
     */
    create: XOR<User_Tel_NoCreateInput, User_Tel_NoUncheckedCreateInput>
    /**
     * In case the User_Tel_No was found with the provided `where` argument, update it with this data.
     */
    update: XOR<User_Tel_NoUpdateInput, User_Tel_NoUncheckedUpdateInput>
  }

  /**
   * User_Tel_No delete
   */
  export type User_Tel_NoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter which User_Tel_No to delete.
     */
    where: User_Tel_NoWhereUniqueInput
  }

  /**
   * User_Tel_No deleteMany
   */
  export type User_Tel_NoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_Tel_Nos to delete
     */
    where?: User_Tel_NoWhereInput
    /**
     * Limit how many User_Tel_Nos to delete.
     */
    limit?: number
  }

  /**
   * User_Tel_No without action
   */
  export type User_Tel_NoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Tel_No
     */
    select?: User_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User_Tel_No
     */
    omit?: User_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: User_Tel_NoInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    ReportID: string | null
    ReportDescription: string | null
    BookingID: string | null
    Attachment: string | null
    UserAccountID: string | null
    AdminAccountID: string | null
    Email: string | null
    TelNo: string | null
    PassengerName: string | null
  }

  export type ReportMaxAggregateOutputType = {
    ReportID: string | null
    ReportDescription: string | null
    BookingID: string | null
    Attachment: string | null
    UserAccountID: string | null
    AdminAccountID: string | null
    Email: string | null
    TelNo: string | null
    PassengerName: string | null
  }

  export type ReportCountAggregateOutputType = {
    ReportID: number
    ReportDescription: number
    BookingID: number
    Attachment: number
    UserAccountID: number
    AdminAccountID: number
    Email: number
    TelNo: number
    PassengerName: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    ReportID?: true
    ReportDescription?: true
    BookingID?: true
    Attachment?: true
    UserAccountID?: true
    AdminAccountID?: true
    Email?: true
    TelNo?: true
    PassengerName?: true
  }

  export type ReportMaxAggregateInputType = {
    ReportID?: true
    ReportDescription?: true
    BookingID?: true
    Attachment?: true
    UserAccountID?: true
    AdminAccountID?: true
    Email?: true
    TelNo?: true
    PassengerName?: true
  }

  export type ReportCountAggregateInputType = {
    ReportID?: true
    ReportDescription?: true
    BookingID?: true
    Attachment?: true
    UserAccountID?: true
    AdminAccountID?: true
    Email?: true
    TelNo?: true
    PassengerName?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment: string | null
    UserAccountID: string
    AdminAccountID: string
    Email: string
    TelNo: string
    PassengerName: string
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ReportID?: boolean
    ReportDescription?: boolean
    BookingID?: boolean
    Attachment?: boolean
    UserAccountID?: boolean
    AdminAccountID?: boolean
    Email?: boolean
    TelNo?: boolean
    PassengerName?: boolean
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ReportID?: boolean
    ReportDescription?: boolean
    BookingID?: boolean
    Attachment?: boolean
    UserAccountID?: boolean
    AdminAccountID?: boolean
    Email?: boolean
    TelNo?: boolean
    PassengerName?: boolean
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ReportID?: boolean
    ReportDescription?: boolean
    BookingID?: boolean
    Attachment?: boolean
    UserAccountID?: boolean
    AdminAccountID?: boolean
    Email?: boolean
    TelNo?: boolean
    PassengerName?: boolean
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    ReportID?: boolean
    ReportDescription?: boolean
    BookingID?: boolean
    Attachment?: boolean
    UserAccountID?: boolean
    AdminAccountID?: boolean
    Email?: boolean
    TelNo?: boolean
    PassengerName?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ReportID" | "ReportDescription" | "BookingID" | "Attachment" | "UserAccountID" | "AdminAccountID" | "Email" | "TelNo" | "PassengerName", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Report_ToDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      creator: Prisma.$Report_ToPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ReportID: string
      ReportDescription: string
      BookingID: string
      Attachment: string | null
      UserAccountID: string
      AdminAccountID: string
      Email: string
      TelNo: string
      PassengerName: string
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `ReportID`
     * const reportWithReportIDOnly = await prisma.report.findMany({ select: { ReportID: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `ReportID`
     * const reportWithReportIDOnly = await prisma.report.createManyAndReturn({
     *   select: { ReportID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `ReportID`
     * const reportWithReportIDOnly = await prisma.report.updateManyAndReturn({
     *   select: { ReportID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends Report_ToDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Report_ToDefaultArgs<ExtArgs>>): Prisma__Report_ToClient<$Result.GetResult<Prisma.$Report_ToPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly ReportID: FieldRef<"Report", 'String'>
    readonly ReportDescription: FieldRef<"Report", 'String'>
    readonly BookingID: FieldRef<"Report", 'String'>
    readonly Attachment: FieldRef<"Report", 'String'>
    readonly UserAccountID: FieldRef<"Report", 'String'>
    readonly AdminAccountID: FieldRef<"Report", 'String'>
    readonly Email: FieldRef<"Report", 'String'>
    readonly TelNo: FieldRef<"Report", 'String'>
    readonly PassengerName: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model Domestic_Ticket
   */

  export type AggregateDomestic_Ticket = {
    _count: Domestic_TicketCountAggregateOutputType | null
    _min: Domestic_TicketMinAggregateOutputType | null
    _max: Domestic_TicketMaxAggregateOutputType | null
  }

  export type Domestic_TicketMinAggregateOutputType = {
    TicketID: string | null
  }

  export type Domestic_TicketMaxAggregateOutputType = {
    TicketID: string | null
  }

  export type Domestic_TicketCountAggregateOutputType = {
    TicketID: number
    _all: number
  }


  export type Domestic_TicketMinAggregateInputType = {
    TicketID?: true
  }

  export type Domestic_TicketMaxAggregateInputType = {
    TicketID?: true
  }

  export type Domestic_TicketCountAggregateInputType = {
    TicketID?: true
    _all?: true
  }

  export type Domestic_TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domestic_Ticket to aggregate.
     */
    where?: Domestic_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domestic_Tickets to fetch.
     */
    orderBy?: Domestic_TicketOrderByWithRelationInput | Domestic_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Domestic_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domestic_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domestic_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Domestic_Tickets
    **/
    _count?: true | Domestic_TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Domestic_TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Domestic_TicketMaxAggregateInputType
  }

  export type GetDomestic_TicketAggregateType<T extends Domestic_TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateDomestic_Ticket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomestic_Ticket[P]>
      : GetScalarType<T[P], AggregateDomestic_Ticket[P]>
  }




  export type Domestic_TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Domestic_TicketWhereInput
    orderBy?: Domestic_TicketOrderByWithAggregationInput | Domestic_TicketOrderByWithAggregationInput[]
    by: Domestic_TicketScalarFieldEnum[] | Domestic_TicketScalarFieldEnum
    having?: Domestic_TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Domestic_TicketCountAggregateInputType | true
    _min?: Domestic_TicketMinAggregateInputType
    _max?: Domestic_TicketMaxAggregateInputType
  }

  export type Domestic_TicketGroupByOutputType = {
    TicketID: string
    _count: Domestic_TicketCountAggregateOutputType | null
    _min: Domestic_TicketMinAggregateOutputType | null
    _max: Domestic_TicketMaxAggregateOutputType | null
  }

  type GetDomestic_TicketGroupByPayload<T extends Domestic_TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Domestic_TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Domestic_TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Domestic_TicketGroupByOutputType[P]>
            : GetScalarType<T[P], Domestic_TicketGroupByOutputType[P]>
        }
      >
    >


  export type Domestic_TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domestic_Ticket"]>

  export type Domestic_TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domestic_Ticket"]>

  export type Domestic_TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domestic_Ticket"]>

  export type Domestic_TicketSelectScalar = {
    TicketID?: boolean
  }

  export type Domestic_TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TicketID", ExtArgs["result"]["domestic_Ticket"]>
  export type Domestic_TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type Domestic_TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type Domestic_TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $Domestic_TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Domestic_Ticket"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TicketID: string
    }, ExtArgs["result"]["domestic_Ticket"]>
    composites: {}
  }

  type Domestic_TicketGetPayload<S extends boolean | null | undefined | Domestic_TicketDefaultArgs> = $Result.GetResult<Prisma.$Domestic_TicketPayload, S>

  type Domestic_TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Domestic_TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Domestic_TicketCountAggregateInputType | true
    }

  export interface Domestic_TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Domestic_Ticket'], meta: { name: 'Domestic_Ticket' } }
    /**
     * Find zero or one Domestic_Ticket that matches the filter.
     * @param {Domestic_TicketFindUniqueArgs} args - Arguments to find a Domestic_Ticket
     * @example
     * // Get one Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Domestic_TicketFindUniqueArgs>(args: SelectSubset<T, Domestic_TicketFindUniqueArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Domestic_Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Domestic_TicketFindUniqueOrThrowArgs} args - Arguments to find a Domestic_Ticket
     * @example
     * // Get one Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Domestic_TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, Domestic_TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Domestic_Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketFindFirstArgs} args - Arguments to find a Domestic_Ticket
     * @example
     * // Get one Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Domestic_TicketFindFirstArgs>(args?: SelectSubset<T, Domestic_TicketFindFirstArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Domestic_Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketFindFirstOrThrowArgs} args - Arguments to find a Domestic_Ticket
     * @example
     * // Get one Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Domestic_TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, Domestic_TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Domestic_Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domestic_Tickets
     * const domestic_Tickets = await prisma.domestic_Ticket.findMany()
     * 
     * // Get first 10 Domestic_Tickets
     * const domestic_Tickets = await prisma.domestic_Ticket.findMany({ take: 10 })
     * 
     * // Only select the `TicketID`
     * const domestic_TicketWithTicketIDOnly = await prisma.domestic_Ticket.findMany({ select: { TicketID: true } })
     * 
     */
    findMany<T extends Domestic_TicketFindManyArgs>(args?: SelectSubset<T, Domestic_TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Domestic_Ticket.
     * @param {Domestic_TicketCreateArgs} args - Arguments to create a Domestic_Ticket.
     * @example
     * // Create one Domestic_Ticket
     * const Domestic_Ticket = await prisma.domestic_Ticket.create({
     *   data: {
     *     // ... data to create a Domestic_Ticket
     *   }
     * })
     * 
     */
    create<T extends Domestic_TicketCreateArgs>(args: SelectSubset<T, Domestic_TicketCreateArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Domestic_Tickets.
     * @param {Domestic_TicketCreateManyArgs} args - Arguments to create many Domestic_Tickets.
     * @example
     * // Create many Domestic_Tickets
     * const domestic_Ticket = await prisma.domestic_Ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Domestic_TicketCreateManyArgs>(args?: SelectSubset<T, Domestic_TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Domestic_Tickets and returns the data saved in the database.
     * @param {Domestic_TicketCreateManyAndReturnArgs} args - Arguments to create many Domestic_Tickets.
     * @example
     * // Create many Domestic_Tickets
     * const domestic_Ticket = await prisma.domestic_Ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Domestic_Tickets and only return the `TicketID`
     * const domestic_TicketWithTicketIDOnly = await prisma.domestic_Ticket.createManyAndReturn({
     *   select: { TicketID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Domestic_TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, Domestic_TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Domestic_Ticket.
     * @param {Domestic_TicketDeleteArgs} args - Arguments to delete one Domestic_Ticket.
     * @example
     * // Delete one Domestic_Ticket
     * const Domestic_Ticket = await prisma.domestic_Ticket.delete({
     *   where: {
     *     // ... filter to delete one Domestic_Ticket
     *   }
     * })
     * 
     */
    delete<T extends Domestic_TicketDeleteArgs>(args: SelectSubset<T, Domestic_TicketDeleteArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Domestic_Ticket.
     * @param {Domestic_TicketUpdateArgs} args - Arguments to update one Domestic_Ticket.
     * @example
     * // Update one Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Domestic_TicketUpdateArgs>(args: SelectSubset<T, Domestic_TicketUpdateArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Domestic_Tickets.
     * @param {Domestic_TicketDeleteManyArgs} args - Arguments to filter Domestic_Tickets to delete.
     * @example
     * // Delete a few Domestic_Tickets
     * const { count } = await prisma.domestic_Ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Domestic_TicketDeleteManyArgs>(args?: SelectSubset<T, Domestic_TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domestic_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domestic_Tickets
     * const domestic_Ticket = await prisma.domestic_Ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Domestic_TicketUpdateManyArgs>(args: SelectSubset<T, Domestic_TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domestic_Tickets and returns the data updated in the database.
     * @param {Domestic_TicketUpdateManyAndReturnArgs} args - Arguments to update many Domestic_Tickets.
     * @example
     * // Update many Domestic_Tickets
     * const domestic_Ticket = await prisma.domestic_Ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Domestic_Tickets and only return the `TicketID`
     * const domestic_TicketWithTicketIDOnly = await prisma.domestic_Ticket.updateManyAndReturn({
     *   select: { TicketID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Domestic_TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, Domestic_TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Domestic_Ticket.
     * @param {Domestic_TicketUpsertArgs} args - Arguments to update or create a Domestic_Ticket.
     * @example
     * // Update or create a Domestic_Ticket
     * const domestic_Ticket = await prisma.domestic_Ticket.upsert({
     *   create: {
     *     // ... data to create a Domestic_Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domestic_Ticket we want to update
     *   }
     * })
     */
    upsert<T extends Domestic_TicketUpsertArgs>(args: SelectSubset<T, Domestic_TicketUpsertArgs<ExtArgs>>): Prisma__Domestic_TicketClient<$Result.GetResult<Prisma.$Domestic_TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Domestic_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketCountArgs} args - Arguments to filter Domestic_Tickets to count.
     * @example
     * // Count the number of Domestic_Tickets
     * const count = await prisma.domestic_Ticket.count({
     *   where: {
     *     // ... the filter for the Domestic_Tickets we want to count
     *   }
     * })
    **/
    count<T extends Domestic_TicketCountArgs>(
      args?: Subset<T, Domestic_TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Domestic_TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domestic_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Domestic_TicketAggregateArgs>(args: Subset<T, Domestic_TicketAggregateArgs>): Prisma.PrismaPromise<GetDomestic_TicketAggregateType<T>>

    /**
     * Group by Domestic_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domestic_TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Domestic_TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Domestic_TicketGroupByArgs['orderBy'] }
        : { orderBy?: Domestic_TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Domestic_TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomestic_TicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Domestic_Ticket model
   */
  readonly fields: Domestic_TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Domestic_Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Domestic_TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Domestic_Ticket model
   */
  interface Domestic_TicketFieldRefs {
    readonly TicketID: FieldRef<"Domestic_Ticket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Domestic_Ticket findUnique
   */
  export type Domestic_TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Domestic_Ticket to fetch.
     */
    where: Domestic_TicketWhereUniqueInput
  }

  /**
   * Domestic_Ticket findUniqueOrThrow
   */
  export type Domestic_TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Domestic_Ticket to fetch.
     */
    where: Domestic_TicketWhereUniqueInput
  }

  /**
   * Domestic_Ticket findFirst
   */
  export type Domestic_TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Domestic_Ticket to fetch.
     */
    where?: Domestic_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domestic_Tickets to fetch.
     */
    orderBy?: Domestic_TicketOrderByWithRelationInput | Domestic_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domestic_Tickets.
     */
    cursor?: Domestic_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domestic_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domestic_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domestic_Tickets.
     */
    distinct?: Domestic_TicketScalarFieldEnum | Domestic_TicketScalarFieldEnum[]
  }

  /**
   * Domestic_Ticket findFirstOrThrow
   */
  export type Domestic_TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Domestic_Ticket to fetch.
     */
    where?: Domestic_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domestic_Tickets to fetch.
     */
    orderBy?: Domestic_TicketOrderByWithRelationInput | Domestic_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domestic_Tickets.
     */
    cursor?: Domestic_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domestic_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domestic_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domestic_Tickets.
     */
    distinct?: Domestic_TicketScalarFieldEnum | Domestic_TicketScalarFieldEnum[]
  }

  /**
   * Domestic_Ticket findMany
   */
  export type Domestic_TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Domestic_Tickets to fetch.
     */
    where?: Domestic_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domestic_Tickets to fetch.
     */
    orderBy?: Domestic_TicketOrderByWithRelationInput | Domestic_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Domestic_Tickets.
     */
    cursor?: Domestic_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domestic_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domestic_Tickets.
     */
    skip?: number
    distinct?: Domestic_TicketScalarFieldEnum | Domestic_TicketScalarFieldEnum[]
  }

  /**
   * Domestic_Ticket create
   */
  export type Domestic_TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Domestic_Ticket.
     */
    data: XOR<Domestic_TicketCreateInput, Domestic_TicketUncheckedCreateInput>
  }

  /**
   * Domestic_Ticket createMany
   */
  export type Domestic_TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Domestic_Tickets.
     */
    data: Domestic_TicketCreateManyInput | Domestic_TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Domestic_Ticket createManyAndReturn
   */
  export type Domestic_TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * The data used to create many Domestic_Tickets.
     */
    data: Domestic_TicketCreateManyInput | Domestic_TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Domestic_Ticket update
   */
  export type Domestic_TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Domestic_Ticket.
     */
    data: XOR<Domestic_TicketUpdateInput, Domestic_TicketUncheckedUpdateInput>
    /**
     * Choose, which Domestic_Ticket to update.
     */
    where: Domestic_TicketWhereUniqueInput
  }

  /**
   * Domestic_Ticket updateMany
   */
  export type Domestic_TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Domestic_Tickets.
     */
    data: XOR<Domestic_TicketUpdateManyMutationInput, Domestic_TicketUncheckedUpdateManyInput>
    /**
     * Filter which Domestic_Tickets to update
     */
    where?: Domestic_TicketWhereInput
    /**
     * Limit how many Domestic_Tickets to update.
     */
    limit?: number
  }

  /**
   * Domestic_Ticket updateManyAndReturn
   */
  export type Domestic_TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * The data used to update Domestic_Tickets.
     */
    data: XOR<Domestic_TicketUpdateManyMutationInput, Domestic_TicketUncheckedUpdateManyInput>
    /**
     * Filter which Domestic_Tickets to update
     */
    where?: Domestic_TicketWhereInput
    /**
     * Limit how many Domestic_Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Domestic_Ticket upsert
   */
  export type Domestic_TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Domestic_Ticket to update in case it exists.
     */
    where: Domestic_TicketWhereUniqueInput
    /**
     * In case the Domestic_Ticket found by the `where` argument doesn't exist, create a new Domestic_Ticket with this data.
     */
    create: XOR<Domestic_TicketCreateInput, Domestic_TicketUncheckedCreateInput>
    /**
     * In case the Domestic_Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Domestic_TicketUpdateInput, Domestic_TicketUncheckedUpdateInput>
  }

  /**
   * Domestic_Ticket delete
   */
  export type Domestic_TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
    /**
     * Filter which Domestic_Ticket to delete.
     */
    where: Domestic_TicketWhereUniqueInput
  }

  /**
   * Domestic_Ticket deleteMany
   */
  export type Domestic_TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domestic_Tickets to delete
     */
    where?: Domestic_TicketWhereInput
    /**
     * Limit how many Domestic_Tickets to delete.
     */
    limit?: number
  }

  /**
   * Domestic_Ticket without action
   */
  export type Domestic_TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domestic_Ticket
     */
    select?: Domestic_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domestic_Ticket
     */
    omit?: Domestic_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Domestic_TicketInclude<ExtArgs> | null
  }


  /**
   * Model International_Ticket
   */

  export type AggregateInternational_Ticket = {
    _count: International_TicketCountAggregateOutputType | null
    _min: International_TicketMinAggregateOutputType | null
    _max: International_TicketMaxAggregateOutputType | null
  }

  export type International_TicketMinAggregateOutputType = {
    TicketID: string | null
    PassportNo: string | null
    IssuedCountry: string | null
    PassportExpiry: Date | null
  }

  export type International_TicketMaxAggregateOutputType = {
    TicketID: string | null
    PassportNo: string | null
    IssuedCountry: string | null
    PassportExpiry: Date | null
  }

  export type International_TicketCountAggregateOutputType = {
    TicketID: number
    PassportNo: number
    IssuedCountry: number
    PassportExpiry: number
    _all: number
  }


  export type International_TicketMinAggregateInputType = {
    TicketID?: true
    PassportNo?: true
    IssuedCountry?: true
    PassportExpiry?: true
  }

  export type International_TicketMaxAggregateInputType = {
    TicketID?: true
    PassportNo?: true
    IssuedCountry?: true
    PassportExpiry?: true
  }

  export type International_TicketCountAggregateInputType = {
    TicketID?: true
    PassportNo?: true
    IssuedCountry?: true
    PassportExpiry?: true
    _all?: true
  }

  export type International_TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which International_Ticket to aggregate.
     */
    where?: International_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of International_Tickets to fetch.
     */
    orderBy?: International_TicketOrderByWithRelationInput | International_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: International_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` International_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` International_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned International_Tickets
    **/
    _count?: true | International_TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: International_TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: International_TicketMaxAggregateInputType
  }

  export type GetInternational_TicketAggregateType<T extends International_TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateInternational_Ticket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInternational_Ticket[P]>
      : GetScalarType<T[P], AggregateInternational_Ticket[P]>
  }




  export type International_TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: International_TicketWhereInput
    orderBy?: International_TicketOrderByWithAggregationInput | International_TicketOrderByWithAggregationInput[]
    by: International_TicketScalarFieldEnum[] | International_TicketScalarFieldEnum
    having?: International_TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: International_TicketCountAggregateInputType | true
    _min?: International_TicketMinAggregateInputType
    _max?: International_TicketMaxAggregateInputType
  }

  export type International_TicketGroupByOutputType = {
    TicketID: string
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date
    _count: International_TicketCountAggregateOutputType | null
    _min: International_TicketMinAggregateOutputType | null
    _max: International_TicketMaxAggregateOutputType | null
  }

  type GetInternational_TicketGroupByPayload<T extends International_TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<International_TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof International_TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], International_TicketGroupByOutputType[P]>
            : GetScalarType<T[P], International_TicketGroupByOutputType[P]>
        }
      >
    >


  export type International_TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PassportNo?: boolean
    IssuedCountry?: boolean
    PassportExpiry?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["international_Ticket"]>

  export type International_TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PassportNo?: boolean
    IssuedCountry?: boolean
    PassportExpiry?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["international_Ticket"]>

  export type International_TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PassportNo?: boolean
    IssuedCountry?: boolean
    PassportExpiry?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["international_Ticket"]>

  export type International_TicketSelectScalar = {
    TicketID?: boolean
    PassportNo?: boolean
    IssuedCountry?: boolean
    PassportExpiry?: boolean
  }

  export type International_TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TicketID" | "PassportNo" | "IssuedCountry" | "PassportExpiry", ExtArgs["result"]["international_Ticket"]>
  export type International_TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type International_TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type International_TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $International_TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "International_Ticket"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TicketID: string
      PassportNo: string
      IssuedCountry: string
      PassportExpiry: Date
    }, ExtArgs["result"]["international_Ticket"]>
    composites: {}
  }

  type International_TicketGetPayload<S extends boolean | null | undefined | International_TicketDefaultArgs> = $Result.GetResult<Prisma.$International_TicketPayload, S>

  type International_TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<International_TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: International_TicketCountAggregateInputType | true
    }

  export interface International_TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['International_Ticket'], meta: { name: 'International_Ticket' } }
    /**
     * Find zero or one International_Ticket that matches the filter.
     * @param {International_TicketFindUniqueArgs} args - Arguments to find a International_Ticket
     * @example
     * // Get one International_Ticket
     * const international_Ticket = await prisma.international_Ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends International_TicketFindUniqueArgs>(args: SelectSubset<T, International_TicketFindUniqueArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one International_Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {International_TicketFindUniqueOrThrowArgs} args - Arguments to find a International_Ticket
     * @example
     * // Get one International_Ticket
     * const international_Ticket = await prisma.international_Ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends International_TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, International_TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first International_Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketFindFirstArgs} args - Arguments to find a International_Ticket
     * @example
     * // Get one International_Ticket
     * const international_Ticket = await prisma.international_Ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends International_TicketFindFirstArgs>(args?: SelectSubset<T, International_TicketFindFirstArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first International_Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketFindFirstOrThrowArgs} args - Arguments to find a International_Ticket
     * @example
     * // Get one International_Ticket
     * const international_Ticket = await prisma.international_Ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends International_TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, International_TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more International_Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all International_Tickets
     * const international_Tickets = await prisma.international_Ticket.findMany()
     * 
     * // Get first 10 International_Tickets
     * const international_Tickets = await prisma.international_Ticket.findMany({ take: 10 })
     * 
     * // Only select the `TicketID`
     * const international_TicketWithTicketIDOnly = await prisma.international_Ticket.findMany({ select: { TicketID: true } })
     * 
     */
    findMany<T extends International_TicketFindManyArgs>(args?: SelectSubset<T, International_TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a International_Ticket.
     * @param {International_TicketCreateArgs} args - Arguments to create a International_Ticket.
     * @example
     * // Create one International_Ticket
     * const International_Ticket = await prisma.international_Ticket.create({
     *   data: {
     *     // ... data to create a International_Ticket
     *   }
     * })
     * 
     */
    create<T extends International_TicketCreateArgs>(args: SelectSubset<T, International_TicketCreateArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many International_Tickets.
     * @param {International_TicketCreateManyArgs} args - Arguments to create many International_Tickets.
     * @example
     * // Create many International_Tickets
     * const international_Ticket = await prisma.international_Ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends International_TicketCreateManyArgs>(args?: SelectSubset<T, International_TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many International_Tickets and returns the data saved in the database.
     * @param {International_TicketCreateManyAndReturnArgs} args - Arguments to create many International_Tickets.
     * @example
     * // Create many International_Tickets
     * const international_Ticket = await prisma.international_Ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many International_Tickets and only return the `TicketID`
     * const international_TicketWithTicketIDOnly = await prisma.international_Ticket.createManyAndReturn({
     *   select: { TicketID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends International_TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, International_TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a International_Ticket.
     * @param {International_TicketDeleteArgs} args - Arguments to delete one International_Ticket.
     * @example
     * // Delete one International_Ticket
     * const International_Ticket = await prisma.international_Ticket.delete({
     *   where: {
     *     // ... filter to delete one International_Ticket
     *   }
     * })
     * 
     */
    delete<T extends International_TicketDeleteArgs>(args: SelectSubset<T, International_TicketDeleteArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one International_Ticket.
     * @param {International_TicketUpdateArgs} args - Arguments to update one International_Ticket.
     * @example
     * // Update one International_Ticket
     * const international_Ticket = await prisma.international_Ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends International_TicketUpdateArgs>(args: SelectSubset<T, International_TicketUpdateArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more International_Tickets.
     * @param {International_TicketDeleteManyArgs} args - Arguments to filter International_Tickets to delete.
     * @example
     * // Delete a few International_Tickets
     * const { count } = await prisma.international_Ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends International_TicketDeleteManyArgs>(args?: SelectSubset<T, International_TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more International_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many International_Tickets
     * const international_Ticket = await prisma.international_Ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends International_TicketUpdateManyArgs>(args: SelectSubset<T, International_TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more International_Tickets and returns the data updated in the database.
     * @param {International_TicketUpdateManyAndReturnArgs} args - Arguments to update many International_Tickets.
     * @example
     * // Update many International_Tickets
     * const international_Ticket = await prisma.international_Ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more International_Tickets and only return the `TicketID`
     * const international_TicketWithTicketIDOnly = await prisma.international_Ticket.updateManyAndReturn({
     *   select: { TicketID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends International_TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, International_TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one International_Ticket.
     * @param {International_TicketUpsertArgs} args - Arguments to update or create a International_Ticket.
     * @example
     * // Update or create a International_Ticket
     * const international_Ticket = await prisma.international_Ticket.upsert({
     *   create: {
     *     // ... data to create a International_Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the International_Ticket we want to update
     *   }
     * })
     */
    upsert<T extends International_TicketUpsertArgs>(args: SelectSubset<T, International_TicketUpsertArgs<ExtArgs>>): Prisma__International_TicketClient<$Result.GetResult<Prisma.$International_TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of International_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketCountArgs} args - Arguments to filter International_Tickets to count.
     * @example
     * // Count the number of International_Tickets
     * const count = await prisma.international_Ticket.count({
     *   where: {
     *     // ... the filter for the International_Tickets we want to count
     *   }
     * })
    **/
    count<T extends International_TicketCountArgs>(
      args?: Subset<T, International_TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], International_TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a International_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends International_TicketAggregateArgs>(args: Subset<T, International_TicketAggregateArgs>): Prisma.PrismaPromise<GetInternational_TicketAggregateType<T>>

    /**
     * Group by International_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {International_TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends International_TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: International_TicketGroupByArgs['orderBy'] }
        : { orderBy?: International_TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, International_TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInternational_TicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the International_Ticket model
   */
  readonly fields: International_TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for International_Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__International_TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the International_Ticket model
   */
  interface International_TicketFieldRefs {
    readonly TicketID: FieldRef<"International_Ticket", 'String'>
    readonly PassportNo: FieldRef<"International_Ticket", 'String'>
    readonly IssuedCountry: FieldRef<"International_Ticket", 'String'>
    readonly PassportExpiry: FieldRef<"International_Ticket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * International_Ticket findUnique
   */
  export type International_TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter, which International_Ticket to fetch.
     */
    where: International_TicketWhereUniqueInput
  }

  /**
   * International_Ticket findUniqueOrThrow
   */
  export type International_TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter, which International_Ticket to fetch.
     */
    where: International_TicketWhereUniqueInput
  }

  /**
   * International_Ticket findFirst
   */
  export type International_TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter, which International_Ticket to fetch.
     */
    where?: International_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of International_Tickets to fetch.
     */
    orderBy?: International_TicketOrderByWithRelationInput | International_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for International_Tickets.
     */
    cursor?: International_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` International_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` International_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of International_Tickets.
     */
    distinct?: International_TicketScalarFieldEnum | International_TicketScalarFieldEnum[]
  }

  /**
   * International_Ticket findFirstOrThrow
   */
  export type International_TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter, which International_Ticket to fetch.
     */
    where?: International_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of International_Tickets to fetch.
     */
    orderBy?: International_TicketOrderByWithRelationInput | International_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for International_Tickets.
     */
    cursor?: International_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` International_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` International_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of International_Tickets.
     */
    distinct?: International_TicketScalarFieldEnum | International_TicketScalarFieldEnum[]
  }

  /**
   * International_Ticket findMany
   */
  export type International_TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter, which International_Tickets to fetch.
     */
    where?: International_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of International_Tickets to fetch.
     */
    orderBy?: International_TicketOrderByWithRelationInput | International_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing International_Tickets.
     */
    cursor?: International_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` International_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` International_Tickets.
     */
    skip?: number
    distinct?: International_TicketScalarFieldEnum | International_TicketScalarFieldEnum[]
  }

  /**
   * International_Ticket create
   */
  export type International_TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a International_Ticket.
     */
    data: XOR<International_TicketCreateInput, International_TicketUncheckedCreateInput>
  }

  /**
   * International_Ticket createMany
   */
  export type International_TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many International_Tickets.
     */
    data: International_TicketCreateManyInput | International_TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * International_Ticket createManyAndReturn
   */
  export type International_TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * The data used to create many International_Tickets.
     */
    data: International_TicketCreateManyInput | International_TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * International_Ticket update
   */
  export type International_TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a International_Ticket.
     */
    data: XOR<International_TicketUpdateInput, International_TicketUncheckedUpdateInput>
    /**
     * Choose, which International_Ticket to update.
     */
    where: International_TicketWhereUniqueInput
  }

  /**
   * International_Ticket updateMany
   */
  export type International_TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update International_Tickets.
     */
    data: XOR<International_TicketUpdateManyMutationInput, International_TicketUncheckedUpdateManyInput>
    /**
     * Filter which International_Tickets to update
     */
    where?: International_TicketWhereInput
    /**
     * Limit how many International_Tickets to update.
     */
    limit?: number
  }

  /**
   * International_Ticket updateManyAndReturn
   */
  export type International_TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * The data used to update International_Tickets.
     */
    data: XOR<International_TicketUpdateManyMutationInput, International_TicketUncheckedUpdateManyInput>
    /**
     * Filter which International_Tickets to update
     */
    where?: International_TicketWhereInput
    /**
     * Limit how many International_Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * International_Ticket upsert
   */
  export type International_TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the International_Ticket to update in case it exists.
     */
    where: International_TicketWhereUniqueInput
    /**
     * In case the International_Ticket found by the `where` argument doesn't exist, create a new International_Ticket with this data.
     */
    create: XOR<International_TicketCreateInput, International_TicketUncheckedCreateInput>
    /**
     * In case the International_Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<International_TicketUpdateInput, International_TicketUncheckedUpdateInput>
  }

  /**
   * International_Ticket delete
   */
  export type International_TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
    /**
     * Filter which International_Ticket to delete.
     */
    where: International_TicketWhereUniqueInput
  }

  /**
   * International_Ticket deleteMany
   */
  export type International_TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which International_Tickets to delete
     */
    where?: International_TicketWhereInput
    /**
     * Limit how many International_Tickets to delete.
     */
    limit?: number
  }

  /**
   * International_Ticket without action
   */
  export type International_TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the International_Ticket
     */
    select?: International_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the International_Ticket
     */
    omit?: International_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: International_TicketInclude<ExtArgs> | null
  }


  /**
   * Model Round_Trip_Ticket
   */

  export type AggregateRound_Trip_Ticket = {
    _count: Round_Trip_TicketCountAggregateOutputType | null
    _min: Round_Trip_TicketMinAggregateOutputType | null
    _max: Round_Trip_TicketMaxAggregateOutputType | null
  }

  export type Round_Trip_TicketMinAggregateOutputType = {
    TicketID: string | null
    TicketID2: string | null
  }

  export type Round_Trip_TicketMaxAggregateOutputType = {
    TicketID: string | null
    TicketID2: string | null
  }

  export type Round_Trip_TicketCountAggregateOutputType = {
    TicketID: number
    TicketID2: number
    _all: number
  }


  export type Round_Trip_TicketMinAggregateInputType = {
    TicketID?: true
    TicketID2?: true
  }

  export type Round_Trip_TicketMaxAggregateInputType = {
    TicketID?: true
    TicketID2?: true
  }

  export type Round_Trip_TicketCountAggregateInputType = {
    TicketID?: true
    TicketID2?: true
    _all?: true
  }

  export type Round_Trip_TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Round_Trip_Ticket to aggregate.
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Round_Trip_Tickets to fetch.
     */
    orderBy?: Round_Trip_TicketOrderByWithRelationInput | Round_Trip_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Round_Trip_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Round_Trip_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Round_Trip_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Round_Trip_Tickets
    **/
    _count?: true | Round_Trip_TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Round_Trip_TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Round_Trip_TicketMaxAggregateInputType
  }

  export type GetRound_Trip_TicketAggregateType<T extends Round_Trip_TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateRound_Trip_Ticket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRound_Trip_Ticket[P]>
      : GetScalarType<T[P], AggregateRound_Trip_Ticket[P]>
  }




  export type Round_Trip_TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Round_Trip_TicketWhereInput
    orderBy?: Round_Trip_TicketOrderByWithAggregationInput | Round_Trip_TicketOrderByWithAggregationInput[]
    by: Round_Trip_TicketScalarFieldEnum[] | Round_Trip_TicketScalarFieldEnum
    having?: Round_Trip_TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Round_Trip_TicketCountAggregateInputType | true
    _min?: Round_Trip_TicketMinAggregateInputType
    _max?: Round_Trip_TicketMaxAggregateInputType
  }

  export type Round_Trip_TicketGroupByOutputType = {
    TicketID: string
    TicketID2: string
    _count: Round_Trip_TicketCountAggregateOutputType | null
    _min: Round_Trip_TicketMinAggregateOutputType | null
    _max: Round_Trip_TicketMaxAggregateOutputType | null
  }

  type GetRound_Trip_TicketGroupByPayload<T extends Round_Trip_TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Round_Trip_TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Round_Trip_TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Round_Trip_TicketGroupByOutputType[P]>
            : GetScalarType<T[P], Round_Trip_TicketGroupByOutputType[P]>
        }
      >
    >


  export type Round_Trip_TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    TicketID2?: boolean
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["round_Trip_Ticket"]>

  export type Round_Trip_TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    TicketID2?: boolean
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["round_Trip_Ticket"]>

  export type Round_Trip_TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    TicketID2?: boolean
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["round_Trip_Ticket"]>

  export type Round_Trip_TicketSelectScalar = {
    TicketID?: boolean
    TicketID2?: boolean
  }

  export type Round_Trip_TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TicketID" | "TicketID2", ExtArgs["result"]["round_Trip_Ticket"]>
  export type Round_Trip_TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type Round_Trip_TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type Round_Trip_TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket1?: boolean | TicketDefaultArgs<ExtArgs>
    ticket2?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $Round_Trip_TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Round_Trip_Ticket"
    objects: {
      ticket1: Prisma.$TicketPayload<ExtArgs>
      ticket2: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TicketID: string
      TicketID2: string
    }, ExtArgs["result"]["round_Trip_Ticket"]>
    composites: {}
  }

  type Round_Trip_TicketGetPayload<S extends boolean | null | undefined | Round_Trip_TicketDefaultArgs> = $Result.GetResult<Prisma.$Round_Trip_TicketPayload, S>

  type Round_Trip_TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Round_Trip_TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Round_Trip_TicketCountAggregateInputType | true
    }

  export interface Round_Trip_TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Round_Trip_Ticket'], meta: { name: 'Round_Trip_Ticket' } }
    /**
     * Find zero or one Round_Trip_Ticket that matches the filter.
     * @param {Round_Trip_TicketFindUniqueArgs} args - Arguments to find a Round_Trip_Ticket
     * @example
     * // Get one Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Round_Trip_TicketFindUniqueArgs>(args: SelectSubset<T, Round_Trip_TicketFindUniqueArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Round_Trip_Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Round_Trip_TicketFindUniqueOrThrowArgs} args - Arguments to find a Round_Trip_Ticket
     * @example
     * // Get one Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Round_Trip_TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, Round_Trip_TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Round_Trip_Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketFindFirstArgs} args - Arguments to find a Round_Trip_Ticket
     * @example
     * // Get one Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Round_Trip_TicketFindFirstArgs>(args?: SelectSubset<T, Round_Trip_TicketFindFirstArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Round_Trip_Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketFindFirstOrThrowArgs} args - Arguments to find a Round_Trip_Ticket
     * @example
     * // Get one Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Round_Trip_TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, Round_Trip_TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Round_Trip_Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Round_Trip_Tickets
     * const round_Trip_Tickets = await prisma.round_Trip_Ticket.findMany()
     * 
     * // Get first 10 Round_Trip_Tickets
     * const round_Trip_Tickets = await prisma.round_Trip_Ticket.findMany({ take: 10 })
     * 
     * // Only select the `TicketID`
     * const round_Trip_TicketWithTicketIDOnly = await prisma.round_Trip_Ticket.findMany({ select: { TicketID: true } })
     * 
     */
    findMany<T extends Round_Trip_TicketFindManyArgs>(args?: SelectSubset<T, Round_Trip_TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Round_Trip_Ticket.
     * @param {Round_Trip_TicketCreateArgs} args - Arguments to create a Round_Trip_Ticket.
     * @example
     * // Create one Round_Trip_Ticket
     * const Round_Trip_Ticket = await prisma.round_Trip_Ticket.create({
     *   data: {
     *     // ... data to create a Round_Trip_Ticket
     *   }
     * })
     * 
     */
    create<T extends Round_Trip_TicketCreateArgs>(args: SelectSubset<T, Round_Trip_TicketCreateArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Round_Trip_Tickets.
     * @param {Round_Trip_TicketCreateManyArgs} args - Arguments to create many Round_Trip_Tickets.
     * @example
     * // Create many Round_Trip_Tickets
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Round_Trip_TicketCreateManyArgs>(args?: SelectSubset<T, Round_Trip_TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Round_Trip_Tickets and returns the data saved in the database.
     * @param {Round_Trip_TicketCreateManyAndReturnArgs} args - Arguments to create many Round_Trip_Tickets.
     * @example
     * // Create many Round_Trip_Tickets
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Round_Trip_Tickets and only return the `TicketID`
     * const round_Trip_TicketWithTicketIDOnly = await prisma.round_Trip_Ticket.createManyAndReturn({
     *   select: { TicketID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Round_Trip_TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, Round_Trip_TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Round_Trip_Ticket.
     * @param {Round_Trip_TicketDeleteArgs} args - Arguments to delete one Round_Trip_Ticket.
     * @example
     * // Delete one Round_Trip_Ticket
     * const Round_Trip_Ticket = await prisma.round_Trip_Ticket.delete({
     *   where: {
     *     // ... filter to delete one Round_Trip_Ticket
     *   }
     * })
     * 
     */
    delete<T extends Round_Trip_TicketDeleteArgs>(args: SelectSubset<T, Round_Trip_TicketDeleteArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Round_Trip_Ticket.
     * @param {Round_Trip_TicketUpdateArgs} args - Arguments to update one Round_Trip_Ticket.
     * @example
     * // Update one Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Round_Trip_TicketUpdateArgs>(args: SelectSubset<T, Round_Trip_TicketUpdateArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Round_Trip_Tickets.
     * @param {Round_Trip_TicketDeleteManyArgs} args - Arguments to filter Round_Trip_Tickets to delete.
     * @example
     * // Delete a few Round_Trip_Tickets
     * const { count } = await prisma.round_Trip_Ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Round_Trip_TicketDeleteManyArgs>(args?: SelectSubset<T, Round_Trip_TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Round_Trip_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Round_Trip_Tickets
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Round_Trip_TicketUpdateManyArgs>(args: SelectSubset<T, Round_Trip_TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Round_Trip_Tickets and returns the data updated in the database.
     * @param {Round_Trip_TicketUpdateManyAndReturnArgs} args - Arguments to update many Round_Trip_Tickets.
     * @example
     * // Update many Round_Trip_Tickets
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Round_Trip_Tickets and only return the `TicketID`
     * const round_Trip_TicketWithTicketIDOnly = await prisma.round_Trip_Ticket.updateManyAndReturn({
     *   select: { TicketID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Round_Trip_TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, Round_Trip_TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Round_Trip_Ticket.
     * @param {Round_Trip_TicketUpsertArgs} args - Arguments to update or create a Round_Trip_Ticket.
     * @example
     * // Update or create a Round_Trip_Ticket
     * const round_Trip_Ticket = await prisma.round_Trip_Ticket.upsert({
     *   create: {
     *     // ... data to create a Round_Trip_Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Round_Trip_Ticket we want to update
     *   }
     * })
     */
    upsert<T extends Round_Trip_TicketUpsertArgs>(args: SelectSubset<T, Round_Trip_TicketUpsertArgs<ExtArgs>>): Prisma__Round_Trip_TicketClient<$Result.GetResult<Prisma.$Round_Trip_TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Round_Trip_Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketCountArgs} args - Arguments to filter Round_Trip_Tickets to count.
     * @example
     * // Count the number of Round_Trip_Tickets
     * const count = await prisma.round_Trip_Ticket.count({
     *   where: {
     *     // ... the filter for the Round_Trip_Tickets we want to count
     *   }
     * })
    **/
    count<T extends Round_Trip_TicketCountArgs>(
      args?: Subset<T, Round_Trip_TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Round_Trip_TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Round_Trip_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Round_Trip_TicketAggregateArgs>(args: Subset<T, Round_Trip_TicketAggregateArgs>): Prisma.PrismaPromise<GetRound_Trip_TicketAggregateType<T>>

    /**
     * Group by Round_Trip_Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Round_Trip_TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Round_Trip_TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Round_Trip_TicketGroupByArgs['orderBy'] }
        : { orderBy?: Round_Trip_TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Round_Trip_TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRound_Trip_TicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Round_Trip_Ticket model
   */
  readonly fields: Round_Trip_TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Round_Trip_Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Round_Trip_TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket1<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket2<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Round_Trip_Ticket model
   */
  interface Round_Trip_TicketFieldRefs {
    readonly TicketID: FieldRef<"Round_Trip_Ticket", 'String'>
    readonly TicketID2: FieldRef<"Round_Trip_Ticket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Round_Trip_Ticket findUnique
   */
  export type Round_Trip_TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Round_Trip_Ticket to fetch.
     */
    where: Round_Trip_TicketWhereUniqueInput
  }

  /**
   * Round_Trip_Ticket findUniqueOrThrow
   */
  export type Round_Trip_TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Round_Trip_Ticket to fetch.
     */
    where: Round_Trip_TicketWhereUniqueInput
  }

  /**
   * Round_Trip_Ticket findFirst
   */
  export type Round_Trip_TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Round_Trip_Ticket to fetch.
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Round_Trip_Tickets to fetch.
     */
    orderBy?: Round_Trip_TicketOrderByWithRelationInput | Round_Trip_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Round_Trip_Tickets.
     */
    cursor?: Round_Trip_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Round_Trip_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Round_Trip_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Round_Trip_Tickets.
     */
    distinct?: Round_Trip_TicketScalarFieldEnum | Round_Trip_TicketScalarFieldEnum[]
  }

  /**
   * Round_Trip_Ticket findFirstOrThrow
   */
  export type Round_Trip_TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Round_Trip_Ticket to fetch.
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Round_Trip_Tickets to fetch.
     */
    orderBy?: Round_Trip_TicketOrderByWithRelationInput | Round_Trip_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Round_Trip_Tickets.
     */
    cursor?: Round_Trip_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Round_Trip_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Round_Trip_Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Round_Trip_Tickets.
     */
    distinct?: Round_Trip_TicketScalarFieldEnum | Round_Trip_TicketScalarFieldEnum[]
  }

  /**
   * Round_Trip_Ticket findMany
   */
  export type Round_Trip_TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter, which Round_Trip_Tickets to fetch.
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Round_Trip_Tickets to fetch.
     */
    orderBy?: Round_Trip_TicketOrderByWithRelationInput | Round_Trip_TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Round_Trip_Tickets.
     */
    cursor?: Round_Trip_TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Round_Trip_Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Round_Trip_Tickets.
     */
    skip?: number
    distinct?: Round_Trip_TicketScalarFieldEnum | Round_Trip_TicketScalarFieldEnum[]
  }

  /**
   * Round_Trip_Ticket create
   */
  export type Round_Trip_TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Round_Trip_Ticket.
     */
    data: XOR<Round_Trip_TicketCreateInput, Round_Trip_TicketUncheckedCreateInput>
  }

  /**
   * Round_Trip_Ticket createMany
   */
  export type Round_Trip_TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Round_Trip_Tickets.
     */
    data: Round_Trip_TicketCreateManyInput | Round_Trip_TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Round_Trip_Ticket createManyAndReturn
   */
  export type Round_Trip_TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * The data used to create many Round_Trip_Tickets.
     */
    data: Round_Trip_TicketCreateManyInput | Round_Trip_TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Round_Trip_Ticket update
   */
  export type Round_Trip_TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Round_Trip_Ticket.
     */
    data: XOR<Round_Trip_TicketUpdateInput, Round_Trip_TicketUncheckedUpdateInput>
    /**
     * Choose, which Round_Trip_Ticket to update.
     */
    where: Round_Trip_TicketWhereUniqueInput
  }

  /**
   * Round_Trip_Ticket updateMany
   */
  export type Round_Trip_TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Round_Trip_Tickets.
     */
    data: XOR<Round_Trip_TicketUpdateManyMutationInput, Round_Trip_TicketUncheckedUpdateManyInput>
    /**
     * Filter which Round_Trip_Tickets to update
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * Limit how many Round_Trip_Tickets to update.
     */
    limit?: number
  }

  /**
   * Round_Trip_Ticket updateManyAndReturn
   */
  export type Round_Trip_TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * The data used to update Round_Trip_Tickets.
     */
    data: XOR<Round_Trip_TicketUpdateManyMutationInput, Round_Trip_TicketUncheckedUpdateManyInput>
    /**
     * Filter which Round_Trip_Tickets to update
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * Limit how many Round_Trip_Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Round_Trip_Ticket upsert
   */
  export type Round_Trip_TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Round_Trip_Ticket to update in case it exists.
     */
    where: Round_Trip_TicketWhereUniqueInput
    /**
     * In case the Round_Trip_Ticket found by the `where` argument doesn't exist, create a new Round_Trip_Ticket with this data.
     */
    create: XOR<Round_Trip_TicketCreateInput, Round_Trip_TicketUncheckedCreateInput>
    /**
     * In case the Round_Trip_Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Round_Trip_TicketUpdateInput, Round_Trip_TicketUncheckedUpdateInput>
  }

  /**
   * Round_Trip_Ticket delete
   */
  export type Round_Trip_TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
    /**
     * Filter which Round_Trip_Ticket to delete.
     */
    where: Round_Trip_TicketWhereUniqueInput
  }

  /**
   * Round_Trip_Ticket deleteMany
   */
  export type Round_Trip_TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Round_Trip_Tickets to delete
     */
    where?: Round_Trip_TicketWhereInput
    /**
     * Limit how many Round_Trip_Tickets to delete.
     */
    limit?: number
  }

  /**
   * Round_Trip_Ticket without action
   */
  export type Round_Trip_TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round_Trip_Ticket
     */
    select?: Round_Trip_TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round_Trip_Ticket
     */
    omit?: Round_Trip_TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Round_Trip_TicketInclude<ExtArgs> | null
  }


  /**
   * Model Purchase
   */

  export type AggregatePurchase = {
    _count: PurchaseCountAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseMinAggregateOutputType = {
    TicketID: string | null
    PaymentID: string | null
    UserAccountID: string | null
  }

  export type PurchaseMaxAggregateOutputType = {
    TicketID: string | null
    PaymentID: string | null
    UserAccountID: string | null
  }

  export type PurchaseCountAggregateOutputType = {
    TicketID: number
    PaymentID: number
    UserAccountID: number
    _all: number
  }


  export type PurchaseMinAggregateInputType = {
    TicketID?: true
    PaymentID?: true
    UserAccountID?: true
  }

  export type PurchaseMaxAggregateInputType = {
    TicketID?: true
    PaymentID?: true
    UserAccountID?: true
  }

  export type PurchaseCountAggregateInputType = {
    TicketID?: true
    PaymentID?: true
    UserAccountID?: true
    _all?: true
  }

  export type PurchaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchase to aggregate.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    _count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }




  export type PurchaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithAggregationInput | PurchaseOrderByWithAggregationInput[]
    by: PurchaseScalarFieldEnum[] | PurchaseScalarFieldEnum
    having?: PurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseCountAggregateInputType | true
    _min?: PurchaseMinAggregateInputType
    _max?: PurchaseMaxAggregateInputType
  }

  export type PurchaseGroupByOutputType = {
    TicketID: string
    PaymentID: string
    UserAccountID: string
    _count: PurchaseCountAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  type GetPurchaseGroupByPayload<T extends PurchaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PaymentID?: boolean
    UserAccountID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PaymentID?: boolean
    UserAccountID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TicketID?: boolean
    PaymentID?: boolean
    UserAccountID?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectScalar = {
    TicketID?: boolean
    PaymentID?: boolean
    UserAccountID?: boolean
  }

  export type PurchaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TicketID" | "PaymentID" | "UserAccountID", ExtArgs["result"]["purchase"]>
  export type PurchaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PurchaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PurchaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PurchasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Purchase"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TicketID: string
      PaymentID: string
      UserAccountID: string
    }, ExtArgs["result"]["purchase"]>
    composites: {}
  }

  type PurchaseGetPayload<S extends boolean | null | undefined | PurchaseDefaultArgs> = $Result.GetResult<Prisma.$PurchasePayload, S>

  type PurchaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PurchaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PurchaseCountAggregateInputType | true
    }

  export interface PurchaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Purchase'], meta: { name: 'Purchase' } }
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseFindUniqueArgs>(args: SelectSubset<T, PurchaseFindUniqueArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Purchase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PurchaseFindUniqueOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseFindFirstArgs>(args?: SelectSubset<T, PurchaseFindFirstArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Purchase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `TicketID`
     * const purchaseWithTicketIDOnly = await prisma.purchase.findMany({ select: { TicketID: true } })
     * 
     */
    findMany<T extends PurchaseFindManyArgs>(args?: SelectSubset<T, PurchaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
     */
    create<T extends PurchaseCreateArgs>(args: SelectSubset<T, PurchaseCreateArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Purchases.
     * @param {PurchaseCreateManyArgs} args - Arguments to create many Purchases.
     * @example
     * // Create many Purchases
     * const purchase = await prisma.purchase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseCreateManyArgs>(args?: SelectSubset<T, PurchaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Purchases and returns the data saved in the database.
     * @param {PurchaseCreateManyAndReturnArgs} args - Arguments to create many Purchases.
     * @example
     * // Create many Purchases
     * const purchase = await prisma.purchase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Purchases and only return the `TicketID`
     * const purchaseWithTicketIDOnly = await prisma.purchase.createManyAndReturn({
     *   select: { TicketID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
     */
    delete<T extends PurchaseDeleteArgs>(args: SelectSubset<T, PurchaseDeleteArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseUpdateArgs>(args: SelectSubset<T, PurchaseUpdateArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseDeleteManyArgs>(args?: SelectSubset<T, PurchaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseUpdateManyArgs>(args: SelectSubset<T, PurchaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases and returns the data updated in the database.
     * @param {PurchaseUpdateManyAndReturnArgs} args - Arguments to update many Purchases.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Purchases and only return the `TicketID`
     * const purchaseWithTicketIDOnly = await prisma.purchase.updateManyAndReturn({
     *   select: { TicketID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PurchaseUpdateManyAndReturnArgs>(args: SelectSubset<T, PurchaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseUpsertArgs>(args: SelectSubset<T, PurchaseUpsertArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): Prisma.PrismaPromise<GetPurchaseAggregateType<T>>

    /**
     * Group by Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Purchase model
   */
  readonly fields: PurchaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Purchase model
   */
  interface PurchaseFieldRefs {
    readonly TicketID: FieldRef<"Purchase", 'String'>
    readonly PaymentID: FieldRef<"Purchase", 'String'>
    readonly UserAccountID: FieldRef<"Purchase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findUniqueOrThrow
   */
  export type PurchaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findFirstOrThrow
   */
  export type PurchaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchases to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase create
   */
  export type PurchaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Purchase.
     */
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }

  /**
   * Purchase createMany
   */
  export type PurchaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Purchases.
     */
    data: PurchaseCreateManyInput | PurchaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Purchase createManyAndReturn
   */
  export type PurchaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * The data used to create many Purchases.
     */
    data: PurchaseCreateManyInput | PurchaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Purchase.
     */
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Purchases.
     */
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to update.
     */
    limit?: number
  }

  /**
   * Purchase updateManyAndReturn
   */
  export type PurchaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * The data used to update Purchases.
     */
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Purchase to update in case it exists.
     */
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
     */
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }

  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter which Purchase to delete.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchases to delete
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to delete.
     */
    limit?: number
  }

  /**
   * Purchase without action
   */
  export type PurchaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    Amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    Amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    PaymentID: string | null
    PaymentDateTime: Date | null
    PaymentMethod: string | null
    TransactionStatus: string | null
    Amount: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    PaymentID: string | null
    PaymentDateTime: Date | null
    PaymentMethod: string | null
    TransactionStatus: string | null
    Amount: number | null
  }

  export type PaymentCountAggregateOutputType = {
    PaymentID: number
    PaymentDateTime: number
    PaymentMethod: number
    TransactionStatus: number
    Amount: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    Amount?: true
  }

  export type PaymentSumAggregateInputType = {
    Amount?: true
  }

  export type PaymentMinAggregateInputType = {
    PaymentID?: true
    PaymentDateTime?: true
    PaymentMethod?: true
    TransactionStatus?: true
    Amount?: true
  }

  export type PaymentMaxAggregateInputType = {
    PaymentID?: true
    PaymentDateTime?: true
    PaymentMethod?: true
    TransactionStatus?: true
    Amount?: true
  }

  export type PaymentCountAggregateInputType = {
    PaymentID?: true
    PaymentDateTime?: true
    PaymentMethod?: true
    TransactionStatus?: true
    Amount?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    PaymentID: string
    PaymentDateTime: Date
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PaymentID?: boolean
    PaymentDateTime?: boolean
    PaymentMethod?: boolean
    TransactionStatus?: boolean
    Amount?: boolean
    purchase?: boolean | Payment$purchaseArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PaymentID?: boolean
    PaymentDateTime?: boolean
    PaymentMethod?: boolean
    TransactionStatus?: boolean
    Amount?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PaymentID?: boolean
    PaymentDateTime?: boolean
    PaymentMethod?: boolean
    TransactionStatus?: boolean
    Amount?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    PaymentID?: boolean
    PaymentDateTime?: boolean
    PaymentMethod?: boolean
    TransactionStatus?: boolean
    Amount?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"PaymentID" | "PaymentDateTime" | "PaymentMethod" | "TransactionStatus" | "Amount", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchase?: boolean | Payment$purchaseArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      purchase: Prisma.$PurchasePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      PaymentID: string
      PaymentDateTime: Date
      PaymentMethod: string
      TransactionStatus: string
      Amount: number
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `PaymentID`
     * const paymentWithPaymentIDOnly = await prisma.payment.findMany({ select: { PaymentID: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `PaymentID`
     * const paymentWithPaymentIDOnly = await prisma.payment.createManyAndReturn({
     *   select: { PaymentID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `PaymentID`
     * const paymentWithPaymentIDOnly = await prisma.payment.updateManyAndReturn({
     *   select: { PaymentID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    purchase<T extends Payment$purchaseArgs<ExtArgs> = {}>(args?: Subset<T, Payment$purchaseArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly PaymentID: FieldRef<"Payment", 'String'>
    readonly PaymentDateTime: FieldRef<"Payment", 'DateTime'>
    readonly PaymentMethod: FieldRef<"Payment", 'String'>
    readonly TransactionStatus: FieldRef<"Payment", 'String'>
    readonly Amount: FieldRef<"Payment", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.purchase
   */
  export type Payment$purchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Airline_Tel_No
   */

  export type AggregateAirline_Tel_No = {
    _count: Airline_Tel_NoCountAggregateOutputType | null
    _min: Airline_Tel_NoMinAggregateOutputType | null
    _max: Airline_Tel_NoMaxAggregateOutputType | null
  }

  export type Airline_Tel_NoMinAggregateOutputType = {
    TelNo: string | null
    AirlineName: string | null
  }

  export type Airline_Tel_NoMaxAggregateOutputType = {
    TelNo: string | null
    AirlineName: string | null
  }

  export type Airline_Tel_NoCountAggregateOutputType = {
    TelNo: number
    AirlineName: number
    _all: number
  }


  export type Airline_Tel_NoMinAggregateInputType = {
    TelNo?: true
    AirlineName?: true
  }

  export type Airline_Tel_NoMaxAggregateInputType = {
    TelNo?: true
    AirlineName?: true
  }

  export type Airline_Tel_NoCountAggregateInputType = {
    TelNo?: true
    AirlineName?: true
    _all?: true
  }

  export type Airline_Tel_NoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airline_Tel_No to aggregate.
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Tel_Nos to fetch.
     */
    orderBy?: Airline_Tel_NoOrderByWithRelationInput | Airline_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Airline_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Airline_Tel_Nos
    **/
    _count?: true | Airline_Tel_NoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Airline_Tel_NoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Airline_Tel_NoMaxAggregateInputType
  }

  export type GetAirline_Tel_NoAggregateType<T extends Airline_Tel_NoAggregateArgs> = {
        [P in keyof T & keyof AggregateAirline_Tel_No]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAirline_Tel_No[P]>
      : GetScalarType<T[P], AggregateAirline_Tel_No[P]>
  }




  export type Airline_Tel_NoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Airline_Tel_NoWhereInput
    orderBy?: Airline_Tel_NoOrderByWithAggregationInput | Airline_Tel_NoOrderByWithAggregationInput[]
    by: Airline_Tel_NoScalarFieldEnum[] | Airline_Tel_NoScalarFieldEnum
    having?: Airline_Tel_NoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Airline_Tel_NoCountAggregateInputType | true
    _min?: Airline_Tel_NoMinAggregateInputType
    _max?: Airline_Tel_NoMaxAggregateInputType
  }

  export type Airline_Tel_NoGroupByOutputType = {
    TelNo: string
    AirlineName: string
    _count: Airline_Tel_NoCountAggregateOutputType | null
    _min: Airline_Tel_NoMinAggregateOutputType | null
    _max: Airline_Tel_NoMaxAggregateOutputType | null
  }

  type GetAirline_Tel_NoGroupByPayload<T extends Airline_Tel_NoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Airline_Tel_NoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Airline_Tel_NoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Airline_Tel_NoGroupByOutputType[P]>
            : GetScalarType<T[P], Airline_Tel_NoGroupByOutputType[P]>
        }
      >
    >


  export type Airline_Tel_NoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TelNo?: boolean
    AirlineName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Tel_No"]>

  export type Airline_Tel_NoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TelNo?: boolean
    AirlineName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Tel_No"]>

  export type Airline_Tel_NoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TelNo?: boolean
    AirlineName?: boolean
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["airline_Tel_No"]>

  export type Airline_Tel_NoSelectScalar = {
    TelNo?: boolean
    AirlineName?: boolean
  }

  export type Airline_Tel_NoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TelNo" | "AirlineName", ExtArgs["result"]["airline_Tel_No"]>
  export type Airline_Tel_NoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type Airline_Tel_NoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }
  export type Airline_Tel_NoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    airline?: boolean | AirlineDefaultArgs<ExtArgs>
  }

  export type $Airline_Tel_NoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Airline_Tel_No"
    objects: {
      airline: Prisma.$AirlinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TelNo: string
      AirlineName: string
    }, ExtArgs["result"]["airline_Tel_No"]>
    composites: {}
  }

  type Airline_Tel_NoGetPayload<S extends boolean | null | undefined | Airline_Tel_NoDefaultArgs> = $Result.GetResult<Prisma.$Airline_Tel_NoPayload, S>

  type Airline_Tel_NoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Airline_Tel_NoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Airline_Tel_NoCountAggregateInputType | true
    }

  export interface Airline_Tel_NoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Airline_Tel_No'], meta: { name: 'Airline_Tel_No' } }
    /**
     * Find zero or one Airline_Tel_No that matches the filter.
     * @param {Airline_Tel_NoFindUniqueArgs} args - Arguments to find a Airline_Tel_No
     * @example
     * // Get one Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Airline_Tel_NoFindUniqueArgs>(args: SelectSubset<T, Airline_Tel_NoFindUniqueArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Airline_Tel_No that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Airline_Tel_NoFindUniqueOrThrowArgs} args - Arguments to find a Airline_Tel_No
     * @example
     * // Get one Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Airline_Tel_NoFindUniqueOrThrowArgs>(args: SelectSubset<T, Airline_Tel_NoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline_Tel_No that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoFindFirstArgs} args - Arguments to find a Airline_Tel_No
     * @example
     * // Get one Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Airline_Tel_NoFindFirstArgs>(args?: SelectSubset<T, Airline_Tel_NoFindFirstArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Airline_Tel_No that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoFindFirstOrThrowArgs} args - Arguments to find a Airline_Tel_No
     * @example
     * // Get one Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Airline_Tel_NoFindFirstOrThrowArgs>(args?: SelectSubset<T, Airline_Tel_NoFindFirstOrThrowArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Airline_Tel_Nos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Airline_Tel_Nos
     * const airline_Tel_Nos = await prisma.airline_Tel_No.findMany()
     * 
     * // Get first 10 Airline_Tel_Nos
     * const airline_Tel_Nos = await prisma.airline_Tel_No.findMany({ take: 10 })
     * 
     * // Only select the `TelNo`
     * const airline_Tel_NoWithTelNoOnly = await prisma.airline_Tel_No.findMany({ select: { TelNo: true } })
     * 
     */
    findMany<T extends Airline_Tel_NoFindManyArgs>(args?: SelectSubset<T, Airline_Tel_NoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Airline_Tel_No.
     * @param {Airline_Tel_NoCreateArgs} args - Arguments to create a Airline_Tel_No.
     * @example
     * // Create one Airline_Tel_No
     * const Airline_Tel_No = await prisma.airline_Tel_No.create({
     *   data: {
     *     // ... data to create a Airline_Tel_No
     *   }
     * })
     * 
     */
    create<T extends Airline_Tel_NoCreateArgs>(args: SelectSubset<T, Airline_Tel_NoCreateArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Airline_Tel_Nos.
     * @param {Airline_Tel_NoCreateManyArgs} args - Arguments to create many Airline_Tel_Nos.
     * @example
     * // Create many Airline_Tel_Nos
     * const airline_Tel_No = await prisma.airline_Tel_No.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Airline_Tel_NoCreateManyArgs>(args?: SelectSubset<T, Airline_Tel_NoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Airline_Tel_Nos and returns the data saved in the database.
     * @param {Airline_Tel_NoCreateManyAndReturnArgs} args - Arguments to create many Airline_Tel_Nos.
     * @example
     * // Create many Airline_Tel_Nos
     * const airline_Tel_No = await prisma.airline_Tel_No.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Airline_Tel_Nos and only return the `TelNo`
     * const airline_Tel_NoWithTelNoOnly = await prisma.airline_Tel_No.createManyAndReturn({
     *   select: { TelNo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Airline_Tel_NoCreateManyAndReturnArgs>(args?: SelectSubset<T, Airline_Tel_NoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Airline_Tel_No.
     * @param {Airline_Tel_NoDeleteArgs} args - Arguments to delete one Airline_Tel_No.
     * @example
     * // Delete one Airline_Tel_No
     * const Airline_Tel_No = await prisma.airline_Tel_No.delete({
     *   where: {
     *     // ... filter to delete one Airline_Tel_No
     *   }
     * })
     * 
     */
    delete<T extends Airline_Tel_NoDeleteArgs>(args: SelectSubset<T, Airline_Tel_NoDeleteArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Airline_Tel_No.
     * @param {Airline_Tel_NoUpdateArgs} args - Arguments to update one Airline_Tel_No.
     * @example
     * // Update one Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Airline_Tel_NoUpdateArgs>(args: SelectSubset<T, Airline_Tel_NoUpdateArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Airline_Tel_Nos.
     * @param {Airline_Tel_NoDeleteManyArgs} args - Arguments to filter Airline_Tel_Nos to delete.
     * @example
     * // Delete a few Airline_Tel_Nos
     * const { count } = await prisma.airline_Tel_No.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Airline_Tel_NoDeleteManyArgs>(args?: SelectSubset<T, Airline_Tel_NoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airline_Tel_Nos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Airline_Tel_Nos
     * const airline_Tel_No = await prisma.airline_Tel_No.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Airline_Tel_NoUpdateManyArgs>(args: SelectSubset<T, Airline_Tel_NoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Airline_Tel_Nos and returns the data updated in the database.
     * @param {Airline_Tel_NoUpdateManyAndReturnArgs} args - Arguments to update many Airline_Tel_Nos.
     * @example
     * // Update many Airline_Tel_Nos
     * const airline_Tel_No = await prisma.airline_Tel_No.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Airline_Tel_Nos and only return the `TelNo`
     * const airline_Tel_NoWithTelNoOnly = await prisma.airline_Tel_No.updateManyAndReturn({
     *   select: { TelNo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Airline_Tel_NoUpdateManyAndReturnArgs>(args: SelectSubset<T, Airline_Tel_NoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Airline_Tel_No.
     * @param {Airline_Tel_NoUpsertArgs} args - Arguments to update or create a Airline_Tel_No.
     * @example
     * // Update or create a Airline_Tel_No
     * const airline_Tel_No = await prisma.airline_Tel_No.upsert({
     *   create: {
     *     // ... data to create a Airline_Tel_No
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Airline_Tel_No we want to update
     *   }
     * })
     */
    upsert<T extends Airline_Tel_NoUpsertArgs>(args: SelectSubset<T, Airline_Tel_NoUpsertArgs<ExtArgs>>): Prisma__Airline_Tel_NoClient<$Result.GetResult<Prisma.$Airline_Tel_NoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Airline_Tel_Nos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoCountArgs} args - Arguments to filter Airline_Tel_Nos to count.
     * @example
     * // Count the number of Airline_Tel_Nos
     * const count = await prisma.airline_Tel_No.count({
     *   where: {
     *     // ... the filter for the Airline_Tel_Nos we want to count
     *   }
     * })
    **/
    count<T extends Airline_Tel_NoCountArgs>(
      args?: Subset<T, Airline_Tel_NoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Airline_Tel_NoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Airline_Tel_No.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Airline_Tel_NoAggregateArgs>(args: Subset<T, Airline_Tel_NoAggregateArgs>): Prisma.PrismaPromise<GetAirline_Tel_NoAggregateType<T>>

    /**
     * Group by Airline_Tel_No.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Airline_Tel_NoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Airline_Tel_NoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Airline_Tel_NoGroupByArgs['orderBy'] }
        : { orderBy?: Airline_Tel_NoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Airline_Tel_NoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAirline_Tel_NoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Airline_Tel_No model
   */
  readonly fields: Airline_Tel_NoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Airline_Tel_No.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Airline_Tel_NoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    airline<T extends AirlineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AirlineDefaultArgs<ExtArgs>>): Prisma__AirlineClient<$Result.GetResult<Prisma.$AirlinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Airline_Tel_No model
   */
  interface Airline_Tel_NoFieldRefs {
    readonly TelNo: FieldRef<"Airline_Tel_No", 'String'>
    readonly AirlineName: FieldRef<"Airline_Tel_No", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Airline_Tel_No findUnique
   */
  export type Airline_Tel_NoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Tel_No to fetch.
     */
    where: Airline_Tel_NoWhereUniqueInput
  }

  /**
   * Airline_Tel_No findUniqueOrThrow
   */
  export type Airline_Tel_NoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Tel_No to fetch.
     */
    where: Airline_Tel_NoWhereUniqueInput
  }

  /**
   * Airline_Tel_No findFirst
   */
  export type Airline_Tel_NoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Tel_No to fetch.
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Tel_Nos to fetch.
     */
    orderBy?: Airline_Tel_NoOrderByWithRelationInput | Airline_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airline_Tel_Nos.
     */
    cursor?: Airline_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airline_Tel_Nos.
     */
    distinct?: Airline_Tel_NoScalarFieldEnum | Airline_Tel_NoScalarFieldEnum[]
  }

  /**
   * Airline_Tel_No findFirstOrThrow
   */
  export type Airline_Tel_NoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Tel_No to fetch.
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Tel_Nos to fetch.
     */
    orderBy?: Airline_Tel_NoOrderByWithRelationInput | Airline_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Airline_Tel_Nos.
     */
    cursor?: Airline_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Tel_Nos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Airline_Tel_Nos.
     */
    distinct?: Airline_Tel_NoScalarFieldEnum | Airline_Tel_NoScalarFieldEnum[]
  }

  /**
   * Airline_Tel_No findMany
   */
  export type Airline_Tel_NoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter, which Airline_Tel_Nos to fetch.
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Airline_Tel_Nos to fetch.
     */
    orderBy?: Airline_Tel_NoOrderByWithRelationInput | Airline_Tel_NoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Airline_Tel_Nos.
     */
    cursor?: Airline_Tel_NoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Airline_Tel_Nos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Airline_Tel_Nos.
     */
    skip?: number
    distinct?: Airline_Tel_NoScalarFieldEnum | Airline_Tel_NoScalarFieldEnum[]
  }

  /**
   * Airline_Tel_No create
   */
  export type Airline_Tel_NoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * The data needed to create a Airline_Tel_No.
     */
    data: XOR<Airline_Tel_NoCreateInput, Airline_Tel_NoUncheckedCreateInput>
  }

  /**
   * Airline_Tel_No createMany
   */
  export type Airline_Tel_NoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Airline_Tel_Nos.
     */
    data: Airline_Tel_NoCreateManyInput | Airline_Tel_NoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Airline_Tel_No createManyAndReturn
   */
  export type Airline_Tel_NoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * The data used to create many Airline_Tel_Nos.
     */
    data: Airline_Tel_NoCreateManyInput | Airline_Tel_NoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Airline_Tel_No update
   */
  export type Airline_Tel_NoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * The data needed to update a Airline_Tel_No.
     */
    data: XOR<Airline_Tel_NoUpdateInput, Airline_Tel_NoUncheckedUpdateInput>
    /**
     * Choose, which Airline_Tel_No to update.
     */
    where: Airline_Tel_NoWhereUniqueInput
  }

  /**
   * Airline_Tel_No updateMany
   */
  export type Airline_Tel_NoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Airline_Tel_Nos.
     */
    data: XOR<Airline_Tel_NoUpdateManyMutationInput, Airline_Tel_NoUncheckedUpdateManyInput>
    /**
     * Filter which Airline_Tel_Nos to update
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * Limit how many Airline_Tel_Nos to update.
     */
    limit?: number
  }

  /**
   * Airline_Tel_No updateManyAndReturn
   */
  export type Airline_Tel_NoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * The data used to update Airline_Tel_Nos.
     */
    data: XOR<Airline_Tel_NoUpdateManyMutationInput, Airline_Tel_NoUncheckedUpdateManyInput>
    /**
     * Filter which Airline_Tel_Nos to update
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * Limit how many Airline_Tel_Nos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Airline_Tel_No upsert
   */
  export type Airline_Tel_NoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * The filter to search for the Airline_Tel_No to update in case it exists.
     */
    where: Airline_Tel_NoWhereUniqueInput
    /**
     * In case the Airline_Tel_No found by the `where` argument doesn't exist, create a new Airline_Tel_No with this data.
     */
    create: XOR<Airline_Tel_NoCreateInput, Airline_Tel_NoUncheckedCreateInput>
    /**
     * In case the Airline_Tel_No was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Airline_Tel_NoUpdateInput, Airline_Tel_NoUncheckedUpdateInput>
  }

  /**
   * Airline_Tel_No delete
   */
  export type Airline_Tel_NoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
    /**
     * Filter which Airline_Tel_No to delete.
     */
    where: Airline_Tel_NoWhereUniqueInput
  }

  /**
   * Airline_Tel_No deleteMany
   */
  export type Airline_Tel_NoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Airline_Tel_Nos to delete
     */
    where?: Airline_Tel_NoWhereInput
    /**
     * Limit how many Airline_Tel_Nos to delete.
     */
    limit?: number
  }

  /**
   * Airline_Tel_No without action
   */
  export type Airline_Tel_NoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Airline_Tel_No
     */
    select?: Airline_Tel_NoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Airline_Tel_No
     */
    omit?: Airline_Tel_NoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Airline_Tel_NoInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    SessionID: string | null
    UserAccountID: string | null
    TokenHash: string | null
    CreatedAt: Date | null
    LastSeenAt: Date | null
    IdleExpiresAt: Date | null
    AbsoluteExpiresAt: Date | null
    RevokedAt: Date | null
    RevokeReason: string | null
  }

  export type SessionMaxAggregateOutputType = {
    SessionID: string | null
    UserAccountID: string | null
    TokenHash: string | null
    CreatedAt: Date | null
    LastSeenAt: Date | null
    IdleExpiresAt: Date | null
    AbsoluteExpiresAt: Date | null
    RevokedAt: Date | null
    RevokeReason: string | null
  }

  export type SessionCountAggregateOutputType = {
    SessionID: number
    UserAccountID: number
    TokenHash: number
    CreatedAt: number
    LastSeenAt: number
    IdleExpiresAt: number
    AbsoluteExpiresAt: number
    RevokedAt: number
    RevokeReason: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    SessionID?: true
    UserAccountID?: true
    TokenHash?: true
    CreatedAt?: true
    LastSeenAt?: true
    IdleExpiresAt?: true
    AbsoluteExpiresAt?: true
    RevokedAt?: true
    RevokeReason?: true
  }

  export type SessionMaxAggregateInputType = {
    SessionID?: true
    UserAccountID?: true
    TokenHash?: true
    CreatedAt?: true
    LastSeenAt?: true
    IdleExpiresAt?: true
    AbsoluteExpiresAt?: true
    RevokedAt?: true
    RevokeReason?: true
  }

  export type SessionCountAggregateInputType = {
    SessionID?: true
    UserAccountID?: true
    TokenHash?: true
    CreatedAt?: true
    LastSeenAt?: true
    IdleExpiresAt?: true
    AbsoluteExpiresAt?: true
    RevokedAt?: true
    RevokeReason?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    SessionID: string
    UserAccountID: string
    TokenHash: string
    CreatedAt: Date
    LastSeenAt: Date
    IdleExpiresAt: Date
    AbsoluteExpiresAt: Date
    RevokedAt: Date | null
    RevokeReason: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SessionID?: boolean
    UserAccountID?: boolean
    TokenHash?: boolean
    CreatedAt?: boolean
    LastSeenAt?: boolean
    IdleExpiresAt?: boolean
    AbsoluteExpiresAt?: boolean
    RevokedAt?: boolean
    RevokeReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SessionID?: boolean
    UserAccountID?: boolean
    TokenHash?: boolean
    CreatedAt?: boolean
    LastSeenAt?: boolean
    IdleExpiresAt?: boolean
    AbsoluteExpiresAt?: boolean
    RevokedAt?: boolean
    RevokeReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SessionID?: boolean
    UserAccountID?: boolean
    TokenHash?: boolean
    CreatedAt?: boolean
    LastSeenAt?: boolean
    IdleExpiresAt?: boolean
    AbsoluteExpiresAt?: boolean
    RevokedAt?: boolean
    RevokeReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    SessionID?: boolean
    UserAccountID?: boolean
    TokenHash?: boolean
    CreatedAt?: boolean
    LastSeenAt?: boolean
    IdleExpiresAt?: boolean
    AbsoluteExpiresAt?: boolean
    RevokedAt?: boolean
    RevokeReason?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"SessionID" | "UserAccountID" | "TokenHash" | "CreatedAt" | "LastSeenAt" | "IdleExpiresAt" | "AbsoluteExpiresAt" | "RevokedAt" | "RevokeReason", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SessionID: string
      UserAccountID: string
      TokenHash: string
      CreatedAt: Date
      LastSeenAt: Date
      IdleExpiresAt: Date
      AbsoluteExpiresAt: Date
      RevokedAt: Date | null
      RevokeReason: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `SessionID`
     * const sessionWithSessionIDOnly = await prisma.session.findMany({ select: { SessionID: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `SessionID`
     * const sessionWithSessionIDOnly = await prisma.session.createManyAndReturn({
     *   select: { SessionID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `SessionID`
     * const sessionWithSessionIDOnly = await prisma.session.updateManyAndReturn({
     *   select: { SessionID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly SessionID: FieldRef<"Session", 'String'>
    readonly UserAccountID: FieldRef<"Session", 'String'>
    readonly TokenHash: FieldRef<"Session", 'String'>
    readonly CreatedAt: FieldRef<"Session", 'DateTime'>
    readonly LastSeenAt: FieldRef<"Session", 'DateTime'>
    readonly IdleExpiresAt: FieldRef<"Session", 'DateTime'>
    readonly AbsoluteExpiresAt: FieldRef<"Session", 'DateTime'>
    readonly RevokedAt: FieldRef<"Session", 'DateTime'>
    readonly RevokeReason: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AirportScalarFieldEnum: {
    AirportID: 'AirportID',
    AirportName: 'AirportName',
    City: 'City',
    Country: 'Country'
  };

  export type AirportScalarFieldEnum = (typeof AirportScalarFieldEnum)[keyof typeof AirportScalarFieldEnum]


  export const AirlineScalarFieldEnum: {
    AirlineName: 'AirlineName',
    AirlineCaption: 'AirlineCaption',
    Website: 'Website',
    AmountOfAircraft: 'AmountOfAircraft',
    Logo: 'Logo'
  };

  export type AirlineScalarFieldEnum = (typeof AirlineScalarFieldEnum)[keyof typeof AirlineScalarFieldEnum]


  export const AircraftScalarFieldEnum: {
    AircraftRegNo: 'AircraftRegNo',
    AirlineName: 'AirlineName',
    SeatCapacity: 'SeatCapacity',
    ModelName: 'ModelName'
  };

  export type AircraftScalarFieldEnum = (typeof AircraftScalarFieldEnum)[keyof typeof AircraftScalarFieldEnum]


  export const FlightScalarFieldEnum: {
    FlightNo: 'FlightNo',
    Schedule: 'Schedule',
    ArrivalAirportID: 'ArrivalAirportID',
    DepartureAirportID: 'DepartureAirportID',
    AirlineName: 'AirlineName',
    AircraftRegNo: 'AircraftRegNo'
  };

  export type FlightScalarFieldEnum = (typeof FlightScalarFieldEnum)[keyof typeof FlightScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    TicketID: 'TicketID',
    Price: 'Price',
    TicketStatus: 'TicketStatus',
    PassengerName: 'PassengerName',
    PassengerLastName: 'PassengerLastName',
    Gender: 'Gender',
    DateOfBirth: 'DateOfBirth',
    Nationality: 'Nationality',
    BaggageChecked: 'BaggageChecked',
    BaggageCabin: 'BaggageCabin',
    SeatNo: 'SeatNo',
    AircraftRegNo: 'AircraftRegNo',
    FlightNo: 'FlightNo',
    Schedule: 'Schedule'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const OperateScalarFieldEnum: {
    AirportID: 'AirportID',
    AirlineName: 'AirlineName'
  };

  export type OperateScalarFieldEnum = (typeof OperateScalarFieldEnum)[keyof typeof OperateScalarFieldEnum]


  export const Assigned_ToScalarFieldEnum: {
    FlightNo: 'FlightNo',
    Schedule: 'Schedule',
    UserAccountID: 'UserAccountID'
  };

  export type Assigned_ToScalarFieldEnum = (typeof Assigned_ToScalarFieldEnum)[keyof typeof Assigned_ToScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    AdminAccountID: 'AdminAccountID',
    AirlineName: 'AirlineName',
    ContactStatus: 'ContactStatus'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const Report_ToScalarFieldEnum: {
    UserAccountID: 'UserAccountID',
    AdminAccountID: 'AdminAccountID',
    ReportStatus: 'ReportStatus'
  };

  export type Report_ToScalarFieldEnum = (typeof Report_ToScalarFieldEnum)[keyof typeof Report_ToScalarFieldEnum]


  export const CabinClassScalarFieldEnum: {
    AircraftRegNo: 'AircraftRegNo',
    Class: 'Class',
    StandardPrice: 'StandardPrice'
  };

  export type CabinClassScalarFieldEnum = (typeof CabinClassScalarFieldEnum)[keyof typeof CabinClassScalarFieldEnum]


  export const SeatScalarFieldEnum: {
    AircraftRegNo: 'AircraftRegNo',
    SeatNo: 'SeatNo',
    SeatType: 'SeatType'
  };

  export type SeatScalarFieldEnum = (typeof SeatScalarFieldEnum)[keyof typeof SeatScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    AdminAccountID: 'AdminAccountID',
    IPAddress: 'IPAddress'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const Airline_MessageScalarFieldEnum: {
    AirlineName: 'AirlineName',
    AdminAccountID: 'AdminAccountID',
    MessageText: 'MessageText'
  };

  export type Airline_MessageScalarFieldEnum = (typeof Airline_MessageScalarFieldEnum)[keyof typeof Airline_MessageScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    AccountID: 'AccountID',
    Password: 'Password',
    FirstName: 'FirstName',
    LastName: 'LastName'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const UserScalarFieldEnum: {
    UserAccountID: 'UserAccountID',
    Email: 'Email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_Tel_NoScalarFieldEnum: {
    UserAccountID: 'UserAccountID',
    TelNo: 'TelNo'
  };

  export type User_Tel_NoScalarFieldEnum = (typeof User_Tel_NoScalarFieldEnum)[keyof typeof User_Tel_NoScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    ReportID: 'ReportID',
    ReportDescription: 'ReportDescription',
    BookingID: 'BookingID',
    Attachment: 'Attachment',
    UserAccountID: 'UserAccountID',
    AdminAccountID: 'AdminAccountID',
    Email: 'Email',
    TelNo: 'TelNo',
    PassengerName: 'PassengerName'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const Domestic_TicketScalarFieldEnum: {
    TicketID: 'TicketID'
  };

  export type Domestic_TicketScalarFieldEnum = (typeof Domestic_TicketScalarFieldEnum)[keyof typeof Domestic_TicketScalarFieldEnum]


  export const International_TicketScalarFieldEnum: {
    TicketID: 'TicketID',
    PassportNo: 'PassportNo',
    IssuedCountry: 'IssuedCountry',
    PassportExpiry: 'PassportExpiry'
  };

  export type International_TicketScalarFieldEnum = (typeof International_TicketScalarFieldEnum)[keyof typeof International_TicketScalarFieldEnum]


  export const Round_Trip_TicketScalarFieldEnum: {
    TicketID: 'TicketID',
    TicketID2: 'TicketID2'
  };

  export type Round_Trip_TicketScalarFieldEnum = (typeof Round_Trip_TicketScalarFieldEnum)[keyof typeof Round_Trip_TicketScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    TicketID: 'TicketID',
    PaymentID: 'PaymentID',
    UserAccountID: 'UserAccountID'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    PaymentID: 'PaymentID',
    PaymentDateTime: 'PaymentDateTime',
    PaymentMethod: 'PaymentMethod',
    TransactionStatus: 'TransactionStatus',
    Amount: 'Amount'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const Airline_Tel_NoScalarFieldEnum: {
    TelNo: 'TelNo',
    AirlineName: 'AirlineName'
  };

  export type Airline_Tel_NoScalarFieldEnum = (typeof Airline_Tel_NoScalarFieldEnum)[keyof typeof Airline_Tel_NoScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    SessionID: 'SessionID',
    UserAccountID: 'UserAccountID',
    TokenHash: 'TokenHash',
    CreatedAt: 'CreatedAt',
    LastSeenAt: 'LastSeenAt',
    IdleExpiresAt: 'IdleExpiresAt',
    AbsoluteExpiresAt: 'AbsoluteExpiresAt',
    RevokedAt: 'RevokedAt',
    RevokeReason: 'RevokeReason'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AirportWhereInput = {
    AND?: AirportWhereInput | AirportWhereInput[]
    OR?: AirportWhereInput[]
    NOT?: AirportWhereInput | AirportWhereInput[]
    AirportID?: StringFilter<"Airport"> | string
    AirportName?: StringFilter<"Airport"> | string
    City?: StringFilter<"Airport"> | string
    Country?: StringFilter<"Airport"> | string
    operates?: OperateListRelationFilter
    departureFlights?: FlightListRelationFilter
    arrivalFlights?: FlightListRelationFilter
  }

  export type AirportOrderByWithRelationInput = {
    AirportID?: SortOrder
    AirportName?: SortOrder
    City?: SortOrder
    Country?: SortOrder
    operates?: OperateOrderByRelationAggregateInput
    departureFlights?: FlightOrderByRelationAggregateInput
    arrivalFlights?: FlightOrderByRelationAggregateInput
  }

  export type AirportWhereUniqueInput = Prisma.AtLeast<{
    AirportID?: string
    AND?: AirportWhereInput | AirportWhereInput[]
    OR?: AirportWhereInput[]
    NOT?: AirportWhereInput | AirportWhereInput[]
    AirportName?: StringFilter<"Airport"> | string
    City?: StringFilter<"Airport"> | string
    Country?: StringFilter<"Airport"> | string
    operates?: OperateListRelationFilter
    departureFlights?: FlightListRelationFilter
    arrivalFlights?: FlightListRelationFilter
  }, "AirportID">

  export type AirportOrderByWithAggregationInput = {
    AirportID?: SortOrder
    AirportName?: SortOrder
    City?: SortOrder
    Country?: SortOrder
    _count?: AirportCountOrderByAggregateInput
    _max?: AirportMaxOrderByAggregateInput
    _min?: AirportMinOrderByAggregateInput
  }

  export type AirportScalarWhereWithAggregatesInput = {
    AND?: AirportScalarWhereWithAggregatesInput | AirportScalarWhereWithAggregatesInput[]
    OR?: AirportScalarWhereWithAggregatesInput[]
    NOT?: AirportScalarWhereWithAggregatesInput | AirportScalarWhereWithAggregatesInput[]
    AirportID?: StringWithAggregatesFilter<"Airport"> | string
    AirportName?: StringWithAggregatesFilter<"Airport"> | string
    City?: StringWithAggregatesFilter<"Airport"> | string
    Country?: StringWithAggregatesFilter<"Airport"> | string
  }

  export type AirlineWhereInput = {
    AND?: AirlineWhereInput | AirlineWhereInput[]
    OR?: AirlineWhereInput[]
    NOT?: AirlineWhereInput | AirlineWhereInput[]
    AirlineName?: StringFilter<"Airline"> | string
    AirlineCaption?: StringFilter<"Airline"> | string
    Website?: StringNullableFilter<"Airline"> | string | null
    AmountOfAircraft?: IntFilter<"Airline"> | number
    Logo?: StringNullableFilter<"Airline"> | string | null
    operates?: OperateListRelationFilter
    aircrafts?: AircraftListRelationFilter
    flights?: FlightListRelationFilter
    telNos?: Airline_Tel_NoListRelationFilter
    messages?: Airline_MessageListRelationFilter
    contacts?: ContactListRelationFilter
  }

  export type AirlineOrderByWithRelationInput = {
    AirlineName?: SortOrder
    AirlineCaption?: SortOrder
    Website?: SortOrderInput | SortOrder
    AmountOfAircraft?: SortOrder
    Logo?: SortOrderInput | SortOrder
    operates?: OperateOrderByRelationAggregateInput
    aircrafts?: AircraftOrderByRelationAggregateInput
    flights?: FlightOrderByRelationAggregateInput
    telNos?: Airline_Tel_NoOrderByRelationAggregateInput
    messages?: Airline_MessageOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
  }

  export type AirlineWhereUniqueInput = Prisma.AtLeast<{
    AirlineName?: string
    AND?: AirlineWhereInput | AirlineWhereInput[]
    OR?: AirlineWhereInput[]
    NOT?: AirlineWhereInput | AirlineWhereInput[]
    AirlineCaption?: StringFilter<"Airline"> | string
    Website?: StringNullableFilter<"Airline"> | string | null
    AmountOfAircraft?: IntFilter<"Airline"> | number
    Logo?: StringNullableFilter<"Airline"> | string | null
    operates?: OperateListRelationFilter
    aircrafts?: AircraftListRelationFilter
    flights?: FlightListRelationFilter
    telNos?: Airline_Tel_NoListRelationFilter
    messages?: Airline_MessageListRelationFilter
    contacts?: ContactListRelationFilter
  }, "AirlineName">

  export type AirlineOrderByWithAggregationInput = {
    AirlineName?: SortOrder
    AirlineCaption?: SortOrder
    Website?: SortOrderInput | SortOrder
    AmountOfAircraft?: SortOrder
    Logo?: SortOrderInput | SortOrder
    _count?: AirlineCountOrderByAggregateInput
    _avg?: AirlineAvgOrderByAggregateInput
    _max?: AirlineMaxOrderByAggregateInput
    _min?: AirlineMinOrderByAggregateInput
    _sum?: AirlineSumOrderByAggregateInput
  }

  export type AirlineScalarWhereWithAggregatesInput = {
    AND?: AirlineScalarWhereWithAggregatesInput | AirlineScalarWhereWithAggregatesInput[]
    OR?: AirlineScalarWhereWithAggregatesInput[]
    NOT?: AirlineScalarWhereWithAggregatesInput | AirlineScalarWhereWithAggregatesInput[]
    AirlineName?: StringWithAggregatesFilter<"Airline"> | string
    AirlineCaption?: StringWithAggregatesFilter<"Airline"> | string
    Website?: StringNullableWithAggregatesFilter<"Airline"> | string | null
    AmountOfAircraft?: IntWithAggregatesFilter<"Airline"> | number
    Logo?: StringNullableWithAggregatesFilter<"Airline"> | string | null
  }

  export type AircraftWhereInput = {
    AND?: AircraftWhereInput | AircraftWhereInput[]
    OR?: AircraftWhereInput[]
    NOT?: AircraftWhereInput | AircraftWhereInput[]
    AircraftRegNo?: StringFilter<"Aircraft"> | string
    AirlineName?: StringFilter<"Aircraft"> | string
    SeatCapacity?: IntFilter<"Aircraft"> | number
    ModelName?: StringFilter<"Aircraft"> | string
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
    seats?: SeatListRelationFilter
    flights?: FlightListRelationFilter
    cabins?: CabinClassListRelationFilter
  }

  export type AircraftOrderByWithRelationInput = {
    AircraftRegNo?: SortOrder
    AirlineName?: SortOrder
    SeatCapacity?: SortOrder
    ModelName?: SortOrder
    airline?: AirlineOrderByWithRelationInput
    seats?: SeatOrderByRelationAggregateInput
    flights?: FlightOrderByRelationAggregateInput
    cabins?: CabinClassOrderByRelationAggregateInput
  }

  export type AircraftWhereUniqueInput = Prisma.AtLeast<{
    AircraftRegNo?: string
    AND?: AircraftWhereInput | AircraftWhereInput[]
    OR?: AircraftWhereInput[]
    NOT?: AircraftWhereInput | AircraftWhereInput[]
    AirlineName?: StringFilter<"Aircraft"> | string
    SeatCapacity?: IntFilter<"Aircraft"> | number
    ModelName?: StringFilter<"Aircraft"> | string
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
    seats?: SeatListRelationFilter
    flights?: FlightListRelationFilter
    cabins?: CabinClassListRelationFilter
  }, "AircraftRegNo">

  export type AircraftOrderByWithAggregationInput = {
    AircraftRegNo?: SortOrder
    AirlineName?: SortOrder
    SeatCapacity?: SortOrder
    ModelName?: SortOrder
    _count?: AircraftCountOrderByAggregateInput
    _avg?: AircraftAvgOrderByAggregateInput
    _max?: AircraftMaxOrderByAggregateInput
    _min?: AircraftMinOrderByAggregateInput
    _sum?: AircraftSumOrderByAggregateInput
  }

  export type AircraftScalarWhereWithAggregatesInput = {
    AND?: AircraftScalarWhereWithAggregatesInput | AircraftScalarWhereWithAggregatesInput[]
    OR?: AircraftScalarWhereWithAggregatesInput[]
    NOT?: AircraftScalarWhereWithAggregatesInput | AircraftScalarWhereWithAggregatesInput[]
    AircraftRegNo?: StringWithAggregatesFilter<"Aircraft"> | string
    AirlineName?: StringWithAggregatesFilter<"Aircraft"> | string
    SeatCapacity?: IntWithAggregatesFilter<"Aircraft"> | number
    ModelName?: StringWithAggregatesFilter<"Aircraft"> | string
  }

  export type FlightWhereInput = {
    AND?: FlightWhereInput | FlightWhereInput[]
    OR?: FlightWhereInput[]
    NOT?: FlightWhereInput | FlightWhereInput[]
    FlightNo?: StringFilter<"Flight"> | string
    Schedule?: DateTimeFilter<"Flight"> | Date | string
    ArrivalAirportID?: StringFilter<"Flight"> | string
    DepartureAirportID?: StringFilter<"Flight"> | string
    AirlineName?: StringFilter<"Flight"> | string
    AircraftRegNo?: StringFilter<"Flight"> | string
    arrivalAirport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    departureAirport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
    passengers?: Assigned_ToListRelationFilter
    tickets?: TicketListRelationFilter
  }

  export type FlightOrderByWithRelationInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    ArrivalAirportID?: SortOrder
    DepartureAirportID?: SortOrder
    AirlineName?: SortOrder
    AircraftRegNo?: SortOrder
    arrivalAirport?: AirportOrderByWithRelationInput
    departureAirport?: AirportOrderByWithRelationInput
    airline?: AirlineOrderByWithRelationInput
    aircraft?: AircraftOrderByWithRelationInput
    passengers?: Assigned_ToOrderByRelationAggregateInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type FlightWhereUniqueInput = Prisma.AtLeast<{
    FlightNo?: string
    FlightNo_Schedule?: FlightFlightNoScheduleCompoundUniqueInput
    AND?: FlightWhereInput | FlightWhereInput[]
    OR?: FlightWhereInput[]
    NOT?: FlightWhereInput | FlightWhereInput[]
    Schedule?: DateTimeFilter<"Flight"> | Date | string
    ArrivalAirportID?: StringFilter<"Flight"> | string
    DepartureAirportID?: StringFilter<"Flight"> | string
    AirlineName?: StringFilter<"Flight"> | string
    AircraftRegNo?: StringFilter<"Flight"> | string
    arrivalAirport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    departureAirport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
    passengers?: Assigned_ToListRelationFilter
    tickets?: TicketListRelationFilter
  }, "FlightNo_Schedule" | "FlightNo">

  export type FlightOrderByWithAggregationInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    ArrivalAirportID?: SortOrder
    DepartureAirportID?: SortOrder
    AirlineName?: SortOrder
    AircraftRegNo?: SortOrder
    _count?: FlightCountOrderByAggregateInput
    _max?: FlightMaxOrderByAggregateInput
    _min?: FlightMinOrderByAggregateInput
  }

  export type FlightScalarWhereWithAggregatesInput = {
    AND?: FlightScalarWhereWithAggregatesInput | FlightScalarWhereWithAggregatesInput[]
    OR?: FlightScalarWhereWithAggregatesInput[]
    NOT?: FlightScalarWhereWithAggregatesInput | FlightScalarWhereWithAggregatesInput[]
    FlightNo?: StringWithAggregatesFilter<"Flight"> | string
    Schedule?: DateTimeWithAggregatesFilter<"Flight"> | Date | string
    ArrivalAirportID?: StringWithAggregatesFilter<"Flight"> | string
    DepartureAirportID?: StringWithAggregatesFilter<"Flight"> | string
    AirlineName?: StringWithAggregatesFilter<"Flight"> | string
    AircraftRegNo?: StringWithAggregatesFilter<"Flight"> | string
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    TicketID?: StringFilter<"Ticket"> | string
    Price?: FloatFilter<"Ticket"> | number
    TicketStatus?: StringFilter<"Ticket"> | string
    PassengerName?: StringFilter<"Ticket"> | string
    PassengerLastName?: StringFilter<"Ticket"> | string
    Gender?: StringFilter<"Ticket"> | string
    DateOfBirth?: DateTimeFilter<"Ticket"> | Date | string
    Nationality?: StringFilter<"Ticket"> | string
    BaggageChecked?: FloatFilter<"Ticket"> | number
    BaggageCabin?: FloatFilter<"Ticket"> | number
    SeatNo?: StringFilter<"Ticket"> | string
    AircraftRegNo?: StringFilter<"Ticket"> | string
    FlightNo?: StringFilter<"Ticket"> | string
    Schedule?: DateTimeFilter<"Ticket"> | Date | string
    flight?: XOR<FlightScalarRelationFilter, FlightWhereInput>
    seat?: XOR<SeatScalarRelationFilter, SeatWhereInput>
    purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
    domesticTicket?: XOR<Domestic_TicketNullableScalarRelationFilter, Domestic_TicketWhereInput> | null
    internationalTicket?: XOR<International_TicketNullableScalarRelationFilter, International_TicketWhereInput> | null
    roundTripTicketPart1?: XOR<Round_Trip_TicketNullableScalarRelationFilter, Round_Trip_TicketWhereInput> | null
    roundTripTicketPart2?: XOR<Round_Trip_TicketNullableScalarRelationFilter, Round_Trip_TicketWhereInput> | null
  }

  export type TicketOrderByWithRelationInput = {
    TicketID?: SortOrder
    Price?: SortOrder
    TicketStatus?: SortOrder
    PassengerName?: SortOrder
    PassengerLastName?: SortOrder
    Gender?: SortOrder
    DateOfBirth?: SortOrder
    Nationality?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
    SeatNo?: SortOrder
    AircraftRegNo?: SortOrder
    FlightNo?: SortOrder
    Schedule?: SortOrder
    flight?: FlightOrderByWithRelationInput
    seat?: SeatOrderByWithRelationInput
    purchase?: PurchaseOrderByWithRelationInput
    domesticTicket?: Domestic_TicketOrderByWithRelationInput
    internationalTicket?: International_TicketOrderByWithRelationInput
    roundTripTicketPart1?: Round_Trip_TicketOrderByWithRelationInput
    roundTripTicketPart2?: Round_Trip_TicketOrderByWithRelationInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    TicketID?: string
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    Price?: FloatFilter<"Ticket"> | number
    TicketStatus?: StringFilter<"Ticket"> | string
    PassengerName?: StringFilter<"Ticket"> | string
    PassengerLastName?: StringFilter<"Ticket"> | string
    Gender?: StringFilter<"Ticket"> | string
    DateOfBirth?: DateTimeFilter<"Ticket"> | Date | string
    Nationality?: StringFilter<"Ticket"> | string
    BaggageChecked?: FloatFilter<"Ticket"> | number
    BaggageCabin?: FloatFilter<"Ticket"> | number
    SeatNo?: StringFilter<"Ticket"> | string
    AircraftRegNo?: StringFilter<"Ticket"> | string
    FlightNo?: StringFilter<"Ticket"> | string
    Schedule?: DateTimeFilter<"Ticket"> | Date | string
    flight?: XOR<FlightScalarRelationFilter, FlightWhereInput>
    seat?: XOR<SeatScalarRelationFilter, SeatWhereInput>
    purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
    domesticTicket?: XOR<Domestic_TicketNullableScalarRelationFilter, Domestic_TicketWhereInput> | null
    internationalTicket?: XOR<International_TicketNullableScalarRelationFilter, International_TicketWhereInput> | null
    roundTripTicketPart1?: XOR<Round_Trip_TicketNullableScalarRelationFilter, Round_Trip_TicketWhereInput> | null
    roundTripTicketPart2?: XOR<Round_Trip_TicketNullableScalarRelationFilter, Round_Trip_TicketWhereInput> | null
  }, "TicketID">

  export type TicketOrderByWithAggregationInput = {
    TicketID?: SortOrder
    Price?: SortOrder
    TicketStatus?: SortOrder
    PassengerName?: SortOrder
    PassengerLastName?: SortOrder
    Gender?: SortOrder
    DateOfBirth?: SortOrder
    Nationality?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
    SeatNo?: SortOrder
    AircraftRegNo?: SortOrder
    FlightNo?: SortOrder
    Schedule?: SortOrder
    _count?: TicketCountOrderByAggregateInput
    _avg?: TicketAvgOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
    _sum?: TicketSumOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    TicketID?: StringWithAggregatesFilter<"Ticket"> | string
    Price?: FloatWithAggregatesFilter<"Ticket"> | number
    TicketStatus?: StringWithAggregatesFilter<"Ticket"> | string
    PassengerName?: StringWithAggregatesFilter<"Ticket"> | string
    PassengerLastName?: StringWithAggregatesFilter<"Ticket"> | string
    Gender?: StringWithAggregatesFilter<"Ticket"> | string
    DateOfBirth?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    Nationality?: StringWithAggregatesFilter<"Ticket"> | string
    BaggageChecked?: FloatWithAggregatesFilter<"Ticket"> | number
    BaggageCabin?: FloatWithAggregatesFilter<"Ticket"> | number
    SeatNo?: StringWithAggregatesFilter<"Ticket"> | string
    AircraftRegNo?: StringWithAggregatesFilter<"Ticket"> | string
    FlightNo?: StringWithAggregatesFilter<"Ticket"> | string
    Schedule?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
  }

  export type OperateWhereInput = {
    AND?: OperateWhereInput | OperateWhereInput[]
    OR?: OperateWhereInput[]
    NOT?: OperateWhereInput | OperateWhereInput[]
    AirportID?: StringFilter<"Operate"> | string
    AirlineName?: StringFilter<"Operate"> | string
    airport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }

  export type OperateOrderByWithRelationInput = {
    AirportID?: SortOrder
    AirlineName?: SortOrder
    airport?: AirportOrderByWithRelationInput
    airline?: AirlineOrderByWithRelationInput
  }

  export type OperateWhereUniqueInput = Prisma.AtLeast<{
    AirportID_AirlineName?: OperateAirportIDAirlineNameCompoundUniqueInput
    AND?: OperateWhereInput | OperateWhereInput[]
    OR?: OperateWhereInput[]
    NOT?: OperateWhereInput | OperateWhereInput[]
    AirportID?: StringFilter<"Operate"> | string
    AirlineName?: StringFilter<"Operate"> | string
    airport?: XOR<AirportScalarRelationFilter, AirportWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }, "AirportID_AirlineName">

  export type OperateOrderByWithAggregationInput = {
    AirportID?: SortOrder
    AirlineName?: SortOrder
    _count?: OperateCountOrderByAggregateInput
    _max?: OperateMaxOrderByAggregateInput
    _min?: OperateMinOrderByAggregateInput
  }

  export type OperateScalarWhereWithAggregatesInput = {
    AND?: OperateScalarWhereWithAggregatesInput | OperateScalarWhereWithAggregatesInput[]
    OR?: OperateScalarWhereWithAggregatesInput[]
    NOT?: OperateScalarWhereWithAggregatesInput | OperateScalarWhereWithAggregatesInput[]
    AirportID?: StringWithAggregatesFilter<"Operate"> | string
    AirlineName?: StringWithAggregatesFilter<"Operate"> | string
  }

  export type Assigned_ToWhereInput = {
    AND?: Assigned_ToWhereInput | Assigned_ToWhereInput[]
    OR?: Assigned_ToWhereInput[]
    NOT?: Assigned_ToWhereInput | Assigned_ToWhereInput[]
    FlightNo?: StringFilter<"Assigned_To"> | string
    Schedule?: DateTimeFilter<"Assigned_To"> | Date | string
    UserAccountID?: StringFilter<"Assigned_To"> | string
    flight?: XOR<FlightScalarRelationFilter, FlightWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type Assigned_ToOrderByWithRelationInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    UserAccountID?: SortOrder
    flight?: FlightOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type Assigned_ToWhereUniqueInput = Prisma.AtLeast<{
    FlightNo_Schedule_UserAccountID?: Assigned_ToFlightNoScheduleUserAccountIDCompoundUniqueInput
    AND?: Assigned_ToWhereInput | Assigned_ToWhereInput[]
    OR?: Assigned_ToWhereInput[]
    NOT?: Assigned_ToWhereInput | Assigned_ToWhereInput[]
    FlightNo?: StringFilter<"Assigned_To"> | string
    Schedule?: DateTimeFilter<"Assigned_To"> | Date | string
    UserAccountID?: StringFilter<"Assigned_To"> | string
    flight?: XOR<FlightScalarRelationFilter, FlightWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "FlightNo_Schedule_UserAccountID">

  export type Assigned_ToOrderByWithAggregationInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    UserAccountID?: SortOrder
    _count?: Assigned_ToCountOrderByAggregateInput
    _max?: Assigned_ToMaxOrderByAggregateInput
    _min?: Assigned_ToMinOrderByAggregateInput
  }

  export type Assigned_ToScalarWhereWithAggregatesInput = {
    AND?: Assigned_ToScalarWhereWithAggregatesInput | Assigned_ToScalarWhereWithAggregatesInput[]
    OR?: Assigned_ToScalarWhereWithAggregatesInput[]
    NOT?: Assigned_ToScalarWhereWithAggregatesInput | Assigned_ToScalarWhereWithAggregatesInput[]
    FlightNo?: StringWithAggregatesFilter<"Assigned_To"> | string
    Schedule?: DateTimeWithAggregatesFilter<"Assigned_To"> | Date | string
    UserAccountID?: StringWithAggregatesFilter<"Assigned_To"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    AdminAccountID?: StringFilter<"Contact"> | string
    AirlineName?: StringFilter<"Contact"> | string
    ContactStatus?: StringFilter<"Contact"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    AdminAccountID?: SortOrder
    AirlineName?: SortOrder
    ContactStatus?: SortOrder
    admin?: AdminOrderByWithRelationInput
    airline?: AirlineOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    AdminAccountID_AirlineName?: ContactAdminAccountIDAirlineNameCompoundUniqueInput
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    AdminAccountID?: StringFilter<"Contact"> | string
    AirlineName?: StringFilter<"Contact"> | string
    ContactStatus?: StringFilter<"Contact"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }, "AdminAccountID_AirlineName">

  export type ContactOrderByWithAggregationInput = {
    AdminAccountID?: SortOrder
    AirlineName?: SortOrder
    ContactStatus?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    AdminAccountID?: StringWithAggregatesFilter<"Contact"> | string
    AirlineName?: StringWithAggregatesFilter<"Contact"> | string
    ContactStatus?: StringWithAggregatesFilter<"Contact"> | string
  }

  export type Report_ToWhereInput = {
    AND?: Report_ToWhereInput | Report_ToWhereInput[]
    OR?: Report_ToWhereInput[]
    NOT?: Report_ToWhereInput | Report_ToWhereInput[]
    UserAccountID?: StringFilter<"Report_To"> | string
    AdminAccountID?: StringFilter<"Report_To"> | string
    ReportStatus?: StringFilter<"Report_To"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Reports?: ReportListRelationFilter
  }

  export type Report_ToOrderByWithRelationInput = {
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    ReportStatus?: SortOrder
    admin?: AdminOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    Reports?: ReportOrderByRelationAggregateInput
  }

  export type Report_ToWhereUniqueInput = Prisma.AtLeast<{
    UserAccountID_AdminAccountID?: Report_ToUserAccountIDAdminAccountIDCompoundUniqueInput
    AND?: Report_ToWhereInput | Report_ToWhereInput[]
    OR?: Report_ToWhereInput[]
    NOT?: Report_ToWhereInput | Report_ToWhereInput[]
    UserAccountID?: StringFilter<"Report_To"> | string
    AdminAccountID?: StringFilter<"Report_To"> | string
    ReportStatus?: StringFilter<"Report_To"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Reports?: ReportListRelationFilter
  }, "UserAccountID_AdminAccountID">

  export type Report_ToOrderByWithAggregationInput = {
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    ReportStatus?: SortOrder
    _count?: Report_ToCountOrderByAggregateInput
    _max?: Report_ToMaxOrderByAggregateInput
    _min?: Report_ToMinOrderByAggregateInput
  }

  export type Report_ToScalarWhereWithAggregatesInput = {
    AND?: Report_ToScalarWhereWithAggregatesInput | Report_ToScalarWhereWithAggregatesInput[]
    OR?: Report_ToScalarWhereWithAggregatesInput[]
    NOT?: Report_ToScalarWhereWithAggregatesInput | Report_ToScalarWhereWithAggregatesInput[]
    UserAccountID?: StringWithAggregatesFilter<"Report_To"> | string
    AdminAccountID?: StringWithAggregatesFilter<"Report_To"> | string
    ReportStatus?: StringWithAggregatesFilter<"Report_To"> | string
  }

  export type CabinClassWhereInput = {
    AND?: CabinClassWhereInput | CabinClassWhereInput[]
    OR?: CabinClassWhereInput[]
    NOT?: CabinClassWhereInput | CabinClassWhereInput[]
    AircraftRegNo?: StringFilter<"CabinClass"> | string
    Class?: StringFilter<"CabinClass"> | string
    StandardPrice?: FloatFilter<"CabinClass"> | number
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
  }

  export type CabinClassOrderByWithRelationInput = {
    AircraftRegNo?: SortOrder
    Class?: SortOrder
    StandardPrice?: SortOrder
    aircraft?: AircraftOrderByWithRelationInput
  }

  export type CabinClassWhereUniqueInput = Prisma.AtLeast<{
    AircraftRegNo_Class?: CabinClassAircraftRegNoClassCompoundUniqueInput
    AND?: CabinClassWhereInput | CabinClassWhereInput[]
    OR?: CabinClassWhereInput[]
    NOT?: CabinClassWhereInput | CabinClassWhereInput[]
    AircraftRegNo?: StringFilter<"CabinClass"> | string
    Class?: StringFilter<"CabinClass"> | string
    StandardPrice?: FloatFilter<"CabinClass"> | number
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
  }, "AircraftRegNo_Class">

  export type CabinClassOrderByWithAggregationInput = {
    AircraftRegNo?: SortOrder
    Class?: SortOrder
    StandardPrice?: SortOrder
    _count?: CabinClassCountOrderByAggregateInput
    _avg?: CabinClassAvgOrderByAggregateInput
    _max?: CabinClassMaxOrderByAggregateInput
    _min?: CabinClassMinOrderByAggregateInput
    _sum?: CabinClassSumOrderByAggregateInput
  }

  export type CabinClassScalarWhereWithAggregatesInput = {
    AND?: CabinClassScalarWhereWithAggregatesInput | CabinClassScalarWhereWithAggregatesInput[]
    OR?: CabinClassScalarWhereWithAggregatesInput[]
    NOT?: CabinClassScalarWhereWithAggregatesInput | CabinClassScalarWhereWithAggregatesInput[]
    AircraftRegNo?: StringWithAggregatesFilter<"CabinClass"> | string
    Class?: StringWithAggregatesFilter<"CabinClass"> | string
    StandardPrice?: FloatWithAggregatesFilter<"CabinClass"> | number
  }

  export type SeatWhereInput = {
    AND?: SeatWhereInput | SeatWhereInput[]
    OR?: SeatWhereInput[]
    NOT?: SeatWhereInput | SeatWhereInput[]
    AircraftRegNo?: StringFilter<"Seat"> | string
    SeatNo?: StringFilter<"Seat"> | string
    SeatType?: StringFilter<"Seat"> | string
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type SeatOrderByWithRelationInput = {
    AircraftRegNo?: SortOrder
    SeatNo?: SortOrder
    SeatType?: SortOrder
    aircraft?: AircraftOrderByWithRelationInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type SeatWhereUniqueInput = Prisma.AtLeast<{
    AircraftRegNo_SeatNo?: SeatAircraftRegNoSeatNoCompoundUniqueInput
    AND?: SeatWhereInput | SeatWhereInput[]
    OR?: SeatWhereInput[]
    NOT?: SeatWhereInput | SeatWhereInput[]
    AircraftRegNo?: StringFilter<"Seat"> | string
    SeatNo?: StringFilter<"Seat"> | string
    SeatType?: StringFilter<"Seat"> | string
    aircraft?: XOR<AircraftScalarRelationFilter, AircraftWhereInput>
    tickets?: TicketListRelationFilter
  }, "AircraftRegNo_SeatNo">

  export type SeatOrderByWithAggregationInput = {
    AircraftRegNo?: SortOrder
    SeatNo?: SortOrder
    SeatType?: SortOrder
    _count?: SeatCountOrderByAggregateInput
    _max?: SeatMaxOrderByAggregateInput
    _min?: SeatMinOrderByAggregateInput
  }

  export type SeatScalarWhereWithAggregatesInput = {
    AND?: SeatScalarWhereWithAggregatesInput | SeatScalarWhereWithAggregatesInput[]
    OR?: SeatScalarWhereWithAggregatesInput[]
    NOT?: SeatScalarWhereWithAggregatesInput | SeatScalarWhereWithAggregatesInput[]
    AircraftRegNo?: StringWithAggregatesFilter<"Seat"> | string
    SeatNo?: StringWithAggregatesFilter<"Seat"> | string
    SeatType?: StringWithAggregatesFilter<"Seat"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    AdminAccountID?: StringFilter<"Admin"> | string
    IPAddress?: StringNullableFilter<"Admin"> | string | null
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    sentAirlineMessages?: Airline_MessageListRelationFilter
    contacts?: ContactListRelationFilter
    involvedInReports?: Report_ToListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    AdminAccountID?: SortOrder
    IPAddress?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
    sentAirlineMessages?: Airline_MessageOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    involvedInReports?: Report_ToOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    AdminAccountID?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    IPAddress?: StringNullableFilter<"Admin"> | string | null
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    sentAirlineMessages?: Airline_MessageListRelationFilter
    contacts?: ContactListRelationFilter
    involvedInReports?: Report_ToListRelationFilter
  }, "AdminAccountID">

  export type AdminOrderByWithAggregationInput = {
    AdminAccountID?: SortOrder
    IPAddress?: SortOrderInput | SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    AdminAccountID?: StringWithAggregatesFilter<"Admin"> | string
    IPAddress?: StringNullableWithAggregatesFilter<"Admin"> | string | null
  }

  export type Airline_MessageWhereInput = {
    AND?: Airline_MessageWhereInput | Airline_MessageWhereInput[]
    OR?: Airline_MessageWhereInput[]
    NOT?: Airline_MessageWhereInput | Airline_MessageWhereInput[]
    AirlineName?: StringFilter<"Airline_Message"> | string
    AdminAccountID?: StringFilter<"Airline_Message"> | string
    MessageText?: StringFilter<"Airline_Message"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }

  export type Airline_MessageOrderByWithRelationInput = {
    AirlineName?: SortOrder
    AdminAccountID?: SortOrder
    MessageText?: SortOrder
    admin?: AdminOrderByWithRelationInput
    airline?: AirlineOrderByWithRelationInput
  }

  export type Airline_MessageWhereUniqueInput = Prisma.AtLeast<{
    AirlineName_AdminAccountID_MessageText?: Airline_MessageAirlineNameAdminAccountIDMessageTextCompoundUniqueInput
    AND?: Airline_MessageWhereInput | Airline_MessageWhereInput[]
    OR?: Airline_MessageWhereInput[]
    NOT?: Airline_MessageWhereInput | Airline_MessageWhereInput[]
    AirlineName?: StringFilter<"Airline_Message"> | string
    AdminAccountID?: StringFilter<"Airline_Message"> | string
    MessageText?: StringFilter<"Airline_Message"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }, "AirlineName_AdminAccountID_MessageText">

  export type Airline_MessageOrderByWithAggregationInput = {
    AirlineName?: SortOrder
    AdminAccountID?: SortOrder
    MessageText?: SortOrder
    _count?: Airline_MessageCountOrderByAggregateInput
    _max?: Airline_MessageMaxOrderByAggregateInput
    _min?: Airline_MessageMinOrderByAggregateInput
  }

  export type Airline_MessageScalarWhereWithAggregatesInput = {
    AND?: Airline_MessageScalarWhereWithAggregatesInput | Airline_MessageScalarWhereWithAggregatesInput[]
    OR?: Airline_MessageScalarWhereWithAggregatesInput[]
    NOT?: Airline_MessageScalarWhereWithAggregatesInput | Airline_MessageScalarWhereWithAggregatesInput[]
    AirlineName?: StringWithAggregatesFilter<"Airline_Message"> | string
    AdminAccountID?: StringWithAggregatesFilter<"Airline_Message"> | string
    MessageText?: StringWithAggregatesFilter<"Airline_Message"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    AccountID?: StringFilter<"Account"> | string
    Password?: StringFilter<"Account"> | string
    FirstName?: StringFilter<"Account"> | string
    LastName?: StringFilter<"Account"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    AccountID?: SortOrder
    Password?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    user?: UserOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    AccountID?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    Password?: StringFilter<"Account"> | string
    FirstName?: StringFilter<"Account"> | string
    LastName?: StringFilter<"Account"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }, "AccountID">

  export type AccountOrderByWithAggregationInput = {
    AccountID?: SortOrder
    Password?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    AccountID?: StringWithAggregatesFilter<"Account"> | string
    Password?: StringWithAggregatesFilter<"Account"> | string
    FirstName?: StringWithAggregatesFilter<"Account"> | string
    LastName?: StringWithAggregatesFilter<"Account"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    UserAccountID?: StringFilter<"User"> | string
    Email?: StringFilter<"User"> | string
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    telNos?: User_Tel_NoListRelationFilter
    assignedFlights?: Assigned_ToListRelationFilter
    purchases?: PurchaseListRelationFilter
    involvedInReports?: Report_ToListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    UserAccountID?: SortOrder
    Email?: SortOrder
    account?: AccountOrderByWithRelationInput
    telNos?: User_Tel_NoOrderByRelationAggregateInput
    assignedFlights?: Assigned_ToOrderByRelationAggregateInput
    purchases?: PurchaseOrderByRelationAggregateInput
    involvedInReports?: Report_ToOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    UserAccountID?: string
    Email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    telNos?: User_Tel_NoListRelationFilter
    assignedFlights?: Assigned_ToListRelationFilter
    purchases?: PurchaseListRelationFilter
    involvedInReports?: Report_ToListRelationFilter
    sessions?: SessionListRelationFilter
  }, "UserAccountID" | "Email">

  export type UserOrderByWithAggregationInput = {
    UserAccountID?: SortOrder
    Email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    UserAccountID?: StringWithAggregatesFilter<"User"> | string
    Email?: StringWithAggregatesFilter<"User"> | string
  }

  export type User_Tel_NoWhereInput = {
    AND?: User_Tel_NoWhereInput | User_Tel_NoWhereInput[]
    OR?: User_Tel_NoWhereInput[]
    NOT?: User_Tel_NoWhereInput | User_Tel_NoWhereInput[]
    UserAccountID?: StringFilter<"User_Tel_No"> | string
    TelNo?: StringFilter<"User_Tel_No"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type User_Tel_NoOrderByWithRelationInput = {
    UserAccountID?: SortOrder
    TelNo?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type User_Tel_NoWhereUniqueInput = Prisma.AtLeast<{
    UserAccountID?: string
    AND?: User_Tel_NoWhereInput | User_Tel_NoWhereInput[]
    OR?: User_Tel_NoWhereInput[]
    NOT?: User_Tel_NoWhereInput | User_Tel_NoWhereInput[]
    TelNo?: StringFilter<"User_Tel_No"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "UserAccountID">

  export type User_Tel_NoOrderByWithAggregationInput = {
    UserAccountID?: SortOrder
    TelNo?: SortOrder
    _count?: User_Tel_NoCountOrderByAggregateInput
    _max?: User_Tel_NoMaxOrderByAggregateInput
    _min?: User_Tel_NoMinOrderByAggregateInput
  }

  export type User_Tel_NoScalarWhereWithAggregatesInput = {
    AND?: User_Tel_NoScalarWhereWithAggregatesInput | User_Tel_NoScalarWhereWithAggregatesInput[]
    OR?: User_Tel_NoScalarWhereWithAggregatesInput[]
    NOT?: User_Tel_NoScalarWhereWithAggregatesInput | User_Tel_NoScalarWhereWithAggregatesInput[]
    UserAccountID?: StringWithAggregatesFilter<"User_Tel_No"> | string
    TelNo?: StringWithAggregatesFilter<"User_Tel_No"> | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    ReportID?: StringFilter<"Report"> | string
    ReportDescription?: StringFilter<"Report"> | string
    BookingID?: StringFilter<"Report"> | string
    Attachment?: StringNullableFilter<"Report"> | string | null
    UserAccountID?: StringFilter<"Report"> | string
    AdminAccountID?: StringFilter<"Report"> | string
    Email?: StringFilter<"Report"> | string
    TelNo?: StringFilter<"Report"> | string
    PassengerName?: StringFilter<"Report"> | string
    creator?: XOR<Report_ToScalarRelationFilter, Report_ToWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    ReportID?: SortOrder
    ReportDescription?: SortOrder
    BookingID?: SortOrder
    Attachment?: SortOrderInput | SortOrder
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    Email?: SortOrder
    TelNo?: SortOrder
    PassengerName?: SortOrder
    creator?: Report_ToOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    ReportID?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    ReportDescription?: StringFilter<"Report"> | string
    BookingID?: StringFilter<"Report"> | string
    Attachment?: StringNullableFilter<"Report"> | string | null
    UserAccountID?: StringFilter<"Report"> | string
    AdminAccountID?: StringFilter<"Report"> | string
    Email?: StringFilter<"Report"> | string
    TelNo?: StringFilter<"Report"> | string
    PassengerName?: StringFilter<"Report"> | string
    creator?: XOR<Report_ToScalarRelationFilter, Report_ToWhereInput>
  }, "ReportID">

  export type ReportOrderByWithAggregationInput = {
    ReportID?: SortOrder
    ReportDescription?: SortOrder
    BookingID?: SortOrder
    Attachment?: SortOrderInput | SortOrder
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    Email?: SortOrder
    TelNo?: SortOrder
    PassengerName?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    ReportID?: StringWithAggregatesFilter<"Report"> | string
    ReportDescription?: StringWithAggregatesFilter<"Report"> | string
    BookingID?: StringWithAggregatesFilter<"Report"> | string
    Attachment?: StringNullableWithAggregatesFilter<"Report"> | string | null
    UserAccountID?: StringWithAggregatesFilter<"Report"> | string
    AdminAccountID?: StringWithAggregatesFilter<"Report"> | string
    Email?: StringWithAggregatesFilter<"Report"> | string
    TelNo?: StringWithAggregatesFilter<"Report"> | string
    PassengerName?: StringWithAggregatesFilter<"Report"> | string
  }

  export type Domestic_TicketWhereInput = {
    AND?: Domestic_TicketWhereInput | Domestic_TicketWhereInput[]
    OR?: Domestic_TicketWhereInput[]
    NOT?: Domestic_TicketWhereInput | Domestic_TicketWhereInput[]
    TicketID?: StringFilter<"Domestic_Ticket"> | string
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }

  export type Domestic_TicketOrderByWithRelationInput = {
    TicketID?: SortOrder
    ticket?: TicketOrderByWithRelationInput
  }

  export type Domestic_TicketWhereUniqueInput = Prisma.AtLeast<{
    TicketID?: string
    AND?: Domestic_TicketWhereInput | Domestic_TicketWhereInput[]
    OR?: Domestic_TicketWhereInput[]
    NOT?: Domestic_TicketWhereInput | Domestic_TicketWhereInput[]
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }, "TicketID">

  export type Domestic_TicketOrderByWithAggregationInput = {
    TicketID?: SortOrder
    _count?: Domestic_TicketCountOrderByAggregateInput
    _max?: Domestic_TicketMaxOrderByAggregateInput
    _min?: Domestic_TicketMinOrderByAggregateInput
  }

  export type Domestic_TicketScalarWhereWithAggregatesInput = {
    AND?: Domestic_TicketScalarWhereWithAggregatesInput | Domestic_TicketScalarWhereWithAggregatesInput[]
    OR?: Domestic_TicketScalarWhereWithAggregatesInput[]
    NOT?: Domestic_TicketScalarWhereWithAggregatesInput | Domestic_TicketScalarWhereWithAggregatesInput[]
    TicketID?: StringWithAggregatesFilter<"Domestic_Ticket"> | string
  }

  export type International_TicketWhereInput = {
    AND?: International_TicketWhereInput | International_TicketWhereInput[]
    OR?: International_TicketWhereInput[]
    NOT?: International_TicketWhereInput | International_TicketWhereInput[]
    TicketID?: StringFilter<"International_Ticket"> | string
    PassportNo?: StringFilter<"International_Ticket"> | string
    IssuedCountry?: StringFilter<"International_Ticket"> | string
    PassportExpiry?: DateTimeFilter<"International_Ticket"> | Date | string
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }

  export type International_TicketOrderByWithRelationInput = {
    TicketID?: SortOrder
    PassportNo?: SortOrder
    IssuedCountry?: SortOrder
    PassportExpiry?: SortOrder
    ticket?: TicketOrderByWithRelationInput
  }

  export type International_TicketWhereUniqueInput = Prisma.AtLeast<{
    TicketID?: string
    AND?: International_TicketWhereInput | International_TicketWhereInput[]
    OR?: International_TicketWhereInput[]
    NOT?: International_TicketWhereInput | International_TicketWhereInput[]
    PassportNo?: StringFilter<"International_Ticket"> | string
    IssuedCountry?: StringFilter<"International_Ticket"> | string
    PassportExpiry?: DateTimeFilter<"International_Ticket"> | Date | string
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }, "TicketID">

  export type International_TicketOrderByWithAggregationInput = {
    TicketID?: SortOrder
    PassportNo?: SortOrder
    IssuedCountry?: SortOrder
    PassportExpiry?: SortOrder
    _count?: International_TicketCountOrderByAggregateInput
    _max?: International_TicketMaxOrderByAggregateInput
    _min?: International_TicketMinOrderByAggregateInput
  }

  export type International_TicketScalarWhereWithAggregatesInput = {
    AND?: International_TicketScalarWhereWithAggregatesInput | International_TicketScalarWhereWithAggregatesInput[]
    OR?: International_TicketScalarWhereWithAggregatesInput[]
    NOT?: International_TicketScalarWhereWithAggregatesInput | International_TicketScalarWhereWithAggregatesInput[]
    TicketID?: StringWithAggregatesFilter<"International_Ticket"> | string
    PassportNo?: StringWithAggregatesFilter<"International_Ticket"> | string
    IssuedCountry?: StringWithAggregatesFilter<"International_Ticket"> | string
    PassportExpiry?: DateTimeWithAggregatesFilter<"International_Ticket"> | Date | string
  }

  export type Round_Trip_TicketWhereInput = {
    AND?: Round_Trip_TicketWhereInput | Round_Trip_TicketWhereInput[]
    OR?: Round_Trip_TicketWhereInput[]
    NOT?: Round_Trip_TicketWhereInput | Round_Trip_TicketWhereInput[]
    TicketID?: StringFilter<"Round_Trip_Ticket"> | string
    TicketID2?: StringFilter<"Round_Trip_Ticket"> | string
    ticket1?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    ticket2?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }

  export type Round_Trip_TicketOrderByWithRelationInput = {
    TicketID?: SortOrder
    TicketID2?: SortOrder
    ticket1?: TicketOrderByWithRelationInput
    ticket2?: TicketOrderByWithRelationInput
  }

  export type Round_Trip_TicketWhereUniqueInput = Prisma.AtLeast<{
    TicketID?: string
    TicketID2?: string
    AND?: Round_Trip_TicketWhereInput | Round_Trip_TicketWhereInput[]
    OR?: Round_Trip_TicketWhereInput[]
    NOT?: Round_Trip_TicketWhereInput | Round_Trip_TicketWhereInput[]
    ticket1?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    ticket2?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }, "TicketID" | "TicketID2">

  export type Round_Trip_TicketOrderByWithAggregationInput = {
    TicketID?: SortOrder
    TicketID2?: SortOrder
    _count?: Round_Trip_TicketCountOrderByAggregateInput
    _max?: Round_Trip_TicketMaxOrderByAggregateInput
    _min?: Round_Trip_TicketMinOrderByAggregateInput
  }

  export type Round_Trip_TicketScalarWhereWithAggregatesInput = {
    AND?: Round_Trip_TicketScalarWhereWithAggregatesInput | Round_Trip_TicketScalarWhereWithAggregatesInput[]
    OR?: Round_Trip_TicketScalarWhereWithAggregatesInput[]
    NOT?: Round_Trip_TicketScalarWhereWithAggregatesInput | Round_Trip_TicketScalarWhereWithAggregatesInput[]
    TicketID?: StringWithAggregatesFilter<"Round_Trip_Ticket"> | string
    TicketID2?: StringWithAggregatesFilter<"Round_Trip_Ticket"> | string
  }

  export type PurchaseWhereInput = {
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    TicketID?: StringFilter<"Purchase"> | string
    PaymentID?: StringFilter<"Purchase"> | string
    UserAccountID?: StringFilter<"Purchase"> | string
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PurchaseOrderByWithRelationInput = {
    TicketID?: SortOrder
    PaymentID?: SortOrder
    UserAccountID?: SortOrder
    ticket?: TicketOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PurchaseWhereUniqueInput = Prisma.AtLeast<{
    TicketID?: string
    PaymentID?: string
    TicketID_PaymentID?: PurchaseTicketIDPaymentIDCompoundUniqueInput
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    UserAccountID?: StringFilter<"Purchase"> | string
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "TicketID_PaymentID" | "TicketID" | "PaymentID">

  export type PurchaseOrderByWithAggregationInput = {
    TicketID?: SortOrder
    PaymentID?: SortOrder
    UserAccountID?: SortOrder
    _count?: PurchaseCountOrderByAggregateInput
    _max?: PurchaseMaxOrderByAggregateInput
    _min?: PurchaseMinOrderByAggregateInput
  }

  export type PurchaseScalarWhereWithAggregatesInput = {
    AND?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    OR?: PurchaseScalarWhereWithAggregatesInput[]
    NOT?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    TicketID?: StringWithAggregatesFilter<"Purchase"> | string
    PaymentID?: StringWithAggregatesFilter<"Purchase"> | string
    UserAccountID?: StringWithAggregatesFilter<"Purchase"> | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    PaymentID?: StringFilter<"Payment"> | string
    PaymentDateTime?: DateTimeFilter<"Payment"> | Date | string
    PaymentMethod?: StringFilter<"Payment"> | string
    TransactionStatus?: StringFilter<"Payment"> | string
    Amount?: FloatFilter<"Payment"> | number
    purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    PaymentID?: SortOrder
    PaymentDateTime?: SortOrder
    PaymentMethod?: SortOrder
    TransactionStatus?: SortOrder
    Amount?: SortOrder
    purchase?: PurchaseOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    PaymentID?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    PaymentDateTime?: DateTimeFilter<"Payment"> | Date | string
    PaymentMethod?: StringFilter<"Payment"> | string
    TransactionStatus?: StringFilter<"Payment"> | string
    Amount?: FloatFilter<"Payment"> | number
    purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
  }, "PaymentID">

  export type PaymentOrderByWithAggregationInput = {
    PaymentID?: SortOrder
    PaymentDateTime?: SortOrder
    PaymentMethod?: SortOrder
    TransactionStatus?: SortOrder
    Amount?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    PaymentID?: StringWithAggregatesFilter<"Payment"> | string
    PaymentDateTime?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    PaymentMethod?: StringWithAggregatesFilter<"Payment"> | string
    TransactionStatus?: StringWithAggregatesFilter<"Payment"> | string
    Amount?: FloatWithAggregatesFilter<"Payment"> | number
  }

  export type Airline_Tel_NoWhereInput = {
    AND?: Airline_Tel_NoWhereInput | Airline_Tel_NoWhereInput[]
    OR?: Airline_Tel_NoWhereInput[]
    NOT?: Airline_Tel_NoWhereInput | Airline_Tel_NoWhereInput[]
    TelNo?: StringFilter<"Airline_Tel_No"> | string
    AirlineName?: StringFilter<"Airline_Tel_No"> | string
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }

  export type Airline_Tel_NoOrderByWithRelationInput = {
    TelNo?: SortOrder
    AirlineName?: SortOrder
    airline?: AirlineOrderByWithRelationInput
  }

  export type Airline_Tel_NoWhereUniqueInput = Prisma.AtLeast<{
    TelNo_AirlineName?: Airline_Tel_NoTelNoAirlineNameCompoundUniqueInput
    AND?: Airline_Tel_NoWhereInput | Airline_Tel_NoWhereInput[]
    OR?: Airline_Tel_NoWhereInput[]
    NOT?: Airline_Tel_NoWhereInput | Airline_Tel_NoWhereInput[]
    TelNo?: StringFilter<"Airline_Tel_No"> | string
    AirlineName?: StringFilter<"Airline_Tel_No"> | string
    airline?: XOR<AirlineScalarRelationFilter, AirlineWhereInput>
  }, "TelNo_AirlineName">

  export type Airline_Tel_NoOrderByWithAggregationInput = {
    TelNo?: SortOrder
    AirlineName?: SortOrder
    _count?: Airline_Tel_NoCountOrderByAggregateInput
    _max?: Airline_Tel_NoMaxOrderByAggregateInput
    _min?: Airline_Tel_NoMinOrderByAggregateInput
  }

  export type Airline_Tel_NoScalarWhereWithAggregatesInput = {
    AND?: Airline_Tel_NoScalarWhereWithAggregatesInput | Airline_Tel_NoScalarWhereWithAggregatesInput[]
    OR?: Airline_Tel_NoScalarWhereWithAggregatesInput[]
    NOT?: Airline_Tel_NoScalarWhereWithAggregatesInput | Airline_Tel_NoScalarWhereWithAggregatesInput[]
    TelNo?: StringWithAggregatesFilter<"Airline_Tel_No"> | string
    AirlineName?: StringWithAggregatesFilter<"Airline_Tel_No"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    SessionID?: StringFilter<"Session"> | string
    UserAccountID?: StringFilter<"Session"> | string
    TokenHash?: StringFilter<"Session"> | string
    CreatedAt?: DateTimeFilter<"Session"> | Date | string
    LastSeenAt?: DateTimeFilter<"Session"> | Date | string
    IdleExpiresAt?: DateTimeFilter<"Session"> | Date | string
    AbsoluteExpiresAt?: DateTimeFilter<"Session"> | Date | string
    RevokedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    RevokeReason?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    SessionID?: SortOrder
    UserAccountID?: SortOrder
    TokenHash?: SortOrder
    CreatedAt?: SortOrder
    LastSeenAt?: SortOrder
    IdleExpiresAt?: SortOrder
    AbsoluteExpiresAt?: SortOrder
    RevokedAt?: SortOrderInput | SortOrder
    RevokeReason?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    SessionID?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    UserAccountID?: StringFilter<"Session"> | string
    TokenHash?: StringFilter<"Session"> | string
    CreatedAt?: DateTimeFilter<"Session"> | Date | string
    LastSeenAt?: DateTimeFilter<"Session"> | Date | string
    IdleExpiresAt?: DateTimeFilter<"Session"> | Date | string
    AbsoluteExpiresAt?: DateTimeFilter<"Session"> | Date | string
    RevokedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    RevokeReason?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "SessionID">

  export type SessionOrderByWithAggregationInput = {
    SessionID?: SortOrder
    UserAccountID?: SortOrder
    TokenHash?: SortOrder
    CreatedAt?: SortOrder
    LastSeenAt?: SortOrder
    IdleExpiresAt?: SortOrder
    AbsoluteExpiresAt?: SortOrder
    RevokedAt?: SortOrderInput | SortOrder
    RevokeReason?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    SessionID?: StringWithAggregatesFilter<"Session"> | string
    UserAccountID?: StringWithAggregatesFilter<"Session"> | string
    TokenHash?: StringWithAggregatesFilter<"Session"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    LastSeenAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    IdleExpiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    AbsoluteExpiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    RevokedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    RevokeReason?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AirportCreateInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateCreateNestedManyWithoutAirportInput
    departureFlights?: FlightCreateNestedManyWithoutDepartureAirportInput
    arrivalFlights?: FlightCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportUncheckedCreateInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateUncheckedCreateNestedManyWithoutAirportInput
    departureFlights?: FlightUncheckedCreateNestedManyWithoutDepartureAirportInput
    arrivalFlights?: FlightUncheckedCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportUpdateInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUpdateManyWithoutAirportNestedInput
    departureFlights?: FlightUpdateManyWithoutDepartureAirportNestedInput
    arrivalFlights?: FlightUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirportUncheckedUpdateInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUncheckedUpdateManyWithoutAirportNestedInput
    departureFlights?: FlightUncheckedUpdateManyWithoutDepartureAirportNestedInput
    arrivalFlights?: FlightUncheckedUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirportCreateManyInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
  }

  export type AirportUpdateManyMutationInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
  }

  export type AirportUncheckedUpdateManyInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
  }

  export type AirlineCreateInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUpdateInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineCreateManyInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
  }

  export type AirlineUpdateManyMutationInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AirlineUncheckedUpdateManyInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AircraftCreateInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    airline: AirlineCreateNestedOneWithoutAircraftsInput
    seats?: SeatCreateNestedManyWithoutAircraftInput
    flights?: FlightCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUncheckedCreateInput = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
    seats?: SeatUncheckedCreateNestedManyWithoutAircraftInput
    flights?: FlightUncheckedCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassUncheckedCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUpdateInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutAircraftsNestedInput
    seats?: SeatUpdateManyWithoutAircraftNestedInput
    flights?: FlightUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    seats?: SeatUncheckedUpdateManyWithoutAircraftNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUncheckedUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftCreateManyInput = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
  }

  export type AircraftUpdateManyMutationInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
  }

  export type AircraftUncheckedUpdateManyInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
  }

  export type FlightCreateInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightUpdateInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type FlightCreateManyInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
  }

  export type FlightUpdateManyMutationInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlightUncheckedUpdateManyInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketCreateManyInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
  }

  export type TicketUpdateManyMutationInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
  }

  export type TicketUncheckedUpdateManyInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperateCreateInput = {
    airport: AirportCreateNestedOneWithoutOperatesInput
    airline: AirlineCreateNestedOneWithoutOperatesInput
  }

  export type OperateUncheckedCreateInput = {
    AirportID: string
    AirlineName: string
  }

  export type OperateUpdateInput = {
    airport?: AirportUpdateOneRequiredWithoutOperatesNestedInput
    airline?: AirlineUpdateOneRequiredWithoutOperatesNestedInput
  }

  export type OperateUncheckedUpdateInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type OperateCreateManyInput = {
    AirportID: string
    AirlineName: string
  }

  export type OperateUpdateManyMutationInput = {

  }

  export type OperateUncheckedUpdateManyInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type Assigned_ToCreateInput = {
    flight: FlightCreateNestedOneWithoutPassengersInput
    user: UserCreateNestedOneWithoutAssignedFlightsInput
  }

  export type Assigned_ToUncheckedCreateInput = {
    FlightNo: string
    Schedule: Date | string
    UserAccountID: string
  }

  export type Assigned_ToUpdateInput = {
    flight?: FlightUpdateOneRequiredWithoutPassengersNestedInput
    user?: UserUpdateOneRequiredWithoutAssignedFlightsNestedInput
  }

  export type Assigned_ToUncheckedUpdateInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type Assigned_ToCreateManyInput = {
    FlightNo: string
    Schedule: Date | string
    UserAccountID: string
  }

  export type Assigned_ToUpdateManyMutationInput = {

  }

  export type Assigned_ToUncheckedUpdateManyInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    ContactStatus: string
    admin: AdminCreateNestedOneWithoutContactsInput
    airline: AirlineCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateInput = {
    AdminAccountID: string
    AirlineName: string
    ContactStatus: string
  }

  export type ContactUpdateInput = {
    ContactStatus?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutContactsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    AdminAccountID: string
    AirlineName: string
    ContactStatus: string
  }

  export type ContactUpdateManyMutationInput = {
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type Report_ToCreateInput = {
    ReportStatus: string
    admin: AdminCreateNestedOneWithoutInvolvedInReportsInput
    user: UserCreateNestedOneWithoutInvolvedInReportsInput
    Reports?: ReportCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToUncheckedCreateInput = {
    UserAccountID: string
    AdminAccountID: string
    ReportStatus: string
    Reports?: ReportUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToUpdateInput = {
    ReportStatus?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutInvolvedInReportsNestedInput
    user?: UserUpdateOneRequiredWithoutInvolvedInReportsNestedInput
    Reports?: ReportUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToUncheckedUpdateInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
    Reports?: ReportUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToCreateManyInput = {
    UserAccountID: string
    AdminAccountID: string
    ReportStatus: string
  }

  export type Report_ToUpdateManyMutationInput = {
    ReportStatus?: StringFieldUpdateOperationsInput | string
  }

  export type Report_ToUncheckedUpdateManyInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
  }

  export type CabinClassCreateInput = {
    Class: string
    StandardPrice: number
    aircraft: AircraftCreateNestedOneWithoutCabinsInput
  }

  export type CabinClassUncheckedCreateInput = {
    AircraftRegNo: string
    Class: string
    StandardPrice: number
  }

  export type CabinClassUpdateInput = {
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
    aircraft?: AircraftUpdateOneRequiredWithoutCabinsNestedInput
  }

  export type CabinClassUncheckedUpdateInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type CabinClassCreateManyInput = {
    AircraftRegNo: string
    Class: string
    StandardPrice: number
  }

  export type CabinClassUpdateManyMutationInput = {
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type CabinClassUncheckedUpdateManyInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type SeatCreateInput = {
    SeatNo: string
    SeatType: string
    aircraft: AircraftCreateNestedOneWithoutSeatsInput
    tickets?: TicketCreateNestedManyWithoutSeatInput
  }

  export type SeatUncheckedCreateInput = {
    AircraftRegNo: string
    SeatNo: string
    SeatType: string
    tickets?: TicketUncheckedCreateNestedManyWithoutSeatInput
  }

  export type SeatUpdateInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
    aircraft?: AircraftUpdateOneRequiredWithoutSeatsNestedInput
    tickets?: TicketUpdateManyWithoutSeatNestedInput
  }

  export type SeatUncheckedUpdateInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
    tickets?: TicketUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type SeatCreateManyInput = {
    AircraftRegNo: string
    SeatNo: string
    SeatType: string
  }

  export type SeatUpdateManyMutationInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
  }

  export type SeatUncheckedUpdateManyInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    IPAddress?: string | null
    account: AccountCreateNestedOneWithoutAdminInput
    sentAirlineMessages?: Airline_MessageCreateNestedManyWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    AdminAccountID: string
    IPAddress?: string | null
    sentAirlineMessages?: Airline_MessageUncheckedCreateNestedManyWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutAdminNestedInput
    sentAirlineMessages?: Airline_MessageUpdateManyWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sentAirlineMessages?: Airline_MessageUncheckedUpdateManyWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    AdminAccountID: string
    IPAddress?: string | null
  }

  export type AdminUpdateManyMutationInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminUncheckedUpdateManyInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Airline_MessageCreateInput = {
    MessageText: string
    admin: AdminCreateNestedOneWithoutSentAirlineMessagesInput
    airline: AirlineCreateNestedOneWithoutMessagesInput
  }

  export type Airline_MessageUncheckedCreateInput = {
    AirlineName: string
    AdminAccountID: string
    MessageText: string
  }

  export type Airline_MessageUpdateInput = {
    MessageText?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutSentAirlineMessagesNestedInput
    airline?: AirlineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type Airline_MessageUncheckedUpdateInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_MessageCreateManyInput = {
    AirlineName: string
    AdminAccountID: string
    MessageText: string
  }

  export type Airline_MessageUpdateManyMutationInput = {
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_MessageUncheckedUpdateManyInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    user?: UserCreateNestedOneWithoutAccountInput
    admin?: AdminCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    user?: UserUncheckedCreateNestedOneWithoutAccountInput
    admin?: AdminUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountUpdateInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAccountNestedInput
    admin?: AdminUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateOneWithoutAccountNestedInput
    admin?: AdminUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
  }

  export type AccountUpdateManyMutationInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
  }

  export type AccountUncheckedUpdateManyInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    UserAccountID: string
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    UserAccountID: string
    Email: string
  }

  export type UserUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoCreateInput = {
    TelNo: string
    user: UserCreateNestedOneWithoutTelNosInput
  }

  export type User_Tel_NoUncheckedCreateInput = {
    UserAccountID: string
    TelNo: string
  }

  export type User_Tel_NoUpdateInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTelNosNestedInput
  }

  export type User_Tel_NoUncheckedUpdateInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoCreateManyInput = {
    UserAccountID: string
    TelNo: string
  }

  export type User_Tel_NoUpdateManyMutationInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoUncheckedUpdateManyInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    Email: string
    TelNo: string
    PassengerName: string
    creator: Report_ToCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    UserAccountID: string
    AdminAccountID: string
    Email: string
    TelNo: string
    PassengerName: string
  }

  export type ReportUpdateInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    creator?: Report_ToUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    UserAccountID?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateManyInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    UserAccountID: string
    AdminAccountID: string
    Email: string
    TelNo: string
    PassengerName: string
  }

  export type ReportUpdateManyMutationInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type ReportUncheckedUpdateManyInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    UserAccountID?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type Domestic_TicketCreateInput = {
    ticket: TicketCreateNestedOneWithoutDomesticTicketInput
  }

  export type Domestic_TicketUncheckedCreateInput = {
    TicketID: string
  }

  export type Domestic_TicketUpdateInput = {
    ticket?: TicketUpdateOneRequiredWithoutDomesticTicketNestedInput
  }

  export type Domestic_TicketUncheckedUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
  }

  export type Domestic_TicketCreateManyInput = {
    TicketID: string
  }

  export type Domestic_TicketUpdateManyMutationInput = {

  }

  export type Domestic_TicketUncheckedUpdateManyInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
  }

  export type International_TicketCreateInput = {
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date | string
    ticket: TicketCreateNestedOneWithoutInternationalTicketInput
  }

  export type International_TicketUncheckedCreateInput = {
    TicketID: string
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date | string
  }

  export type International_TicketUpdateInput = {
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketUpdateOneRequiredWithoutInternationalTicketNestedInput
  }

  export type International_TicketUncheckedUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type International_TicketCreateManyInput = {
    TicketID: string
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date | string
  }

  export type International_TicketUpdateManyMutationInput = {
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type International_TicketUncheckedUpdateManyInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Round_Trip_TicketCreateInput = {
    ticket1: TicketCreateNestedOneWithoutRoundTripTicketPart1Input
    ticket2: TicketCreateNestedOneWithoutRoundTripTicketPart2Input
  }

  export type Round_Trip_TicketUncheckedCreateInput = {
    TicketID: string
    TicketID2: string
  }

  export type Round_Trip_TicketUpdateInput = {
    ticket1?: TicketUpdateOneRequiredWithoutRoundTripTicketPart1NestedInput
    ticket2?: TicketUpdateOneRequiredWithoutRoundTripTicketPart2NestedInput
  }

  export type Round_Trip_TicketUncheckedUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    TicketID2?: StringFieldUpdateOperationsInput | string
  }

  export type Round_Trip_TicketCreateManyInput = {
    TicketID: string
    TicketID2: string
  }

  export type Round_Trip_TicketUpdateManyMutationInput = {

  }

  export type Round_Trip_TicketUncheckedUpdateManyInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    TicketID2?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseCreateInput = {
    ticket: TicketCreateNestedOneWithoutPurchaseInput
    payment: PaymentCreateNestedOneWithoutPurchaseInput
    user: UserCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateInput = {
    TicketID: string
    PaymentID: string
    UserAccountID: string
  }

  export type PurchaseUpdateInput = {
    ticket?: TicketUpdateOneRequiredWithoutPurchaseNestedInput
    payment?: PaymentUpdateOneRequiredWithoutPurchaseNestedInput
    user?: UserUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PaymentID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseCreateManyInput = {
    TicketID: string
    PaymentID: string
    UserAccountID: string
  }

  export type PurchaseUpdateManyMutationInput = {

  }

  export type PurchaseUncheckedUpdateManyInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PaymentID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentCreateInput = {
    PaymentID: string
    PaymentDateTime: Date | string
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
    purchase?: PurchaseCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    PaymentID: string
    PaymentDateTime: Date | string
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
    purchase?: PurchaseUncheckedCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
    purchase?: PurchaseUpdateOneWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
    purchase?: PurchaseUncheckedUpdateOneWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    PaymentID: string
    PaymentDateTime: Date | string
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
  }

  export type PaymentUpdateManyMutationInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
  }

  export type Airline_Tel_NoCreateInput = {
    TelNo: string
    airline: AirlineCreateNestedOneWithoutTelNosInput
  }

  export type Airline_Tel_NoUncheckedCreateInput = {
    TelNo: string
    AirlineName: string
  }

  export type Airline_Tel_NoUpdateInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutTelNosNestedInput
  }

  export type Airline_Tel_NoUncheckedUpdateInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_Tel_NoCreateManyInput = {
    TelNo: string
    AirlineName: string
  }

  export type Airline_Tel_NoUpdateManyMutationInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_Tel_NoUncheckedUpdateManyInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    SessionID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    SessionID: string
    UserAccountID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
  }

  export type SessionUpdateInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    SessionID: string
    UserAccountID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type OperateListRelationFilter = {
    every?: OperateWhereInput
    some?: OperateWhereInput
    none?: OperateWhereInput
  }

  export type FlightListRelationFilter = {
    every?: FlightWhereInput
    some?: FlightWhereInput
    none?: FlightWhereInput
  }

  export type OperateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AirportCountOrderByAggregateInput = {
    AirportID?: SortOrder
    AirportName?: SortOrder
    City?: SortOrder
    Country?: SortOrder
  }

  export type AirportMaxOrderByAggregateInput = {
    AirportID?: SortOrder
    AirportName?: SortOrder
    City?: SortOrder
    Country?: SortOrder
  }

  export type AirportMinOrderByAggregateInput = {
    AirportID?: SortOrder
    AirportName?: SortOrder
    City?: SortOrder
    Country?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AircraftListRelationFilter = {
    every?: AircraftWhereInput
    some?: AircraftWhereInput
    none?: AircraftWhereInput
  }

  export type Airline_Tel_NoListRelationFilter = {
    every?: Airline_Tel_NoWhereInput
    some?: Airline_Tel_NoWhereInput
    none?: Airline_Tel_NoWhereInput
  }

  export type Airline_MessageListRelationFilter = {
    every?: Airline_MessageWhereInput
    some?: Airline_MessageWhereInput
    none?: Airline_MessageWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AircraftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Airline_Tel_NoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Airline_MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AirlineCountOrderByAggregateInput = {
    AirlineName?: SortOrder
    AirlineCaption?: SortOrder
    Website?: SortOrder
    AmountOfAircraft?: SortOrder
    Logo?: SortOrder
  }

  export type AirlineAvgOrderByAggregateInput = {
    AmountOfAircraft?: SortOrder
  }

  export type AirlineMaxOrderByAggregateInput = {
    AirlineName?: SortOrder
    AirlineCaption?: SortOrder
    Website?: SortOrder
    AmountOfAircraft?: SortOrder
    Logo?: SortOrder
  }

  export type AirlineMinOrderByAggregateInput = {
    AirlineName?: SortOrder
    AirlineCaption?: SortOrder
    Website?: SortOrder
    AmountOfAircraft?: SortOrder
    Logo?: SortOrder
  }

  export type AirlineSumOrderByAggregateInput = {
    AmountOfAircraft?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AirlineScalarRelationFilter = {
    is?: AirlineWhereInput
    isNot?: AirlineWhereInput
  }

  export type SeatListRelationFilter = {
    every?: SeatWhereInput
    some?: SeatWhereInput
    none?: SeatWhereInput
  }

  export type CabinClassListRelationFilter = {
    every?: CabinClassWhereInput
    some?: CabinClassWhereInput
    none?: CabinClassWhereInput
  }

  export type SeatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CabinClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AircraftCountOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    AirlineName?: SortOrder
    SeatCapacity?: SortOrder
    ModelName?: SortOrder
  }

  export type AircraftAvgOrderByAggregateInput = {
    SeatCapacity?: SortOrder
  }

  export type AircraftMaxOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    AirlineName?: SortOrder
    SeatCapacity?: SortOrder
    ModelName?: SortOrder
  }

  export type AircraftMinOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    AirlineName?: SortOrder
    SeatCapacity?: SortOrder
    ModelName?: SortOrder
  }

  export type AircraftSumOrderByAggregateInput = {
    SeatCapacity?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AirportScalarRelationFilter = {
    is?: AirportWhereInput
    isNot?: AirportWhereInput
  }

  export type AircraftScalarRelationFilter = {
    is?: AircraftWhereInput
    isNot?: AircraftWhereInput
  }

  export type Assigned_ToListRelationFilter = {
    every?: Assigned_ToWhereInput
    some?: Assigned_ToWhereInput
    none?: Assigned_ToWhereInput
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type Assigned_ToOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlightFlightNoScheduleCompoundUniqueInput = {
    FlightNo: string
    Schedule: Date | string
  }

  export type FlightCountOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    ArrivalAirportID?: SortOrder
    DepartureAirportID?: SortOrder
    AirlineName?: SortOrder
    AircraftRegNo?: SortOrder
  }

  export type FlightMaxOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    ArrivalAirportID?: SortOrder
    DepartureAirportID?: SortOrder
    AirlineName?: SortOrder
    AircraftRegNo?: SortOrder
  }

  export type FlightMinOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    ArrivalAirportID?: SortOrder
    DepartureAirportID?: SortOrder
    AirlineName?: SortOrder
    AircraftRegNo?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FlightScalarRelationFilter = {
    is?: FlightWhereInput
    isNot?: FlightWhereInput
  }

  export type SeatScalarRelationFilter = {
    is?: SeatWhereInput
    isNot?: SeatWhereInput
  }

  export type PurchaseNullableScalarRelationFilter = {
    is?: PurchaseWhereInput | null
    isNot?: PurchaseWhereInput | null
  }

  export type Domestic_TicketNullableScalarRelationFilter = {
    is?: Domestic_TicketWhereInput | null
    isNot?: Domestic_TicketWhereInput | null
  }

  export type International_TicketNullableScalarRelationFilter = {
    is?: International_TicketWhereInput | null
    isNot?: International_TicketWhereInput | null
  }

  export type Round_Trip_TicketNullableScalarRelationFilter = {
    is?: Round_Trip_TicketWhereInput | null
    isNot?: Round_Trip_TicketWhereInput | null
  }

  export type TicketCountOrderByAggregateInput = {
    TicketID?: SortOrder
    Price?: SortOrder
    TicketStatus?: SortOrder
    PassengerName?: SortOrder
    PassengerLastName?: SortOrder
    Gender?: SortOrder
    DateOfBirth?: SortOrder
    Nationality?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
    SeatNo?: SortOrder
    AircraftRegNo?: SortOrder
    FlightNo?: SortOrder
    Schedule?: SortOrder
  }

  export type TicketAvgOrderByAggregateInput = {
    Price?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    TicketID?: SortOrder
    Price?: SortOrder
    TicketStatus?: SortOrder
    PassengerName?: SortOrder
    PassengerLastName?: SortOrder
    Gender?: SortOrder
    DateOfBirth?: SortOrder
    Nationality?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
    SeatNo?: SortOrder
    AircraftRegNo?: SortOrder
    FlightNo?: SortOrder
    Schedule?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    TicketID?: SortOrder
    Price?: SortOrder
    TicketStatus?: SortOrder
    PassengerName?: SortOrder
    PassengerLastName?: SortOrder
    Gender?: SortOrder
    DateOfBirth?: SortOrder
    Nationality?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
    SeatNo?: SortOrder
    AircraftRegNo?: SortOrder
    FlightNo?: SortOrder
    Schedule?: SortOrder
  }

  export type TicketSumOrderByAggregateInput = {
    Price?: SortOrder
    BaggageChecked?: SortOrder
    BaggageCabin?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type OperateAirportIDAirlineNameCompoundUniqueInput = {
    AirportID: string
    AirlineName: string
  }

  export type OperateCountOrderByAggregateInput = {
    AirportID?: SortOrder
    AirlineName?: SortOrder
  }

  export type OperateMaxOrderByAggregateInput = {
    AirportID?: SortOrder
    AirlineName?: SortOrder
  }

  export type OperateMinOrderByAggregateInput = {
    AirportID?: SortOrder
    AirlineName?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type Assigned_ToFlightNoScheduleUserAccountIDCompoundUniqueInput = {
    FlightNo: string
    Schedule: Date | string
    UserAccountID: string
  }

  export type Assigned_ToCountOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    UserAccountID?: SortOrder
  }

  export type Assigned_ToMaxOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    UserAccountID?: SortOrder
  }

  export type Assigned_ToMinOrderByAggregateInput = {
    FlightNo?: SortOrder
    Schedule?: SortOrder
    UserAccountID?: SortOrder
  }

  export type AdminScalarRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type ContactAdminAccountIDAirlineNameCompoundUniqueInput = {
    AdminAccountID: string
    AirlineName: string
  }

  export type ContactCountOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    AirlineName?: SortOrder
    ContactStatus?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    AirlineName?: SortOrder
    ContactStatus?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    AirlineName?: SortOrder
    ContactStatus?: SortOrder
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Report_ToUserAccountIDAdminAccountIDCompoundUniqueInput = {
    UserAccountID: string
    AdminAccountID: string
  }

  export type Report_ToCountOrderByAggregateInput = {
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    ReportStatus?: SortOrder
  }

  export type Report_ToMaxOrderByAggregateInput = {
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    ReportStatus?: SortOrder
  }

  export type Report_ToMinOrderByAggregateInput = {
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    ReportStatus?: SortOrder
  }

  export type CabinClassAircraftRegNoClassCompoundUniqueInput = {
    AircraftRegNo: string
    Class: string
  }

  export type CabinClassCountOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    Class?: SortOrder
    StandardPrice?: SortOrder
  }

  export type CabinClassAvgOrderByAggregateInput = {
    StandardPrice?: SortOrder
  }

  export type CabinClassMaxOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    Class?: SortOrder
    StandardPrice?: SortOrder
  }

  export type CabinClassMinOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    Class?: SortOrder
    StandardPrice?: SortOrder
  }

  export type CabinClassSumOrderByAggregateInput = {
    StandardPrice?: SortOrder
  }

  export type SeatAircraftRegNoSeatNoCompoundUniqueInput = {
    AircraftRegNo: string
    SeatNo: string
  }

  export type SeatCountOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    SeatNo?: SortOrder
    SeatType?: SortOrder
  }

  export type SeatMaxOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    SeatNo?: SortOrder
    SeatType?: SortOrder
  }

  export type SeatMinOrderByAggregateInput = {
    AircraftRegNo?: SortOrder
    SeatNo?: SortOrder
    SeatType?: SortOrder
  }

  export type AccountScalarRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type Report_ToListRelationFilter = {
    every?: Report_ToWhereInput
    some?: Report_ToWhereInput
    none?: Report_ToWhereInput
  }

  export type Report_ToOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    IPAddress?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    IPAddress?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    AdminAccountID?: SortOrder
    IPAddress?: SortOrder
  }

  export type Airline_MessageAirlineNameAdminAccountIDMessageTextCompoundUniqueInput = {
    AirlineName: string
    AdminAccountID: string
    MessageText: string
  }

  export type Airline_MessageCountOrderByAggregateInput = {
    AirlineName?: SortOrder
    AdminAccountID?: SortOrder
    MessageText?: SortOrder
  }

  export type Airline_MessageMaxOrderByAggregateInput = {
    AirlineName?: SortOrder
    AdminAccountID?: SortOrder
    MessageText?: SortOrder
  }

  export type Airline_MessageMinOrderByAggregateInput = {
    AirlineName?: SortOrder
    AdminAccountID?: SortOrder
    MessageText?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    AccountID?: SortOrder
    Password?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    AccountID?: SortOrder
    Password?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    AccountID?: SortOrder
    Password?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
  }

  export type User_Tel_NoListRelationFilter = {
    every?: User_Tel_NoWhereInput
    some?: User_Tel_NoWhereInput
    none?: User_Tel_NoWhereInput
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type User_Tel_NoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    UserAccountID?: SortOrder
    Email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    UserAccountID?: SortOrder
    Email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    UserAccountID?: SortOrder
    Email?: SortOrder
  }

  export type User_Tel_NoCountOrderByAggregateInput = {
    UserAccountID?: SortOrder
    TelNo?: SortOrder
  }

  export type User_Tel_NoMaxOrderByAggregateInput = {
    UserAccountID?: SortOrder
    TelNo?: SortOrder
  }

  export type User_Tel_NoMinOrderByAggregateInput = {
    UserAccountID?: SortOrder
    TelNo?: SortOrder
  }

  export type Report_ToScalarRelationFilter = {
    is?: Report_ToWhereInput
    isNot?: Report_ToWhereInput
  }

  export type ReportCountOrderByAggregateInput = {
    ReportID?: SortOrder
    ReportDescription?: SortOrder
    BookingID?: SortOrder
    Attachment?: SortOrder
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    Email?: SortOrder
    TelNo?: SortOrder
    PassengerName?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    ReportID?: SortOrder
    ReportDescription?: SortOrder
    BookingID?: SortOrder
    Attachment?: SortOrder
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    Email?: SortOrder
    TelNo?: SortOrder
    PassengerName?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    ReportID?: SortOrder
    ReportDescription?: SortOrder
    BookingID?: SortOrder
    Attachment?: SortOrder
    UserAccountID?: SortOrder
    AdminAccountID?: SortOrder
    Email?: SortOrder
    TelNo?: SortOrder
    PassengerName?: SortOrder
  }

  export type TicketScalarRelationFilter = {
    is?: TicketWhereInput
    isNot?: TicketWhereInput
  }

  export type Domestic_TicketCountOrderByAggregateInput = {
    TicketID?: SortOrder
  }

  export type Domestic_TicketMaxOrderByAggregateInput = {
    TicketID?: SortOrder
  }

  export type Domestic_TicketMinOrderByAggregateInput = {
    TicketID?: SortOrder
  }

  export type International_TicketCountOrderByAggregateInput = {
    TicketID?: SortOrder
    PassportNo?: SortOrder
    IssuedCountry?: SortOrder
    PassportExpiry?: SortOrder
  }

  export type International_TicketMaxOrderByAggregateInput = {
    TicketID?: SortOrder
    PassportNo?: SortOrder
    IssuedCountry?: SortOrder
    PassportExpiry?: SortOrder
  }

  export type International_TicketMinOrderByAggregateInput = {
    TicketID?: SortOrder
    PassportNo?: SortOrder
    IssuedCountry?: SortOrder
    PassportExpiry?: SortOrder
  }

  export type Round_Trip_TicketCountOrderByAggregateInput = {
    TicketID?: SortOrder
    TicketID2?: SortOrder
  }

  export type Round_Trip_TicketMaxOrderByAggregateInput = {
    TicketID?: SortOrder
    TicketID2?: SortOrder
  }

  export type Round_Trip_TicketMinOrderByAggregateInput = {
    TicketID?: SortOrder
    TicketID2?: SortOrder
  }

  export type PaymentScalarRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type PurchaseTicketIDPaymentIDCompoundUniqueInput = {
    TicketID: string
    PaymentID: string
  }

  export type PurchaseCountOrderByAggregateInput = {
    TicketID?: SortOrder
    PaymentID?: SortOrder
    UserAccountID?: SortOrder
  }

  export type PurchaseMaxOrderByAggregateInput = {
    TicketID?: SortOrder
    PaymentID?: SortOrder
    UserAccountID?: SortOrder
  }

  export type PurchaseMinOrderByAggregateInput = {
    TicketID?: SortOrder
    PaymentID?: SortOrder
    UserAccountID?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    PaymentID?: SortOrder
    PaymentDateTime?: SortOrder
    PaymentMethod?: SortOrder
    TransactionStatus?: SortOrder
    Amount?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    Amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    PaymentID?: SortOrder
    PaymentDateTime?: SortOrder
    PaymentMethod?: SortOrder
    TransactionStatus?: SortOrder
    Amount?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    PaymentID?: SortOrder
    PaymentDateTime?: SortOrder
    PaymentMethod?: SortOrder
    TransactionStatus?: SortOrder
    Amount?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    Amount?: SortOrder
  }

  export type Airline_Tel_NoTelNoAirlineNameCompoundUniqueInput = {
    TelNo: string
    AirlineName: string
  }

  export type Airline_Tel_NoCountOrderByAggregateInput = {
    TelNo?: SortOrder
    AirlineName?: SortOrder
  }

  export type Airline_Tel_NoMaxOrderByAggregateInput = {
    TelNo?: SortOrder
    AirlineName?: SortOrder
  }

  export type Airline_Tel_NoMinOrderByAggregateInput = {
    TelNo?: SortOrder
    AirlineName?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionCountOrderByAggregateInput = {
    SessionID?: SortOrder
    UserAccountID?: SortOrder
    TokenHash?: SortOrder
    CreatedAt?: SortOrder
    LastSeenAt?: SortOrder
    IdleExpiresAt?: SortOrder
    AbsoluteExpiresAt?: SortOrder
    RevokedAt?: SortOrder
    RevokeReason?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    SessionID?: SortOrder
    UserAccountID?: SortOrder
    TokenHash?: SortOrder
    CreatedAt?: SortOrder
    LastSeenAt?: SortOrder
    IdleExpiresAt?: SortOrder
    AbsoluteExpiresAt?: SortOrder
    RevokedAt?: SortOrder
    RevokeReason?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    SessionID?: SortOrder
    UserAccountID?: SortOrder
    TokenHash?: SortOrder
    CreatedAt?: SortOrder
    LastSeenAt?: SortOrder
    IdleExpiresAt?: SortOrder
    AbsoluteExpiresAt?: SortOrder
    RevokedAt?: SortOrder
    RevokeReason?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OperateCreateNestedManyWithoutAirportInput = {
    create?: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput> | OperateCreateWithoutAirportInput[] | OperateUncheckedCreateWithoutAirportInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirportInput | OperateCreateOrConnectWithoutAirportInput[]
    createMany?: OperateCreateManyAirportInputEnvelope
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
  }

  export type FlightCreateNestedManyWithoutDepartureAirportInput = {
    create?: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput> | FlightCreateWithoutDepartureAirportInput[] | FlightUncheckedCreateWithoutDepartureAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutDepartureAirportInput | FlightCreateOrConnectWithoutDepartureAirportInput[]
    createMany?: FlightCreateManyDepartureAirportInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type FlightCreateNestedManyWithoutArrivalAirportInput = {
    create?: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput> | FlightCreateWithoutArrivalAirportInput[] | FlightUncheckedCreateWithoutArrivalAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutArrivalAirportInput | FlightCreateOrConnectWithoutArrivalAirportInput[]
    createMany?: FlightCreateManyArrivalAirportInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type OperateUncheckedCreateNestedManyWithoutAirportInput = {
    create?: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput> | OperateCreateWithoutAirportInput[] | OperateUncheckedCreateWithoutAirportInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirportInput | OperateCreateOrConnectWithoutAirportInput[]
    createMany?: OperateCreateManyAirportInputEnvelope
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
  }

  export type FlightUncheckedCreateNestedManyWithoutDepartureAirportInput = {
    create?: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput> | FlightCreateWithoutDepartureAirportInput[] | FlightUncheckedCreateWithoutDepartureAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutDepartureAirportInput | FlightCreateOrConnectWithoutDepartureAirportInput[]
    createMany?: FlightCreateManyDepartureAirportInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type FlightUncheckedCreateNestedManyWithoutArrivalAirportInput = {
    create?: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput> | FlightCreateWithoutArrivalAirportInput[] | FlightUncheckedCreateWithoutArrivalAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutArrivalAirportInput | FlightCreateOrConnectWithoutArrivalAirportInput[]
    createMany?: FlightCreateManyArrivalAirportInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type OperateUpdateManyWithoutAirportNestedInput = {
    create?: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput> | OperateCreateWithoutAirportInput[] | OperateUncheckedCreateWithoutAirportInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirportInput | OperateCreateOrConnectWithoutAirportInput[]
    upsert?: OperateUpsertWithWhereUniqueWithoutAirportInput | OperateUpsertWithWhereUniqueWithoutAirportInput[]
    createMany?: OperateCreateManyAirportInputEnvelope
    set?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    disconnect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    delete?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    update?: OperateUpdateWithWhereUniqueWithoutAirportInput | OperateUpdateWithWhereUniqueWithoutAirportInput[]
    updateMany?: OperateUpdateManyWithWhereWithoutAirportInput | OperateUpdateManyWithWhereWithoutAirportInput[]
    deleteMany?: OperateScalarWhereInput | OperateScalarWhereInput[]
  }

  export type FlightUpdateManyWithoutDepartureAirportNestedInput = {
    create?: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput> | FlightCreateWithoutDepartureAirportInput[] | FlightUncheckedCreateWithoutDepartureAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutDepartureAirportInput | FlightCreateOrConnectWithoutDepartureAirportInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutDepartureAirportInput | FlightUpsertWithWhereUniqueWithoutDepartureAirportInput[]
    createMany?: FlightCreateManyDepartureAirportInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutDepartureAirportInput | FlightUpdateWithWhereUniqueWithoutDepartureAirportInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutDepartureAirportInput | FlightUpdateManyWithWhereWithoutDepartureAirportInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type FlightUpdateManyWithoutArrivalAirportNestedInput = {
    create?: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput> | FlightCreateWithoutArrivalAirportInput[] | FlightUncheckedCreateWithoutArrivalAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutArrivalAirportInput | FlightCreateOrConnectWithoutArrivalAirportInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutArrivalAirportInput | FlightUpsertWithWhereUniqueWithoutArrivalAirportInput[]
    createMany?: FlightCreateManyArrivalAirportInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutArrivalAirportInput | FlightUpdateWithWhereUniqueWithoutArrivalAirportInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutArrivalAirportInput | FlightUpdateManyWithWhereWithoutArrivalAirportInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type OperateUncheckedUpdateManyWithoutAirportNestedInput = {
    create?: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput> | OperateCreateWithoutAirportInput[] | OperateUncheckedCreateWithoutAirportInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirportInput | OperateCreateOrConnectWithoutAirportInput[]
    upsert?: OperateUpsertWithWhereUniqueWithoutAirportInput | OperateUpsertWithWhereUniqueWithoutAirportInput[]
    createMany?: OperateCreateManyAirportInputEnvelope
    set?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    disconnect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    delete?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    update?: OperateUpdateWithWhereUniqueWithoutAirportInput | OperateUpdateWithWhereUniqueWithoutAirportInput[]
    updateMany?: OperateUpdateManyWithWhereWithoutAirportInput | OperateUpdateManyWithWhereWithoutAirportInput[]
    deleteMany?: OperateScalarWhereInput | OperateScalarWhereInput[]
  }

  export type FlightUncheckedUpdateManyWithoutDepartureAirportNestedInput = {
    create?: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput> | FlightCreateWithoutDepartureAirportInput[] | FlightUncheckedCreateWithoutDepartureAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutDepartureAirportInput | FlightCreateOrConnectWithoutDepartureAirportInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutDepartureAirportInput | FlightUpsertWithWhereUniqueWithoutDepartureAirportInput[]
    createMany?: FlightCreateManyDepartureAirportInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutDepartureAirportInput | FlightUpdateWithWhereUniqueWithoutDepartureAirportInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutDepartureAirportInput | FlightUpdateManyWithWhereWithoutDepartureAirportInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type FlightUncheckedUpdateManyWithoutArrivalAirportNestedInput = {
    create?: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput> | FlightCreateWithoutArrivalAirportInput[] | FlightUncheckedCreateWithoutArrivalAirportInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutArrivalAirportInput | FlightCreateOrConnectWithoutArrivalAirportInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutArrivalAirportInput | FlightUpsertWithWhereUniqueWithoutArrivalAirportInput[]
    createMany?: FlightCreateManyArrivalAirportInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutArrivalAirportInput | FlightUpdateWithWhereUniqueWithoutArrivalAirportInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutArrivalAirportInput | FlightUpdateManyWithWhereWithoutArrivalAirportInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type OperateCreateNestedManyWithoutAirlineInput = {
    create?: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput> | OperateCreateWithoutAirlineInput[] | OperateUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirlineInput | OperateCreateOrConnectWithoutAirlineInput[]
    createMany?: OperateCreateManyAirlineInputEnvelope
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
  }

  export type AircraftCreateNestedManyWithoutAirlineInput = {
    create?: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput> | AircraftCreateWithoutAirlineInput[] | AircraftUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: AircraftCreateOrConnectWithoutAirlineInput | AircraftCreateOrConnectWithoutAirlineInput[]
    createMany?: AircraftCreateManyAirlineInputEnvelope
    connect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
  }

  export type FlightCreateNestedManyWithoutAirlineInput = {
    create?: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput> | FlightCreateWithoutAirlineInput[] | FlightUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAirlineInput | FlightCreateOrConnectWithoutAirlineInput[]
    createMany?: FlightCreateManyAirlineInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type Airline_Tel_NoCreateNestedManyWithoutAirlineInput = {
    create?: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput> | Airline_Tel_NoCreateWithoutAirlineInput[] | Airline_Tel_NoUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_Tel_NoCreateOrConnectWithoutAirlineInput | Airline_Tel_NoCreateOrConnectWithoutAirlineInput[]
    createMany?: Airline_Tel_NoCreateManyAirlineInputEnvelope
    connect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
  }

  export type Airline_MessageCreateNestedManyWithoutAirlineInput = {
    create?: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput> | Airline_MessageCreateWithoutAirlineInput[] | Airline_MessageUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAirlineInput | Airline_MessageCreateOrConnectWithoutAirlineInput[]
    createMany?: Airline_MessageCreateManyAirlineInputEnvelope
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutAirlineInput = {
    create?: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput> | ContactCreateWithoutAirlineInput[] | ContactUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAirlineInput | ContactCreateOrConnectWithoutAirlineInput[]
    createMany?: ContactCreateManyAirlineInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type OperateUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput> | OperateCreateWithoutAirlineInput[] | OperateUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirlineInput | OperateCreateOrConnectWithoutAirlineInput[]
    createMany?: OperateCreateManyAirlineInputEnvelope
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
  }

  export type AircraftUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput> | AircraftCreateWithoutAirlineInput[] | AircraftUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: AircraftCreateOrConnectWithoutAirlineInput | AircraftCreateOrConnectWithoutAirlineInput[]
    createMany?: AircraftCreateManyAirlineInputEnvelope
    connect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
  }

  export type FlightUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput> | FlightCreateWithoutAirlineInput[] | FlightUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAirlineInput | FlightCreateOrConnectWithoutAirlineInput[]
    createMany?: FlightCreateManyAirlineInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput> | Airline_Tel_NoCreateWithoutAirlineInput[] | Airline_Tel_NoUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_Tel_NoCreateOrConnectWithoutAirlineInput | Airline_Tel_NoCreateOrConnectWithoutAirlineInput[]
    createMany?: Airline_Tel_NoCreateManyAirlineInputEnvelope
    connect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
  }

  export type Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput> | Airline_MessageCreateWithoutAirlineInput[] | Airline_MessageUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAirlineInput | Airline_MessageCreateOrConnectWithoutAirlineInput[]
    createMany?: Airline_MessageCreateManyAirlineInputEnvelope
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutAirlineInput = {
    create?: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput> | ContactCreateWithoutAirlineInput[] | ContactUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAirlineInput | ContactCreateOrConnectWithoutAirlineInput[]
    createMany?: ContactCreateManyAirlineInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OperateUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput> | OperateCreateWithoutAirlineInput[] | OperateUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirlineInput | OperateCreateOrConnectWithoutAirlineInput[]
    upsert?: OperateUpsertWithWhereUniqueWithoutAirlineInput | OperateUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: OperateCreateManyAirlineInputEnvelope
    set?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    disconnect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    delete?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    update?: OperateUpdateWithWhereUniqueWithoutAirlineInput | OperateUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: OperateUpdateManyWithWhereWithoutAirlineInput | OperateUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: OperateScalarWhereInput | OperateScalarWhereInput[]
  }

  export type AircraftUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput> | AircraftCreateWithoutAirlineInput[] | AircraftUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: AircraftCreateOrConnectWithoutAirlineInput | AircraftCreateOrConnectWithoutAirlineInput[]
    upsert?: AircraftUpsertWithWhereUniqueWithoutAirlineInput | AircraftUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: AircraftCreateManyAirlineInputEnvelope
    set?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    disconnect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    delete?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    connect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    update?: AircraftUpdateWithWhereUniqueWithoutAirlineInput | AircraftUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: AircraftUpdateManyWithWhereWithoutAirlineInput | AircraftUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: AircraftScalarWhereInput | AircraftScalarWhereInput[]
  }

  export type FlightUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput> | FlightCreateWithoutAirlineInput[] | FlightUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAirlineInput | FlightCreateOrConnectWithoutAirlineInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutAirlineInput | FlightUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: FlightCreateManyAirlineInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutAirlineInput | FlightUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutAirlineInput | FlightUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type Airline_Tel_NoUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput> | Airline_Tel_NoCreateWithoutAirlineInput[] | Airline_Tel_NoUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_Tel_NoCreateOrConnectWithoutAirlineInput | Airline_Tel_NoCreateOrConnectWithoutAirlineInput[]
    upsert?: Airline_Tel_NoUpsertWithWhereUniqueWithoutAirlineInput | Airline_Tel_NoUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: Airline_Tel_NoCreateManyAirlineInputEnvelope
    set?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    disconnect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    delete?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    connect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    update?: Airline_Tel_NoUpdateWithWhereUniqueWithoutAirlineInput | Airline_Tel_NoUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: Airline_Tel_NoUpdateManyWithWhereWithoutAirlineInput | Airline_Tel_NoUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: Airline_Tel_NoScalarWhereInput | Airline_Tel_NoScalarWhereInput[]
  }

  export type Airline_MessageUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput> | Airline_MessageCreateWithoutAirlineInput[] | Airline_MessageUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAirlineInput | Airline_MessageCreateOrConnectWithoutAirlineInput[]
    upsert?: Airline_MessageUpsertWithWhereUniqueWithoutAirlineInput | Airline_MessageUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: Airline_MessageCreateManyAirlineInputEnvelope
    set?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    disconnect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    delete?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    update?: Airline_MessageUpdateWithWhereUniqueWithoutAirlineInput | Airline_MessageUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: Airline_MessageUpdateManyWithWhereWithoutAirlineInput | Airline_MessageUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput> | ContactCreateWithoutAirlineInput[] | ContactUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAirlineInput | ContactCreateOrConnectWithoutAirlineInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutAirlineInput | ContactUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: ContactCreateManyAirlineInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutAirlineInput | ContactUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutAirlineInput | ContactUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type OperateUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput> | OperateCreateWithoutAirlineInput[] | OperateUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: OperateCreateOrConnectWithoutAirlineInput | OperateCreateOrConnectWithoutAirlineInput[]
    upsert?: OperateUpsertWithWhereUniqueWithoutAirlineInput | OperateUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: OperateCreateManyAirlineInputEnvelope
    set?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    disconnect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    delete?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    connect?: OperateWhereUniqueInput | OperateWhereUniqueInput[]
    update?: OperateUpdateWithWhereUniqueWithoutAirlineInput | OperateUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: OperateUpdateManyWithWhereWithoutAirlineInput | OperateUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: OperateScalarWhereInput | OperateScalarWhereInput[]
  }

  export type AircraftUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput> | AircraftCreateWithoutAirlineInput[] | AircraftUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: AircraftCreateOrConnectWithoutAirlineInput | AircraftCreateOrConnectWithoutAirlineInput[]
    upsert?: AircraftUpsertWithWhereUniqueWithoutAirlineInput | AircraftUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: AircraftCreateManyAirlineInputEnvelope
    set?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    disconnect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    delete?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    connect?: AircraftWhereUniqueInput | AircraftWhereUniqueInput[]
    update?: AircraftUpdateWithWhereUniqueWithoutAirlineInput | AircraftUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: AircraftUpdateManyWithWhereWithoutAirlineInput | AircraftUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: AircraftScalarWhereInput | AircraftScalarWhereInput[]
  }

  export type FlightUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput> | FlightCreateWithoutAirlineInput[] | FlightUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAirlineInput | FlightCreateOrConnectWithoutAirlineInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutAirlineInput | FlightUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: FlightCreateManyAirlineInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutAirlineInput | FlightUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutAirlineInput | FlightUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput> | Airline_Tel_NoCreateWithoutAirlineInput[] | Airline_Tel_NoUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_Tel_NoCreateOrConnectWithoutAirlineInput | Airline_Tel_NoCreateOrConnectWithoutAirlineInput[]
    upsert?: Airline_Tel_NoUpsertWithWhereUniqueWithoutAirlineInput | Airline_Tel_NoUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: Airline_Tel_NoCreateManyAirlineInputEnvelope
    set?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    disconnect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    delete?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    connect?: Airline_Tel_NoWhereUniqueInput | Airline_Tel_NoWhereUniqueInput[]
    update?: Airline_Tel_NoUpdateWithWhereUniqueWithoutAirlineInput | Airline_Tel_NoUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: Airline_Tel_NoUpdateManyWithWhereWithoutAirlineInput | Airline_Tel_NoUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: Airline_Tel_NoScalarWhereInput | Airline_Tel_NoScalarWhereInput[]
  }

  export type Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput> | Airline_MessageCreateWithoutAirlineInput[] | Airline_MessageUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAirlineInput | Airline_MessageCreateOrConnectWithoutAirlineInput[]
    upsert?: Airline_MessageUpsertWithWhereUniqueWithoutAirlineInput | Airline_MessageUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: Airline_MessageCreateManyAirlineInputEnvelope
    set?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    disconnect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    delete?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    update?: Airline_MessageUpdateWithWhereUniqueWithoutAirlineInput | Airline_MessageUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: Airline_MessageUpdateManyWithWhereWithoutAirlineInput | Airline_MessageUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutAirlineNestedInput = {
    create?: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput> | ContactCreateWithoutAirlineInput[] | ContactUncheckedCreateWithoutAirlineInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAirlineInput | ContactCreateOrConnectWithoutAirlineInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutAirlineInput | ContactUpsertWithWhereUniqueWithoutAirlineInput[]
    createMany?: ContactCreateManyAirlineInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutAirlineInput | ContactUpdateWithWhereUniqueWithoutAirlineInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutAirlineInput | ContactUpdateManyWithWhereWithoutAirlineInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AirlineCreateNestedOneWithoutAircraftsInput = {
    create?: XOR<AirlineCreateWithoutAircraftsInput, AirlineUncheckedCreateWithoutAircraftsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutAircraftsInput
    connect?: AirlineWhereUniqueInput
  }

  export type SeatCreateNestedManyWithoutAircraftInput = {
    create?: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput> | SeatCreateWithoutAircraftInput[] | SeatUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutAircraftInput | SeatCreateOrConnectWithoutAircraftInput[]
    createMany?: SeatCreateManyAircraftInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type FlightCreateNestedManyWithoutAircraftInput = {
    create?: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput> | FlightCreateWithoutAircraftInput[] | FlightUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAircraftInput | FlightCreateOrConnectWithoutAircraftInput[]
    createMany?: FlightCreateManyAircraftInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type CabinClassCreateNestedManyWithoutAircraftInput = {
    create?: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput> | CabinClassCreateWithoutAircraftInput[] | CabinClassUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: CabinClassCreateOrConnectWithoutAircraftInput | CabinClassCreateOrConnectWithoutAircraftInput[]
    createMany?: CabinClassCreateManyAircraftInputEnvelope
    connect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
  }

  export type SeatUncheckedCreateNestedManyWithoutAircraftInput = {
    create?: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput> | SeatCreateWithoutAircraftInput[] | SeatUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutAircraftInput | SeatCreateOrConnectWithoutAircraftInput[]
    createMany?: SeatCreateManyAircraftInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type FlightUncheckedCreateNestedManyWithoutAircraftInput = {
    create?: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput> | FlightCreateWithoutAircraftInput[] | FlightUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAircraftInput | FlightCreateOrConnectWithoutAircraftInput[]
    createMany?: FlightCreateManyAircraftInputEnvelope
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
  }

  export type CabinClassUncheckedCreateNestedManyWithoutAircraftInput = {
    create?: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput> | CabinClassCreateWithoutAircraftInput[] | CabinClassUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: CabinClassCreateOrConnectWithoutAircraftInput | CabinClassCreateOrConnectWithoutAircraftInput[]
    createMany?: CabinClassCreateManyAircraftInputEnvelope
    connect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
  }

  export type AirlineUpdateOneRequiredWithoutAircraftsNestedInput = {
    create?: XOR<AirlineCreateWithoutAircraftsInput, AirlineUncheckedCreateWithoutAircraftsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutAircraftsInput
    upsert?: AirlineUpsertWithoutAircraftsInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutAircraftsInput, AirlineUpdateWithoutAircraftsInput>, AirlineUncheckedUpdateWithoutAircraftsInput>
  }

  export type SeatUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput> | SeatCreateWithoutAircraftInput[] | SeatUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutAircraftInput | SeatCreateOrConnectWithoutAircraftInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutAircraftInput | SeatUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: SeatCreateManyAircraftInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutAircraftInput | SeatUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutAircraftInput | SeatUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type FlightUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput> | FlightCreateWithoutAircraftInput[] | FlightUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAircraftInput | FlightCreateOrConnectWithoutAircraftInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutAircraftInput | FlightUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: FlightCreateManyAircraftInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutAircraftInput | FlightUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutAircraftInput | FlightUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type CabinClassUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput> | CabinClassCreateWithoutAircraftInput[] | CabinClassUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: CabinClassCreateOrConnectWithoutAircraftInput | CabinClassCreateOrConnectWithoutAircraftInput[]
    upsert?: CabinClassUpsertWithWhereUniqueWithoutAircraftInput | CabinClassUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: CabinClassCreateManyAircraftInputEnvelope
    set?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    disconnect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    delete?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    connect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    update?: CabinClassUpdateWithWhereUniqueWithoutAircraftInput | CabinClassUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: CabinClassUpdateManyWithWhereWithoutAircraftInput | CabinClassUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: CabinClassScalarWhereInput | CabinClassScalarWhereInput[]
  }

  export type SeatUncheckedUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput> | SeatCreateWithoutAircraftInput[] | SeatUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutAircraftInput | SeatCreateOrConnectWithoutAircraftInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutAircraftInput | SeatUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: SeatCreateManyAircraftInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutAircraftInput | SeatUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutAircraftInput | SeatUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type FlightUncheckedUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput> | FlightCreateWithoutAircraftInput[] | FlightUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: FlightCreateOrConnectWithoutAircraftInput | FlightCreateOrConnectWithoutAircraftInput[]
    upsert?: FlightUpsertWithWhereUniqueWithoutAircraftInput | FlightUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: FlightCreateManyAircraftInputEnvelope
    set?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    disconnect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    delete?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    connect?: FlightWhereUniqueInput | FlightWhereUniqueInput[]
    update?: FlightUpdateWithWhereUniqueWithoutAircraftInput | FlightUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: FlightUpdateManyWithWhereWithoutAircraftInput | FlightUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: FlightScalarWhereInput | FlightScalarWhereInput[]
  }

  export type CabinClassUncheckedUpdateManyWithoutAircraftNestedInput = {
    create?: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput> | CabinClassCreateWithoutAircraftInput[] | CabinClassUncheckedCreateWithoutAircraftInput[]
    connectOrCreate?: CabinClassCreateOrConnectWithoutAircraftInput | CabinClassCreateOrConnectWithoutAircraftInput[]
    upsert?: CabinClassUpsertWithWhereUniqueWithoutAircraftInput | CabinClassUpsertWithWhereUniqueWithoutAircraftInput[]
    createMany?: CabinClassCreateManyAircraftInputEnvelope
    set?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    disconnect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    delete?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    connect?: CabinClassWhereUniqueInput | CabinClassWhereUniqueInput[]
    update?: CabinClassUpdateWithWhereUniqueWithoutAircraftInput | CabinClassUpdateWithWhereUniqueWithoutAircraftInput[]
    updateMany?: CabinClassUpdateManyWithWhereWithoutAircraftInput | CabinClassUpdateManyWithWhereWithoutAircraftInput[]
    deleteMany?: CabinClassScalarWhereInput | CabinClassScalarWhereInput[]
  }

  export type AirportCreateNestedOneWithoutArrivalFlightsInput = {
    create?: XOR<AirportCreateWithoutArrivalFlightsInput, AirportUncheckedCreateWithoutArrivalFlightsInput>
    connectOrCreate?: AirportCreateOrConnectWithoutArrivalFlightsInput
    connect?: AirportWhereUniqueInput
  }

  export type AirportCreateNestedOneWithoutDepartureFlightsInput = {
    create?: XOR<AirportCreateWithoutDepartureFlightsInput, AirportUncheckedCreateWithoutDepartureFlightsInput>
    connectOrCreate?: AirportCreateOrConnectWithoutDepartureFlightsInput
    connect?: AirportWhereUniqueInput
  }

  export type AirlineCreateNestedOneWithoutFlightsInput = {
    create?: XOR<AirlineCreateWithoutFlightsInput, AirlineUncheckedCreateWithoutFlightsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutFlightsInput
    connect?: AirlineWhereUniqueInput
  }

  export type AircraftCreateNestedOneWithoutFlightsInput = {
    create?: XOR<AircraftCreateWithoutFlightsInput, AircraftUncheckedCreateWithoutFlightsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutFlightsInput
    connect?: AircraftWhereUniqueInput
  }

  export type Assigned_ToCreateNestedManyWithoutFlightInput = {
    create?: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput> | Assigned_ToCreateWithoutFlightInput[] | Assigned_ToUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutFlightInput | Assigned_ToCreateOrConnectWithoutFlightInput[]
    createMany?: Assigned_ToCreateManyFlightInputEnvelope
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutFlightInput = {
    create?: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput> | TicketCreateWithoutFlightInput[] | TicketUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutFlightInput | TicketCreateOrConnectWithoutFlightInput[]
    createMany?: TicketCreateManyFlightInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type Assigned_ToUncheckedCreateNestedManyWithoutFlightInput = {
    create?: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput> | Assigned_ToCreateWithoutFlightInput[] | Assigned_ToUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutFlightInput | Assigned_ToCreateOrConnectWithoutFlightInput[]
    createMany?: Assigned_ToCreateManyFlightInputEnvelope
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutFlightInput = {
    create?: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput> | TicketCreateWithoutFlightInput[] | TicketUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutFlightInput | TicketCreateOrConnectWithoutFlightInput[]
    createMany?: TicketCreateManyFlightInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput = {
    create?: XOR<AirportCreateWithoutArrivalFlightsInput, AirportUncheckedCreateWithoutArrivalFlightsInput>
    connectOrCreate?: AirportCreateOrConnectWithoutArrivalFlightsInput
    upsert?: AirportUpsertWithoutArrivalFlightsInput
    connect?: AirportWhereUniqueInput
    update?: XOR<XOR<AirportUpdateToOneWithWhereWithoutArrivalFlightsInput, AirportUpdateWithoutArrivalFlightsInput>, AirportUncheckedUpdateWithoutArrivalFlightsInput>
  }

  export type AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput = {
    create?: XOR<AirportCreateWithoutDepartureFlightsInput, AirportUncheckedCreateWithoutDepartureFlightsInput>
    connectOrCreate?: AirportCreateOrConnectWithoutDepartureFlightsInput
    upsert?: AirportUpsertWithoutDepartureFlightsInput
    connect?: AirportWhereUniqueInput
    update?: XOR<XOR<AirportUpdateToOneWithWhereWithoutDepartureFlightsInput, AirportUpdateWithoutDepartureFlightsInput>, AirportUncheckedUpdateWithoutDepartureFlightsInput>
  }

  export type AirlineUpdateOneRequiredWithoutFlightsNestedInput = {
    create?: XOR<AirlineCreateWithoutFlightsInput, AirlineUncheckedCreateWithoutFlightsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutFlightsInput
    upsert?: AirlineUpsertWithoutFlightsInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutFlightsInput, AirlineUpdateWithoutFlightsInput>, AirlineUncheckedUpdateWithoutFlightsInput>
  }

  export type AircraftUpdateOneRequiredWithoutFlightsNestedInput = {
    create?: XOR<AircraftCreateWithoutFlightsInput, AircraftUncheckedCreateWithoutFlightsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutFlightsInput
    upsert?: AircraftUpsertWithoutFlightsInput
    connect?: AircraftWhereUniqueInput
    update?: XOR<XOR<AircraftUpdateToOneWithWhereWithoutFlightsInput, AircraftUpdateWithoutFlightsInput>, AircraftUncheckedUpdateWithoutFlightsInput>
  }

  export type Assigned_ToUpdateManyWithoutFlightNestedInput = {
    create?: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput> | Assigned_ToCreateWithoutFlightInput[] | Assigned_ToUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutFlightInput | Assigned_ToCreateOrConnectWithoutFlightInput[]
    upsert?: Assigned_ToUpsertWithWhereUniqueWithoutFlightInput | Assigned_ToUpsertWithWhereUniqueWithoutFlightInput[]
    createMany?: Assigned_ToCreateManyFlightInputEnvelope
    set?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    disconnect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    delete?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    update?: Assigned_ToUpdateWithWhereUniqueWithoutFlightInput | Assigned_ToUpdateWithWhereUniqueWithoutFlightInput[]
    updateMany?: Assigned_ToUpdateManyWithWhereWithoutFlightInput | Assigned_ToUpdateManyWithWhereWithoutFlightInput[]
    deleteMany?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutFlightNestedInput = {
    create?: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput> | TicketCreateWithoutFlightInput[] | TicketUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutFlightInput | TicketCreateOrConnectWithoutFlightInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutFlightInput | TicketUpsertWithWhereUniqueWithoutFlightInput[]
    createMany?: TicketCreateManyFlightInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutFlightInput | TicketUpdateWithWhereUniqueWithoutFlightInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutFlightInput | TicketUpdateManyWithWhereWithoutFlightInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput = {
    create?: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput> | Assigned_ToCreateWithoutFlightInput[] | Assigned_ToUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutFlightInput | Assigned_ToCreateOrConnectWithoutFlightInput[]
    upsert?: Assigned_ToUpsertWithWhereUniqueWithoutFlightInput | Assigned_ToUpsertWithWhereUniqueWithoutFlightInput[]
    createMany?: Assigned_ToCreateManyFlightInputEnvelope
    set?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    disconnect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    delete?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    update?: Assigned_ToUpdateWithWhereUniqueWithoutFlightInput | Assigned_ToUpdateWithWhereUniqueWithoutFlightInput[]
    updateMany?: Assigned_ToUpdateManyWithWhereWithoutFlightInput | Assigned_ToUpdateManyWithWhereWithoutFlightInput[]
    deleteMany?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutFlightNestedInput = {
    create?: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput> | TicketCreateWithoutFlightInput[] | TicketUncheckedCreateWithoutFlightInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutFlightInput | TicketCreateOrConnectWithoutFlightInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutFlightInput | TicketUpsertWithWhereUniqueWithoutFlightInput[]
    createMany?: TicketCreateManyFlightInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutFlightInput | TicketUpdateWithWhereUniqueWithoutFlightInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutFlightInput | TicketUpdateManyWithWhereWithoutFlightInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type FlightCreateNestedOneWithoutTicketsInput = {
    create?: XOR<FlightCreateWithoutTicketsInput, FlightUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: FlightCreateOrConnectWithoutTicketsInput
    connect?: FlightWhereUniqueInput
  }

  export type SeatCreateNestedOneWithoutTicketsInput = {
    create?: XOR<SeatCreateWithoutTicketsInput, SeatUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: SeatCreateOrConnectWithoutTicketsInput
    connect?: SeatWhereUniqueInput
  }

  export type PurchaseCreateNestedOneWithoutTicketInput = {
    create?: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutTicketInput
    connect?: PurchaseWhereUniqueInput
  }

  export type Domestic_TicketCreateNestedOneWithoutTicketInput = {
    create?: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: Domestic_TicketCreateOrConnectWithoutTicketInput
    connect?: Domestic_TicketWhereUniqueInput
  }

  export type International_TicketCreateNestedOneWithoutTicketInput = {
    create?: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: International_TicketCreateOrConnectWithoutTicketInput
    connect?: International_TicketWhereUniqueInput
  }

  export type Round_Trip_TicketCreateNestedOneWithoutTicket1Input = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket1Input
    connect?: Round_Trip_TicketWhereUniqueInput
  }

  export type Round_Trip_TicketCreateNestedOneWithoutTicket2Input = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket2Input
    connect?: Round_Trip_TicketWhereUniqueInput
  }

  export type PurchaseUncheckedCreateNestedOneWithoutTicketInput = {
    create?: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutTicketInput
    connect?: PurchaseWhereUniqueInput
  }

  export type Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput = {
    create?: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: Domestic_TicketCreateOrConnectWithoutTicketInput
    connect?: Domestic_TicketWhereUniqueInput
  }

  export type International_TicketUncheckedCreateNestedOneWithoutTicketInput = {
    create?: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: International_TicketCreateOrConnectWithoutTicketInput
    connect?: International_TicketWhereUniqueInput
  }

  export type Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket1Input
    connect?: Round_Trip_TicketWhereUniqueInput
  }

  export type Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket2Input
    connect?: Round_Trip_TicketWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FlightUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<FlightCreateWithoutTicketsInput, FlightUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: FlightCreateOrConnectWithoutTicketsInput
    upsert?: FlightUpsertWithoutTicketsInput
    connect?: FlightWhereUniqueInput
    update?: XOR<XOR<FlightUpdateToOneWithWhereWithoutTicketsInput, FlightUpdateWithoutTicketsInput>, FlightUncheckedUpdateWithoutTicketsInput>
  }

  export type SeatUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<SeatCreateWithoutTicketsInput, SeatUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: SeatCreateOrConnectWithoutTicketsInput
    upsert?: SeatUpsertWithoutTicketsInput
    connect?: SeatWhereUniqueInput
    update?: XOR<XOR<SeatUpdateToOneWithWhereWithoutTicketsInput, SeatUpdateWithoutTicketsInput>, SeatUncheckedUpdateWithoutTicketsInput>
  }

  export type PurchaseUpdateOneWithoutTicketNestedInput = {
    create?: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutTicketInput
    upsert?: PurchaseUpsertWithoutTicketInput
    disconnect?: PurchaseWhereInput | boolean
    delete?: PurchaseWhereInput | boolean
    connect?: PurchaseWhereUniqueInput
    update?: XOR<XOR<PurchaseUpdateToOneWithWhereWithoutTicketInput, PurchaseUpdateWithoutTicketInput>, PurchaseUncheckedUpdateWithoutTicketInput>
  }

  export type Domestic_TicketUpdateOneWithoutTicketNestedInput = {
    create?: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: Domestic_TicketCreateOrConnectWithoutTicketInput
    upsert?: Domestic_TicketUpsertWithoutTicketInput
    disconnect?: Domestic_TicketWhereInput | boolean
    delete?: Domestic_TicketWhereInput | boolean
    connect?: Domestic_TicketWhereUniqueInput
    update?: XOR<XOR<Domestic_TicketUpdateToOneWithWhereWithoutTicketInput, Domestic_TicketUpdateWithoutTicketInput>, Domestic_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type International_TicketUpdateOneWithoutTicketNestedInput = {
    create?: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: International_TicketCreateOrConnectWithoutTicketInput
    upsert?: International_TicketUpsertWithoutTicketInput
    disconnect?: International_TicketWhereInput | boolean
    delete?: International_TicketWhereInput | boolean
    connect?: International_TicketWhereUniqueInput
    update?: XOR<XOR<International_TicketUpdateToOneWithWhereWithoutTicketInput, International_TicketUpdateWithoutTicketInput>, International_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type Round_Trip_TicketUpdateOneWithoutTicket1NestedInput = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket1Input
    upsert?: Round_Trip_TicketUpsertWithoutTicket1Input
    disconnect?: Round_Trip_TicketWhereInput | boolean
    delete?: Round_Trip_TicketWhereInput | boolean
    connect?: Round_Trip_TicketWhereUniqueInput
    update?: XOR<XOR<Round_Trip_TicketUpdateToOneWithWhereWithoutTicket1Input, Round_Trip_TicketUpdateWithoutTicket1Input>, Round_Trip_TicketUncheckedUpdateWithoutTicket1Input>
  }

  export type Round_Trip_TicketUpdateOneWithoutTicket2NestedInput = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket2Input
    upsert?: Round_Trip_TicketUpsertWithoutTicket2Input
    disconnect?: Round_Trip_TicketWhereInput | boolean
    delete?: Round_Trip_TicketWhereInput | boolean
    connect?: Round_Trip_TicketWhereUniqueInput
    update?: XOR<XOR<Round_Trip_TicketUpdateToOneWithWhereWithoutTicket2Input, Round_Trip_TicketUpdateWithoutTicket2Input>, Round_Trip_TicketUncheckedUpdateWithoutTicket2Input>
  }

  export type PurchaseUncheckedUpdateOneWithoutTicketNestedInput = {
    create?: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutTicketInput
    upsert?: PurchaseUpsertWithoutTicketInput
    disconnect?: PurchaseWhereInput | boolean
    delete?: PurchaseWhereInput | boolean
    connect?: PurchaseWhereUniqueInput
    update?: XOR<XOR<PurchaseUpdateToOneWithWhereWithoutTicketInput, PurchaseUpdateWithoutTicketInput>, PurchaseUncheckedUpdateWithoutTicketInput>
  }

  export type Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput = {
    create?: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: Domestic_TicketCreateOrConnectWithoutTicketInput
    upsert?: Domestic_TicketUpsertWithoutTicketInput
    disconnect?: Domestic_TicketWhereInput | boolean
    delete?: Domestic_TicketWhereInput | boolean
    connect?: Domestic_TicketWhereUniqueInput
    update?: XOR<XOR<Domestic_TicketUpdateToOneWithWhereWithoutTicketInput, Domestic_TicketUpdateWithoutTicketInput>, Domestic_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type International_TicketUncheckedUpdateOneWithoutTicketNestedInput = {
    create?: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
    connectOrCreate?: International_TicketCreateOrConnectWithoutTicketInput
    upsert?: International_TicketUpsertWithoutTicketInput
    disconnect?: International_TicketWhereInput | boolean
    delete?: International_TicketWhereInput | boolean
    connect?: International_TicketWhereUniqueInput
    update?: XOR<XOR<International_TicketUpdateToOneWithWhereWithoutTicketInput, International_TicketUpdateWithoutTicketInput>, International_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket1Input
    upsert?: Round_Trip_TicketUpsertWithoutTicket1Input
    disconnect?: Round_Trip_TicketWhereInput | boolean
    delete?: Round_Trip_TicketWhereInput | boolean
    connect?: Round_Trip_TicketWhereUniqueInput
    update?: XOR<XOR<Round_Trip_TicketUpdateToOneWithWhereWithoutTicket1Input, Round_Trip_TicketUpdateWithoutTicket1Input>, Round_Trip_TicketUncheckedUpdateWithoutTicket1Input>
  }

  export type Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput = {
    create?: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
    connectOrCreate?: Round_Trip_TicketCreateOrConnectWithoutTicket2Input
    upsert?: Round_Trip_TicketUpsertWithoutTicket2Input
    disconnect?: Round_Trip_TicketWhereInput | boolean
    delete?: Round_Trip_TicketWhereInput | boolean
    connect?: Round_Trip_TicketWhereUniqueInput
    update?: XOR<XOR<Round_Trip_TicketUpdateToOneWithWhereWithoutTicket2Input, Round_Trip_TicketUpdateWithoutTicket2Input>, Round_Trip_TicketUncheckedUpdateWithoutTicket2Input>
  }

  export type AirportCreateNestedOneWithoutOperatesInput = {
    create?: XOR<AirportCreateWithoutOperatesInput, AirportUncheckedCreateWithoutOperatesInput>
    connectOrCreate?: AirportCreateOrConnectWithoutOperatesInput
    connect?: AirportWhereUniqueInput
  }

  export type AirlineCreateNestedOneWithoutOperatesInput = {
    create?: XOR<AirlineCreateWithoutOperatesInput, AirlineUncheckedCreateWithoutOperatesInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutOperatesInput
    connect?: AirlineWhereUniqueInput
  }

  export type AirportUpdateOneRequiredWithoutOperatesNestedInput = {
    create?: XOR<AirportCreateWithoutOperatesInput, AirportUncheckedCreateWithoutOperatesInput>
    connectOrCreate?: AirportCreateOrConnectWithoutOperatesInput
    upsert?: AirportUpsertWithoutOperatesInput
    connect?: AirportWhereUniqueInput
    update?: XOR<XOR<AirportUpdateToOneWithWhereWithoutOperatesInput, AirportUpdateWithoutOperatesInput>, AirportUncheckedUpdateWithoutOperatesInput>
  }

  export type AirlineUpdateOneRequiredWithoutOperatesNestedInput = {
    create?: XOR<AirlineCreateWithoutOperatesInput, AirlineUncheckedCreateWithoutOperatesInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutOperatesInput
    upsert?: AirlineUpsertWithoutOperatesInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutOperatesInput, AirlineUpdateWithoutOperatesInput>, AirlineUncheckedUpdateWithoutOperatesInput>
  }

  export type FlightCreateNestedOneWithoutPassengersInput = {
    create?: XOR<FlightCreateWithoutPassengersInput, FlightUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: FlightCreateOrConnectWithoutPassengersInput
    connect?: FlightWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedFlightsInput = {
    create?: XOR<UserCreateWithoutAssignedFlightsInput, UserUncheckedCreateWithoutAssignedFlightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlightsInput
    connect?: UserWhereUniqueInput
  }

  export type FlightUpdateOneRequiredWithoutPassengersNestedInput = {
    create?: XOR<FlightCreateWithoutPassengersInput, FlightUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: FlightCreateOrConnectWithoutPassengersInput
    upsert?: FlightUpsertWithoutPassengersInput
    connect?: FlightWhereUniqueInput
    update?: XOR<XOR<FlightUpdateToOneWithWhereWithoutPassengersInput, FlightUpdateWithoutPassengersInput>, FlightUncheckedUpdateWithoutPassengersInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedFlightsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFlightsInput, UserUncheckedCreateWithoutAssignedFlightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlightsInput
    upsert?: UserUpsertWithoutAssignedFlightsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedFlightsInput, UserUpdateWithoutAssignedFlightsInput>, UserUncheckedUpdateWithoutAssignedFlightsInput>
  }

  export type AdminCreateNestedOneWithoutContactsInput = {
    create?: XOR<AdminCreateWithoutContactsInput, AdminUncheckedCreateWithoutContactsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutContactsInput
    connect?: AdminWhereUniqueInput
  }

  export type AirlineCreateNestedOneWithoutContactsInput = {
    create?: XOR<AirlineCreateWithoutContactsInput, AirlineUncheckedCreateWithoutContactsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutContactsInput
    connect?: AirlineWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<AdminCreateWithoutContactsInput, AdminUncheckedCreateWithoutContactsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutContactsInput
    upsert?: AdminUpsertWithoutContactsInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutContactsInput, AdminUpdateWithoutContactsInput>, AdminUncheckedUpdateWithoutContactsInput>
  }

  export type AirlineUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<AirlineCreateWithoutContactsInput, AirlineUncheckedCreateWithoutContactsInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutContactsInput
    upsert?: AirlineUpsertWithoutContactsInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutContactsInput, AirlineUpdateWithoutContactsInput>, AirlineUncheckedUpdateWithoutContactsInput>
  }

  export type AdminCreateNestedOneWithoutInvolvedInReportsInput = {
    create?: XOR<AdminCreateWithoutInvolvedInReportsInput, AdminUncheckedCreateWithoutInvolvedInReportsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutInvolvedInReportsInput
    connect?: AdminWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvolvedInReportsInput = {
    create?: XOR<UserCreateWithoutInvolvedInReportsInput, UserUncheckedCreateWithoutInvolvedInReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvolvedInReportsInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput> | ReportCreateWithoutCreatorInput[] | ReportUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatorInput | ReportCreateOrConnectWithoutCreatorInput[]
    createMany?: ReportCreateManyCreatorInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput> | ReportCreateWithoutCreatorInput[] | ReportUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatorInput | ReportCreateOrConnectWithoutCreatorInput[]
    createMany?: ReportCreateManyCreatorInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type AdminUpdateOneRequiredWithoutInvolvedInReportsNestedInput = {
    create?: XOR<AdminCreateWithoutInvolvedInReportsInput, AdminUncheckedCreateWithoutInvolvedInReportsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutInvolvedInReportsInput
    upsert?: AdminUpsertWithoutInvolvedInReportsInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutInvolvedInReportsInput, AdminUpdateWithoutInvolvedInReportsInput>, AdminUncheckedUpdateWithoutInvolvedInReportsInput>
  }

  export type UserUpdateOneRequiredWithoutInvolvedInReportsNestedInput = {
    create?: XOR<UserCreateWithoutInvolvedInReportsInput, UserUncheckedCreateWithoutInvolvedInReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvolvedInReportsInput
    upsert?: UserUpsertWithoutInvolvedInReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvolvedInReportsInput, UserUpdateWithoutInvolvedInReportsInput>, UserUncheckedUpdateWithoutInvolvedInReportsInput>
  }

  export type ReportUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput> | ReportCreateWithoutCreatorInput[] | ReportUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatorInput | ReportCreateOrConnectWithoutCreatorInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCreatorInput | ReportUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ReportCreateManyCreatorInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCreatorInput | ReportUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCreatorInput | ReportUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput> | ReportCreateWithoutCreatorInput[] | ReportUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatorInput | ReportCreateOrConnectWithoutCreatorInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCreatorInput | ReportUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ReportCreateManyCreatorInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCreatorInput | ReportUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCreatorInput | ReportUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type AircraftCreateNestedOneWithoutCabinsInput = {
    create?: XOR<AircraftCreateWithoutCabinsInput, AircraftUncheckedCreateWithoutCabinsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutCabinsInput
    connect?: AircraftWhereUniqueInput
  }

  export type AircraftUpdateOneRequiredWithoutCabinsNestedInput = {
    create?: XOR<AircraftCreateWithoutCabinsInput, AircraftUncheckedCreateWithoutCabinsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutCabinsInput
    upsert?: AircraftUpsertWithoutCabinsInput
    connect?: AircraftWhereUniqueInput
    update?: XOR<XOR<AircraftUpdateToOneWithWhereWithoutCabinsInput, AircraftUpdateWithoutCabinsInput>, AircraftUncheckedUpdateWithoutCabinsInput>
  }

  export type AircraftCreateNestedOneWithoutSeatsInput = {
    create?: XOR<AircraftCreateWithoutSeatsInput, AircraftUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutSeatsInput
    connect?: AircraftWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutSeatInput = {
    create?: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput> | TicketCreateWithoutSeatInput[] | TicketUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutSeatInput | TicketCreateOrConnectWithoutSeatInput[]
    createMany?: TicketCreateManySeatInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutSeatInput = {
    create?: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput> | TicketCreateWithoutSeatInput[] | TicketUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutSeatInput | TicketCreateOrConnectWithoutSeatInput[]
    createMany?: TicketCreateManySeatInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type AircraftUpdateOneRequiredWithoutSeatsNestedInput = {
    create?: XOR<AircraftCreateWithoutSeatsInput, AircraftUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: AircraftCreateOrConnectWithoutSeatsInput
    upsert?: AircraftUpsertWithoutSeatsInput
    connect?: AircraftWhereUniqueInput
    update?: XOR<XOR<AircraftUpdateToOneWithWhereWithoutSeatsInput, AircraftUpdateWithoutSeatsInput>, AircraftUncheckedUpdateWithoutSeatsInput>
  }

  export type TicketUpdateManyWithoutSeatNestedInput = {
    create?: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput> | TicketCreateWithoutSeatInput[] | TicketUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutSeatInput | TicketCreateOrConnectWithoutSeatInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutSeatInput | TicketUpsertWithWhereUniqueWithoutSeatInput[]
    createMany?: TicketCreateManySeatInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutSeatInput | TicketUpdateWithWhereUniqueWithoutSeatInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutSeatInput | TicketUpdateManyWithWhereWithoutSeatInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutSeatNestedInput = {
    create?: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput> | TicketCreateWithoutSeatInput[] | TicketUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutSeatInput | TicketCreateOrConnectWithoutSeatInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutSeatInput | TicketUpsertWithWhereUniqueWithoutSeatInput[]
    createMany?: TicketCreateManySeatInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutSeatInput | TicketUpdateWithWhereUniqueWithoutSeatInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutSeatInput | TicketUpdateManyWithWhereWithoutSeatInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutAdminInput = {
    create?: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAdminInput
    connect?: AccountWhereUniqueInput
  }

  export type Airline_MessageCreateNestedManyWithoutAdminInput = {
    create?: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput> | Airline_MessageCreateWithoutAdminInput[] | Airline_MessageUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAdminInput | Airline_MessageCreateOrConnectWithoutAdminInput[]
    createMany?: Airline_MessageCreateManyAdminInputEnvelope
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutAdminInput = {
    create?: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput> | ContactCreateWithoutAdminInput[] | ContactUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAdminInput | ContactCreateOrConnectWithoutAdminInput[]
    createMany?: ContactCreateManyAdminInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type Report_ToCreateNestedManyWithoutAdminInput = {
    create?: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput> | Report_ToCreateWithoutAdminInput[] | Report_ToUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutAdminInput | Report_ToCreateOrConnectWithoutAdminInput[]
    createMany?: Report_ToCreateManyAdminInputEnvelope
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
  }

  export type Airline_MessageUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput> | Airline_MessageCreateWithoutAdminInput[] | Airline_MessageUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAdminInput | Airline_MessageCreateOrConnectWithoutAdminInput[]
    createMany?: Airline_MessageCreateManyAdminInputEnvelope
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput> | ContactCreateWithoutAdminInput[] | ContactUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAdminInput | ContactCreateOrConnectWithoutAdminInput[]
    createMany?: ContactCreateManyAdminInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type Report_ToUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput> | Report_ToCreateWithoutAdminInput[] | Report_ToUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutAdminInput | Report_ToCreateOrConnectWithoutAdminInput[]
    createMany?: Report_ToCreateManyAdminInputEnvelope
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAdminInput
    upsert?: AccountUpsertWithoutAdminInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutAdminInput, AccountUpdateWithoutAdminInput>, AccountUncheckedUpdateWithoutAdminInput>
  }

  export type Airline_MessageUpdateManyWithoutAdminNestedInput = {
    create?: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput> | Airline_MessageCreateWithoutAdminInput[] | Airline_MessageUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAdminInput | Airline_MessageCreateOrConnectWithoutAdminInput[]
    upsert?: Airline_MessageUpsertWithWhereUniqueWithoutAdminInput | Airline_MessageUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: Airline_MessageCreateManyAdminInputEnvelope
    set?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    disconnect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    delete?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    update?: Airline_MessageUpdateWithWhereUniqueWithoutAdminInput | Airline_MessageUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: Airline_MessageUpdateManyWithWhereWithoutAdminInput | Airline_MessageUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput> | ContactCreateWithoutAdminInput[] | ContactUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAdminInput | ContactCreateOrConnectWithoutAdminInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutAdminInput | ContactUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ContactCreateManyAdminInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutAdminInput | ContactUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutAdminInput | ContactUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type Report_ToUpdateManyWithoutAdminNestedInput = {
    create?: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput> | Report_ToCreateWithoutAdminInput[] | Report_ToUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutAdminInput | Report_ToCreateOrConnectWithoutAdminInput[]
    upsert?: Report_ToUpsertWithWhereUniqueWithoutAdminInput | Report_ToUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: Report_ToCreateManyAdminInputEnvelope
    set?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    disconnect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    delete?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    update?: Report_ToUpdateWithWhereUniqueWithoutAdminInput | Report_ToUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: Report_ToUpdateManyWithWhereWithoutAdminInput | Report_ToUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
  }

  export type Airline_MessageUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput> | Airline_MessageCreateWithoutAdminInput[] | Airline_MessageUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Airline_MessageCreateOrConnectWithoutAdminInput | Airline_MessageCreateOrConnectWithoutAdminInput[]
    upsert?: Airline_MessageUpsertWithWhereUniqueWithoutAdminInput | Airline_MessageUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: Airline_MessageCreateManyAdminInputEnvelope
    set?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    disconnect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    delete?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    connect?: Airline_MessageWhereUniqueInput | Airline_MessageWhereUniqueInput[]
    update?: Airline_MessageUpdateWithWhereUniqueWithoutAdminInput | Airline_MessageUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: Airline_MessageUpdateManyWithWhereWithoutAdminInput | Airline_MessageUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput> | ContactCreateWithoutAdminInput[] | ContactUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutAdminInput | ContactCreateOrConnectWithoutAdminInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutAdminInput | ContactUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ContactCreateManyAdminInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutAdminInput | ContactUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutAdminInput | ContactUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type Report_ToUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput> | Report_ToCreateWithoutAdminInput[] | Report_ToUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutAdminInput | Report_ToCreateOrConnectWithoutAdminInput[]
    upsert?: Report_ToUpsertWithWhereUniqueWithoutAdminInput | Report_ToUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: Report_ToCreateManyAdminInputEnvelope
    set?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    disconnect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    delete?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    update?: Report_ToUpdateWithWhereUniqueWithoutAdminInput | Report_ToUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: Report_ToUpdateManyWithWhereWithoutAdminInput | Report_ToUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutSentAirlineMessagesInput = {
    create?: XOR<AdminCreateWithoutSentAirlineMessagesInput, AdminUncheckedCreateWithoutSentAirlineMessagesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutSentAirlineMessagesInput
    connect?: AdminWhereUniqueInput
  }

  export type AirlineCreateNestedOneWithoutMessagesInput = {
    create?: XOR<AirlineCreateWithoutMessagesInput, AirlineUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutMessagesInput
    connect?: AirlineWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutSentAirlineMessagesNestedInput = {
    create?: XOR<AdminCreateWithoutSentAirlineMessagesInput, AdminUncheckedCreateWithoutSentAirlineMessagesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutSentAirlineMessagesInput
    upsert?: AdminUpsertWithoutSentAirlineMessagesInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutSentAirlineMessagesInput, AdminUpdateWithoutSentAirlineMessagesInput>, AdminUncheckedUpdateWithoutSentAirlineMessagesInput>
  }

  export type AirlineUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<AirlineCreateWithoutMessagesInput, AirlineUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutMessagesInput
    upsert?: AirlineUpsertWithoutMessagesInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutMessagesInput, AirlineUpdateWithoutMessagesInput>, AirlineUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutAccountInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    connect?: AdminWhereUniqueInput
  }

  export type UserUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    connect?: AdminWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUpdateOneWithoutAccountNestedInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    upsert?: AdminUpsertWithoutAccountInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAccountInput, AdminUpdateWithoutAccountInput>, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type UserUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    upsert?: AdminUpsertWithoutAccountInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAccountInput, AdminUpdateWithoutAccountInput>, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type AccountCreateNestedOneWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    connect?: AccountWhereUniqueInput
  }

  export type User_Tel_NoCreateNestedManyWithoutUserInput = {
    create?: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput> | User_Tel_NoCreateWithoutUserInput[] | User_Tel_NoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_Tel_NoCreateOrConnectWithoutUserInput | User_Tel_NoCreateOrConnectWithoutUserInput[]
    createMany?: User_Tel_NoCreateManyUserInputEnvelope
    connect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
  }

  export type Assigned_ToCreateNestedManyWithoutUserInput = {
    create?: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput> | Assigned_ToCreateWithoutUserInput[] | Assigned_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutUserInput | Assigned_ToCreateOrConnectWithoutUserInput[]
    createMany?: Assigned_ToCreateManyUserInputEnvelope
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
  }

  export type PurchaseCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type Report_ToCreateNestedManyWithoutUserInput = {
    create?: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput> | Report_ToCreateWithoutUserInput[] | Report_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutUserInput | Report_ToCreateOrConnectWithoutUserInput[]
    createMany?: Report_ToCreateManyUserInputEnvelope
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type User_Tel_NoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput> | User_Tel_NoCreateWithoutUserInput[] | User_Tel_NoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_Tel_NoCreateOrConnectWithoutUserInput | User_Tel_NoCreateOrConnectWithoutUserInput[]
    createMany?: User_Tel_NoCreateManyUserInputEnvelope
    connect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
  }

  export type Assigned_ToUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput> | Assigned_ToCreateWithoutUserInput[] | Assigned_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutUserInput | Assigned_ToCreateOrConnectWithoutUserInput[]
    createMany?: Assigned_ToCreateManyUserInputEnvelope
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
  }

  export type PurchaseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type Report_ToUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput> | Report_ToCreateWithoutUserInput[] | Report_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutUserInput | Report_ToCreateOrConnectWithoutUserInput[]
    createMany?: Report_ToCreateManyUserInputEnvelope
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    upsert?: AccountUpsertWithoutUserInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUserInput, AccountUpdateWithoutUserInput>, AccountUncheckedUpdateWithoutUserInput>
  }

  export type User_Tel_NoUpdateManyWithoutUserNestedInput = {
    create?: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput> | User_Tel_NoCreateWithoutUserInput[] | User_Tel_NoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_Tel_NoCreateOrConnectWithoutUserInput | User_Tel_NoCreateOrConnectWithoutUserInput[]
    upsert?: User_Tel_NoUpsertWithWhereUniqueWithoutUserInput | User_Tel_NoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: User_Tel_NoCreateManyUserInputEnvelope
    set?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    disconnect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    delete?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    connect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    update?: User_Tel_NoUpdateWithWhereUniqueWithoutUserInput | User_Tel_NoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: User_Tel_NoUpdateManyWithWhereWithoutUserInput | User_Tel_NoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: User_Tel_NoScalarWhereInput | User_Tel_NoScalarWhereInput[]
  }

  export type Assigned_ToUpdateManyWithoutUserNestedInput = {
    create?: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput> | Assigned_ToCreateWithoutUserInput[] | Assigned_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutUserInput | Assigned_ToCreateOrConnectWithoutUserInput[]
    upsert?: Assigned_ToUpsertWithWhereUniqueWithoutUserInput | Assigned_ToUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Assigned_ToCreateManyUserInputEnvelope
    set?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    disconnect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    delete?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    update?: Assigned_ToUpdateWithWhereUniqueWithoutUserInput | Assigned_ToUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Assigned_ToUpdateManyWithWhereWithoutUserInput | Assigned_ToUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
  }

  export type PurchaseUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutUserInput | PurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutUserInput | PurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutUserInput | PurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type Report_ToUpdateManyWithoutUserNestedInput = {
    create?: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput> | Report_ToCreateWithoutUserInput[] | Report_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutUserInput | Report_ToCreateOrConnectWithoutUserInput[]
    upsert?: Report_ToUpsertWithWhereUniqueWithoutUserInput | Report_ToUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Report_ToCreateManyUserInputEnvelope
    set?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    disconnect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    delete?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    update?: Report_ToUpdateWithWhereUniqueWithoutUserInput | Report_ToUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Report_ToUpdateManyWithWhereWithoutUserInput | Report_ToUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput> | User_Tel_NoCreateWithoutUserInput[] | User_Tel_NoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_Tel_NoCreateOrConnectWithoutUserInput | User_Tel_NoCreateOrConnectWithoutUserInput[]
    upsert?: User_Tel_NoUpsertWithWhereUniqueWithoutUserInput | User_Tel_NoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: User_Tel_NoCreateManyUserInputEnvelope
    set?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    disconnect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    delete?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    connect?: User_Tel_NoWhereUniqueInput | User_Tel_NoWhereUniqueInput[]
    update?: User_Tel_NoUpdateWithWhereUniqueWithoutUserInput | User_Tel_NoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: User_Tel_NoUpdateManyWithWhereWithoutUserInput | User_Tel_NoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: User_Tel_NoScalarWhereInput | User_Tel_NoScalarWhereInput[]
  }

  export type Assigned_ToUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput> | Assigned_ToCreateWithoutUserInput[] | Assigned_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Assigned_ToCreateOrConnectWithoutUserInput | Assigned_ToCreateOrConnectWithoutUserInput[]
    upsert?: Assigned_ToUpsertWithWhereUniqueWithoutUserInput | Assigned_ToUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Assigned_ToCreateManyUserInputEnvelope
    set?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    disconnect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    delete?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    connect?: Assigned_ToWhereUniqueInput | Assigned_ToWhereUniqueInput[]
    update?: Assigned_ToUpdateWithWhereUniqueWithoutUserInput | Assigned_ToUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Assigned_ToUpdateManyWithWhereWithoutUserInput | Assigned_ToUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
  }

  export type PurchaseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutUserInput | PurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutUserInput | PurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutUserInput | PurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type Report_ToUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput> | Report_ToCreateWithoutUserInput[] | Report_ToUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Report_ToCreateOrConnectWithoutUserInput | Report_ToCreateOrConnectWithoutUserInput[]
    upsert?: Report_ToUpsertWithWhereUniqueWithoutUserInput | Report_ToUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Report_ToCreateManyUserInputEnvelope
    set?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    disconnect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    delete?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    connect?: Report_ToWhereUniqueInput | Report_ToWhereUniqueInput[]
    update?: Report_ToUpdateWithWhereUniqueWithoutUserInput | Report_ToUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Report_ToUpdateManyWithWhereWithoutUserInput | Report_ToUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTelNosInput = {
    create?: XOR<UserCreateWithoutTelNosInput, UserUncheckedCreateWithoutTelNosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTelNosInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTelNosNestedInput = {
    create?: XOR<UserCreateWithoutTelNosInput, UserUncheckedCreateWithoutTelNosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTelNosInput
    upsert?: UserUpsertWithoutTelNosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTelNosInput, UserUpdateWithoutTelNosInput>, UserUncheckedUpdateWithoutTelNosInput>
  }

  export type Report_ToCreateNestedOneWithoutReportsInput = {
    create?: XOR<Report_ToCreateWithoutReportsInput, Report_ToUncheckedCreateWithoutReportsInput>
    connectOrCreate?: Report_ToCreateOrConnectWithoutReportsInput
    connect?: Report_ToWhereUniqueInput
  }

  export type Report_ToUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<Report_ToCreateWithoutReportsInput, Report_ToUncheckedCreateWithoutReportsInput>
    connectOrCreate?: Report_ToCreateOrConnectWithoutReportsInput
    upsert?: Report_ToUpsertWithoutReportsInput
    connect?: Report_ToWhereUniqueInput
    update?: XOR<XOR<Report_ToUpdateToOneWithWhereWithoutReportsInput, Report_ToUpdateWithoutReportsInput>, Report_ToUncheckedUpdateWithoutReportsInput>
  }

  export type TicketCreateNestedOneWithoutDomesticTicketInput = {
    create?: XOR<TicketCreateWithoutDomesticTicketInput, TicketUncheckedCreateWithoutDomesticTicketInput>
    connectOrCreate?: TicketCreateOrConnectWithoutDomesticTicketInput
    connect?: TicketWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutDomesticTicketNestedInput = {
    create?: XOR<TicketCreateWithoutDomesticTicketInput, TicketUncheckedCreateWithoutDomesticTicketInput>
    connectOrCreate?: TicketCreateOrConnectWithoutDomesticTicketInput
    upsert?: TicketUpsertWithoutDomesticTicketInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutDomesticTicketInput, TicketUpdateWithoutDomesticTicketInput>, TicketUncheckedUpdateWithoutDomesticTicketInput>
  }

  export type TicketCreateNestedOneWithoutInternationalTicketInput = {
    create?: XOR<TicketCreateWithoutInternationalTicketInput, TicketUncheckedCreateWithoutInternationalTicketInput>
    connectOrCreate?: TicketCreateOrConnectWithoutInternationalTicketInput
    connect?: TicketWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutInternationalTicketNestedInput = {
    create?: XOR<TicketCreateWithoutInternationalTicketInput, TicketUncheckedCreateWithoutInternationalTicketInput>
    connectOrCreate?: TicketCreateOrConnectWithoutInternationalTicketInput
    upsert?: TicketUpsertWithoutInternationalTicketInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutInternationalTicketInput, TicketUpdateWithoutInternationalTicketInput>, TicketUncheckedUpdateWithoutInternationalTicketInput>
  }

  export type TicketCreateNestedOneWithoutRoundTripTicketPart1Input = {
    create?: XOR<TicketCreateWithoutRoundTripTicketPart1Input, TicketUncheckedCreateWithoutRoundTripTicketPart1Input>
    connectOrCreate?: TicketCreateOrConnectWithoutRoundTripTicketPart1Input
    connect?: TicketWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutRoundTripTicketPart2Input = {
    create?: XOR<TicketCreateWithoutRoundTripTicketPart2Input, TicketUncheckedCreateWithoutRoundTripTicketPart2Input>
    connectOrCreate?: TicketCreateOrConnectWithoutRoundTripTicketPart2Input
    connect?: TicketWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutRoundTripTicketPart1NestedInput = {
    create?: XOR<TicketCreateWithoutRoundTripTicketPart1Input, TicketUncheckedCreateWithoutRoundTripTicketPart1Input>
    connectOrCreate?: TicketCreateOrConnectWithoutRoundTripTicketPart1Input
    upsert?: TicketUpsertWithoutRoundTripTicketPart1Input
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutRoundTripTicketPart1Input, TicketUpdateWithoutRoundTripTicketPart1Input>, TicketUncheckedUpdateWithoutRoundTripTicketPart1Input>
  }

  export type TicketUpdateOneRequiredWithoutRoundTripTicketPart2NestedInput = {
    create?: XOR<TicketCreateWithoutRoundTripTicketPart2Input, TicketUncheckedCreateWithoutRoundTripTicketPart2Input>
    connectOrCreate?: TicketCreateOrConnectWithoutRoundTripTicketPart2Input
    upsert?: TicketUpsertWithoutRoundTripTicketPart2Input
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutRoundTripTicketPart2Input, TicketUpdateWithoutRoundTripTicketPart2Input>, TicketUncheckedUpdateWithoutRoundTripTicketPart2Input>
  }

  export type TicketCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<TicketCreateWithoutPurchaseInput, TicketUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: TicketCreateOrConnectWithoutPurchaseInput
    connect?: TicketWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<PaymentCreateWithoutPurchaseInput, PaymentUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPurchaseInput
    connect?: PaymentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPurchasesInput = {
    create?: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasesInput
    connect?: UserWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutPurchaseNestedInput = {
    create?: XOR<TicketCreateWithoutPurchaseInput, TicketUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: TicketCreateOrConnectWithoutPurchaseInput
    upsert?: TicketUpsertWithoutPurchaseInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutPurchaseInput, TicketUpdateWithoutPurchaseInput>, TicketUncheckedUpdateWithoutPurchaseInput>
  }

  export type PaymentUpdateOneRequiredWithoutPurchaseNestedInput = {
    create?: XOR<PaymentCreateWithoutPurchaseInput, PaymentUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPurchaseInput
    upsert?: PaymentUpsertWithoutPurchaseInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutPurchaseInput, PaymentUpdateWithoutPurchaseInput>, PaymentUncheckedUpdateWithoutPurchaseInput>
  }

  export type UserUpdateOneRequiredWithoutPurchasesNestedInput = {
    create?: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasesInput
    upsert?: UserUpsertWithoutPurchasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPurchasesInput, UserUpdateWithoutPurchasesInput>, UserUncheckedUpdateWithoutPurchasesInput>
  }

  export type PurchaseCreateNestedOneWithoutPaymentInput = {
    create?: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPaymentInput
    connect?: PurchaseWhereUniqueInput
  }

  export type PurchaseUncheckedCreateNestedOneWithoutPaymentInput = {
    create?: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPaymentInput
    connect?: PurchaseWhereUniqueInput
  }

  export type PurchaseUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPaymentInput
    upsert?: PurchaseUpsertWithoutPaymentInput
    disconnect?: PurchaseWhereInput | boolean
    delete?: PurchaseWhereInput | boolean
    connect?: PurchaseWhereUniqueInput
    update?: XOR<XOR<PurchaseUpdateToOneWithWhereWithoutPaymentInput, PurchaseUpdateWithoutPaymentInput>, PurchaseUncheckedUpdateWithoutPaymentInput>
  }

  export type PurchaseUncheckedUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPaymentInput
    upsert?: PurchaseUpsertWithoutPaymentInput
    disconnect?: PurchaseWhereInput | boolean
    delete?: PurchaseWhereInput | boolean
    connect?: PurchaseWhereUniqueInput
    update?: XOR<XOR<PurchaseUpdateToOneWithWhereWithoutPaymentInput, PurchaseUpdateWithoutPaymentInput>, PurchaseUncheckedUpdateWithoutPaymentInput>
  }

  export type AirlineCreateNestedOneWithoutTelNosInput = {
    create?: XOR<AirlineCreateWithoutTelNosInput, AirlineUncheckedCreateWithoutTelNosInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutTelNosInput
    connect?: AirlineWhereUniqueInput
  }

  export type AirlineUpdateOneRequiredWithoutTelNosNestedInput = {
    create?: XOR<AirlineCreateWithoutTelNosInput, AirlineUncheckedCreateWithoutTelNosInput>
    connectOrCreate?: AirlineCreateOrConnectWithoutTelNosInput
    upsert?: AirlineUpsertWithoutTelNosInput
    connect?: AirlineWhereUniqueInput
    update?: XOR<XOR<AirlineUpdateToOneWithWhereWithoutTelNosInput, AirlineUpdateWithoutTelNosInput>, AirlineUncheckedUpdateWithoutTelNosInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OperateCreateWithoutAirportInput = {
    airline: AirlineCreateNestedOneWithoutOperatesInput
  }

  export type OperateUncheckedCreateWithoutAirportInput = {
    AirlineName: string
  }

  export type OperateCreateOrConnectWithoutAirportInput = {
    where: OperateWhereUniqueInput
    create: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput>
  }

  export type OperateCreateManyAirportInputEnvelope = {
    data: OperateCreateManyAirportInput | OperateCreateManyAirportInput[]
    skipDuplicates?: boolean
  }

  export type FlightCreateWithoutDepartureAirportInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutDepartureAirportInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    AirlineName: string
    AircraftRegNo: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutDepartureAirportInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput>
  }

  export type FlightCreateManyDepartureAirportInputEnvelope = {
    data: FlightCreateManyDepartureAirportInput | FlightCreateManyDepartureAirportInput[]
    skipDuplicates?: boolean
  }

  export type FlightCreateWithoutArrivalAirportInput = {
    FlightNo: string
    Schedule: Date | string
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutArrivalAirportInput = {
    FlightNo: string
    Schedule: Date | string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutArrivalAirportInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput>
  }

  export type FlightCreateManyArrivalAirportInputEnvelope = {
    data: FlightCreateManyArrivalAirportInput | FlightCreateManyArrivalAirportInput[]
    skipDuplicates?: boolean
  }

  export type OperateUpsertWithWhereUniqueWithoutAirportInput = {
    where: OperateWhereUniqueInput
    update: XOR<OperateUpdateWithoutAirportInput, OperateUncheckedUpdateWithoutAirportInput>
    create: XOR<OperateCreateWithoutAirportInput, OperateUncheckedCreateWithoutAirportInput>
  }

  export type OperateUpdateWithWhereUniqueWithoutAirportInput = {
    where: OperateWhereUniqueInput
    data: XOR<OperateUpdateWithoutAirportInput, OperateUncheckedUpdateWithoutAirportInput>
  }

  export type OperateUpdateManyWithWhereWithoutAirportInput = {
    where: OperateScalarWhereInput
    data: XOR<OperateUpdateManyMutationInput, OperateUncheckedUpdateManyWithoutAirportInput>
  }

  export type OperateScalarWhereInput = {
    AND?: OperateScalarWhereInput | OperateScalarWhereInput[]
    OR?: OperateScalarWhereInput[]
    NOT?: OperateScalarWhereInput | OperateScalarWhereInput[]
    AirportID?: StringFilter<"Operate"> | string
    AirlineName?: StringFilter<"Operate"> | string
  }

  export type FlightUpsertWithWhereUniqueWithoutDepartureAirportInput = {
    where: FlightWhereUniqueInput
    update: XOR<FlightUpdateWithoutDepartureAirportInput, FlightUncheckedUpdateWithoutDepartureAirportInput>
    create: XOR<FlightCreateWithoutDepartureAirportInput, FlightUncheckedCreateWithoutDepartureAirportInput>
  }

  export type FlightUpdateWithWhereUniqueWithoutDepartureAirportInput = {
    where: FlightWhereUniqueInput
    data: XOR<FlightUpdateWithoutDepartureAirportInput, FlightUncheckedUpdateWithoutDepartureAirportInput>
  }

  export type FlightUpdateManyWithWhereWithoutDepartureAirportInput = {
    where: FlightScalarWhereInput
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyWithoutDepartureAirportInput>
  }

  export type FlightScalarWhereInput = {
    AND?: FlightScalarWhereInput | FlightScalarWhereInput[]
    OR?: FlightScalarWhereInput[]
    NOT?: FlightScalarWhereInput | FlightScalarWhereInput[]
    FlightNo?: StringFilter<"Flight"> | string
    Schedule?: DateTimeFilter<"Flight"> | Date | string
    ArrivalAirportID?: StringFilter<"Flight"> | string
    DepartureAirportID?: StringFilter<"Flight"> | string
    AirlineName?: StringFilter<"Flight"> | string
    AircraftRegNo?: StringFilter<"Flight"> | string
  }

  export type FlightUpsertWithWhereUniqueWithoutArrivalAirportInput = {
    where: FlightWhereUniqueInput
    update: XOR<FlightUpdateWithoutArrivalAirportInput, FlightUncheckedUpdateWithoutArrivalAirportInput>
    create: XOR<FlightCreateWithoutArrivalAirportInput, FlightUncheckedCreateWithoutArrivalAirportInput>
  }

  export type FlightUpdateWithWhereUniqueWithoutArrivalAirportInput = {
    where: FlightWhereUniqueInput
    data: XOR<FlightUpdateWithoutArrivalAirportInput, FlightUncheckedUpdateWithoutArrivalAirportInput>
  }

  export type FlightUpdateManyWithWhereWithoutArrivalAirportInput = {
    where: FlightScalarWhereInput
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyWithoutArrivalAirportInput>
  }

  export type OperateCreateWithoutAirlineInput = {
    airport: AirportCreateNestedOneWithoutOperatesInput
  }

  export type OperateUncheckedCreateWithoutAirlineInput = {
    AirportID: string
  }

  export type OperateCreateOrConnectWithoutAirlineInput = {
    where: OperateWhereUniqueInput
    create: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput>
  }

  export type OperateCreateManyAirlineInputEnvelope = {
    data: OperateCreateManyAirlineInput | OperateCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type AircraftCreateWithoutAirlineInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    seats?: SeatCreateNestedManyWithoutAircraftInput
    flights?: FlightCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUncheckedCreateWithoutAirlineInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    seats?: SeatUncheckedCreateNestedManyWithoutAircraftInput
    flights?: FlightUncheckedCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassUncheckedCreateNestedManyWithoutAircraftInput
  }

  export type AircraftCreateOrConnectWithoutAirlineInput = {
    where: AircraftWhereUniqueInput
    create: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput>
  }

  export type AircraftCreateManyAirlineInputEnvelope = {
    data: AircraftCreateManyAirlineInput | AircraftCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type FlightCreateWithoutAirlineInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutAirlineInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AircraftRegNo: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutAirlineInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput>
  }

  export type FlightCreateManyAirlineInputEnvelope = {
    data: FlightCreateManyAirlineInput | FlightCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type Airline_Tel_NoCreateWithoutAirlineInput = {
    TelNo: string
  }

  export type Airline_Tel_NoUncheckedCreateWithoutAirlineInput = {
    TelNo: string
  }

  export type Airline_Tel_NoCreateOrConnectWithoutAirlineInput = {
    where: Airline_Tel_NoWhereUniqueInput
    create: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput>
  }

  export type Airline_Tel_NoCreateManyAirlineInputEnvelope = {
    data: Airline_Tel_NoCreateManyAirlineInput | Airline_Tel_NoCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type Airline_MessageCreateWithoutAirlineInput = {
    MessageText: string
    admin: AdminCreateNestedOneWithoutSentAirlineMessagesInput
  }

  export type Airline_MessageUncheckedCreateWithoutAirlineInput = {
    AdminAccountID: string
    MessageText: string
  }

  export type Airline_MessageCreateOrConnectWithoutAirlineInput = {
    where: Airline_MessageWhereUniqueInput
    create: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput>
  }

  export type Airline_MessageCreateManyAirlineInputEnvelope = {
    data: Airline_MessageCreateManyAirlineInput | Airline_MessageCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutAirlineInput = {
    ContactStatus: string
    admin: AdminCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateWithoutAirlineInput = {
    AdminAccountID: string
    ContactStatus: string
  }

  export type ContactCreateOrConnectWithoutAirlineInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput>
  }

  export type ContactCreateManyAirlineInputEnvelope = {
    data: ContactCreateManyAirlineInput | ContactCreateManyAirlineInput[]
    skipDuplicates?: boolean
  }

  export type OperateUpsertWithWhereUniqueWithoutAirlineInput = {
    where: OperateWhereUniqueInput
    update: XOR<OperateUpdateWithoutAirlineInput, OperateUncheckedUpdateWithoutAirlineInput>
    create: XOR<OperateCreateWithoutAirlineInput, OperateUncheckedCreateWithoutAirlineInput>
  }

  export type OperateUpdateWithWhereUniqueWithoutAirlineInput = {
    where: OperateWhereUniqueInput
    data: XOR<OperateUpdateWithoutAirlineInput, OperateUncheckedUpdateWithoutAirlineInput>
  }

  export type OperateUpdateManyWithWhereWithoutAirlineInput = {
    where: OperateScalarWhereInput
    data: XOR<OperateUpdateManyMutationInput, OperateUncheckedUpdateManyWithoutAirlineInput>
  }

  export type AircraftUpsertWithWhereUniqueWithoutAirlineInput = {
    where: AircraftWhereUniqueInput
    update: XOR<AircraftUpdateWithoutAirlineInput, AircraftUncheckedUpdateWithoutAirlineInput>
    create: XOR<AircraftCreateWithoutAirlineInput, AircraftUncheckedCreateWithoutAirlineInput>
  }

  export type AircraftUpdateWithWhereUniqueWithoutAirlineInput = {
    where: AircraftWhereUniqueInput
    data: XOR<AircraftUpdateWithoutAirlineInput, AircraftUncheckedUpdateWithoutAirlineInput>
  }

  export type AircraftUpdateManyWithWhereWithoutAirlineInput = {
    where: AircraftScalarWhereInput
    data: XOR<AircraftUpdateManyMutationInput, AircraftUncheckedUpdateManyWithoutAirlineInput>
  }

  export type AircraftScalarWhereInput = {
    AND?: AircraftScalarWhereInput | AircraftScalarWhereInput[]
    OR?: AircraftScalarWhereInput[]
    NOT?: AircraftScalarWhereInput | AircraftScalarWhereInput[]
    AircraftRegNo?: StringFilter<"Aircraft"> | string
    AirlineName?: StringFilter<"Aircraft"> | string
    SeatCapacity?: IntFilter<"Aircraft"> | number
    ModelName?: StringFilter<"Aircraft"> | string
  }

  export type FlightUpsertWithWhereUniqueWithoutAirlineInput = {
    where: FlightWhereUniqueInput
    update: XOR<FlightUpdateWithoutAirlineInput, FlightUncheckedUpdateWithoutAirlineInput>
    create: XOR<FlightCreateWithoutAirlineInput, FlightUncheckedCreateWithoutAirlineInput>
  }

  export type FlightUpdateWithWhereUniqueWithoutAirlineInput = {
    where: FlightWhereUniqueInput
    data: XOR<FlightUpdateWithoutAirlineInput, FlightUncheckedUpdateWithoutAirlineInput>
  }

  export type FlightUpdateManyWithWhereWithoutAirlineInput = {
    where: FlightScalarWhereInput
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyWithoutAirlineInput>
  }

  export type Airline_Tel_NoUpsertWithWhereUniqueWithoutAirlineInput = {
    where: Airline_Tel_NoWhereUniqueInput
    update: XOR<Airline_Tel_NoUpdateWithoutAirlineInput, Airline_Tel_NoUncheckedUpdateWithoutAirlineInput>
    create: XOR<Airline_Tel_NoCreateWithoutAirlineInput, Airline_Tel_NoUncheckedCreateWithoutAirlineInput>
  }

  export type Airline_Tel_NoUpdateWithWhereUniqueWithoutAirlineInput = {
    where: Airline_Tel_NoWhereUniqueInput
    data: XOR<Airline_Tel_NoUpdateWithoutAirlineInput, Airline_Tel_NoUncheckedUpdateWithoutAirlineInput>
  }

  export type Airline_Tel_NoUpdateManyWithWhereWithoutAirlineInput = {
    where: Airline_Tel_NoScalarWhereInput
    data: XOR<Airline_Tel_NoUpdateManyMutationInput, Airline_Tel_NoUncheckedUpdateManyWithoutAirlineInput>
  }

  export type Airline_Tel_NoScalarWhereInput = {
    AND?: Airline_Tel_NoScalarWhereInput | Airline_Tel_NoScalarWhereInput[]
    OR?: Airline_Tel_NoScalarWhereInput[]
    NOT?: Airline_Tel_NoScalarWhereInput | Airline_Tel_NoScalarWhereInput[]
    TelNo?: StringFilter<"Airline_Tel_No"> | string
    AirlineName?: StringFilter<"Airline_Tel_No"> | string
  }

  export type Airline_MessageUpsertWithWhereUniqueWithoutAirlineInput = {
    where: Airline_MessageWhereUniqueInput
    update: XOR<Airline_MessageUpdateWithoutAirlineInput, Airline_MessageUncheckedUpdateWithoutAirlineInput>
    create: XOR<Airline_MessageCreateWithoutAirlineInput, Airline_MessageUncheckedCreateWithoutAirlineInput>
  }

  export type Airline_MessageUpdateWithWhereUniqueWithoutAirlineInput = {
    where: Airline_MessageWhereUniqueInput
    data: XOR<Airline_MessageUpdateWithoutAirlineInput, Airline_MessageUncheckedUpdateWithoutAirlineInput>
  }

  export type Airline_MessageUpdateManyWithWhereWithoutAirlineInput = {
    where: Airline_MessageScalarWhereInput
    data: XOR<Airline_MessageUpdateManyMutationInput, Airline_MessageUncheckedUpdateManyWithoutAirlineInput>
  }

  export type Airline_MessageScalarWhereInput = {
    AND?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
    OR?: Airline_MessageScalarWhereInput[]
    NOT?: Airline_MessageScalarWhereInput | Airline_MessageScalarWhereInput[]
    AirlineName?: StringFilter<"Airline_Message"> | string
    AdminAccountID?: StringFilter<"Airline_Message"> | string
    MessageText?: StringFilter<"Airline_Message"> | string
  }

  export type ContactUpsertWithWhereUniqueWithoutAirlineInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutAirlineInput, ContactUncheckedUpdateWithoutAirlineInput>
    create: XOR<ContactCreateWithoutAirlineInput, ContactUncheckedCreateWithoutAirlineInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutAirlineInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutAirlineInput, ContactUncheckedUpdateWithoutAirlineInput>
  }

  export type ContactUpdateManyWithWhereWithoutAirlineInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutAirlineInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    AdminAccountID?: StringFilter<"Contact"> | string
    AirlineName?: StringFilter<"Contact"> | string
    ContactStatus?: StringFilter<"Contact"> | string
  }

  export type AirlineCreateWithoutAircraftsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutAircraftsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutAircraftsInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutAircraftsInput, AirlineUncheckedCreateWithoutAircraftsInput>
  }

  export type SeatCreateWithoutAircraftInput = {
    SeatNo: string
    SeatType: string
    tickets?: TicketCreateNestedManyWithoutSeatInput
  }

  export type SeatUncheckedCreateWithoutAircraftInput = {
    SeatNo: string
    SeatType: string
    tickets?: TicketUncheckedCreateNestedManyWithoutSeatInput
  }

  export type SeatCreateOrConnectWithoutAircraftInput = {
    where: SeatWhereUniqueInput
    create: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput>
  }

  export type SeatCreateManyAircraftInputEnvelope = {
    data: SeatCreateManyAircraftInput | SeatCreateManyAircraftInput[]
    skipDuplicates?: boolean
  }

  export type FlightCreateWithoutAircraftInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutAircraftInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutAircraftInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput>
  }

  export type FlightCreateManyAircraftInputEnvelope = {
    data: FlightCreateManyAircraftInput | FlightCreateManyAircraftInput[]
    skipDuplicates?: boolean
  }

  export type CabinClassCreateWithoutAircraftInput = {
    Class: string
    StandardPrice: number
  }

  export type CabinClassUncheckedCreateWithoutAircraftInput = {
    Class: string
    StandardPrice: number
  }

  export type CabinClassCreateOrConnectWithoutAircraftInput = {
    where: CabinClassWhereUniqueInput
    create: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput>
  }

  export type CabinClassCreateManyAircraftInputEnvelope = {
    data: CabinClassCreateManyAircraftInput | CabinClassCreateManyAircraftInput[]
    skipDuplicates?: boolean
  }

  export type AirlineUpsertWithoutAircraftsInput = {
    update: XOR<AirlineUpdateWithoutAircraftsInput, AirlineUncheckedUpdateWithoutAircraftsInput>
    create: XOR<AirlineCreateWithoutAircraftsInput, AirlineUncheckedCreateWithoutAircraftsInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutAircraftsInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutAircraftsInput, AirlineUncheckedUpdateWithoutAircraftsInput>
  }

  export type AirlineUpdateWithoutAircraftsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutAircraftsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type SeatUpsertWithWhereUniqueWithoutAircraftInput = {
    where: SeatWhereUniqueInput
    update: XOR<SeatUpdateWithoutAircraftInput, SeatUncheckedUpdateWithoutAircraftInput>
    create: XOR<SeatCreateWithoutAircraftInput, SeatUncheckedCreateWithoutAircraftInput>
  }

  export type SeatUpdateWithWhereUniqueWithoutAircraftInput = {
    where: SeatWhereUniqueInput
    data: XOR<SeatUpdateWithoutAircraftInput, SeatUncheckedUpdateWithoutAircraftInput>
  }

  export type SeatUpdateManyWithWhereWithoutAircraftInput = {
    where: SeatScalarWhereInput
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyWithoutAircraftInput>
  }

  export type SeatScalarWhereInput = {
    AND?: SeatScalarWhereInput | SeatScalarWhereInput[]
    OR?: SeatScalarWhereInput[]
    NOT?: SeatScalarWhereInput | SeatScalarWhereInput[]
    AircraftRegNo?: StringFilter<"Seat"> | string
    SeatNo?: StringFilter<"Seat"> | string
    SeatType?: StringFilter<"Seat"> | string
  }

  export type FlightUpsertWithWhereUniqueWithoutAircraftInput = {
    where: FlightWhereUniqueInput
    update: XOR<FlightUpdateWithoutAircraftInput, FlightUncheckedUpdateWithoutAircraftInput>
    create: XOR<FlightCreateWithoutAircraftInput, FlightUncheckedCreateWithoutAircraftInput>
  }

  export type FlightUpdateWithWhereUniqueWithoutAircraftInput = {
    where: FlightWhereUniqueInput
    data: XOR<FlightUpdateWithoutAircraftInput, FlightUncheckedUpdateWithoutAircraftInput>
  }

  export type FlightUpdateManyWithWhereWithoutAircraftInput = {
    where: FlightScalarWhereInput
    data: XOR<FlightUpdateManyMutationInput, FlightUncheckedUpdateManyWithoutAircraftInput>
  }

  export type CabinClassUpsertWithWhereUniqueWithoutAircraftInput = {
    where: CabinClassWhereUniqueInput
    update: XOR<CabinClassUpdateWithoutAircraftInput, CabinClassUncheckedUpdateWithoutAircraftInput>
    create: XOR<CabinClassCreateWithoutAircraftInput, CabinClassUncheckedCreateWithoutAircraftInput>
  }

  export type CabinClassUpdateWithWhereUniqueWithoutAircraftInput = {
    where: CabinClassWhereUniqueInput
    data: XOR<CabinClassUpdateWithoutAircraftInput, CabinClassUncheckedUpdateWithoutAircraftInput>
  }

  export type CabinClassUpdateManyWithWhereWithoutAircraftInput = {
    where: CabinClassScalarWhereInput
    data: XOR<CabinClassUpdateManyMutationInput, CabinClassUncheckedUpdateManyWithoutAircraftInput>
  }

  export type CabinClassScalarWhereInput = {
    AND?: CabinClassScalarWhereInput | CabinClassScalarWhereInput[]
    OR?: CabinClassScalarWhereInput[]
    NOT?: CabinClassScalarWhereInput | CabinClassScalarWhereInput[]
    AircraftRegNo?: StringFilter<"CabinClass"> | string
    Class?: StringFilter<"CabinClass"> | string
    StandardPrice?: FloatFilter<"CabinClass"> | number
  }

  export type AirportCreateWithoutArrivalFlightsInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateCreateNestedManyWithoutAirportInput
    departureFlights?: FlightCreateNestedManyWithoutDepartureAirportInput
  }

  export type AirportUncheckedCreateWithoutArrivalFlightsInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateUncheckedCreateNestedManyWithoutAirportInput
    departureFlights?: FlightUncheckedCreateNestedManyWithoutDepartureAirportInput
  }

  export type AirportCreateOrConnectWithoutArrivalFlightsInput = {
    where: AirportWhereUniqueInput
    create: XOR<AirportCreateWithoutArrivalFlightsInput, AirportUncheckedCreateWithoutArrivalFlightsInput>
  }

  export type AirportCreateWithoutDepartureFlightsInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateCreateNestedManyWithoutAirportInput
    arrivalFlights?: FlightCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportUncheckedCreateWithoutDepartureFlightsInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    operates?: OperateUncheckedCreateNestedManyWithoutAirportInput
    arrivalFlights?: FlightUncheckedCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportCreateOrConnectWithoutDepartureFlightsInput = {
    where: AirportWhereUniqueInput
    create: XOR<AirportCreateWithoutDepartureFlightsInput, AirportUncheckedCreateWithoutDepartureFlightsInput>
  }

  export type AirlineCreateWithoutFlightsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutFlightsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutFlightsInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutFlightsInput, AirlineUncheckedCreateWithoutFlightsInput>
  }

  export type AircraftCreateWithoutFlightsInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    airline: AirlineCreateNestedOneWithoutAircraftsInput
    seats?: SeatCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUncheckedCreateWithoutFlightsInput = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
    seats?: SeatUncheckedCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassUncheckedCreateNestedManyWithoutAircraftInput
  }

  export type AircraftCreateOrConnectWithoutFlightsInput = {
    where: AircraftWhereUniqueInput
    create: XOR<AircraftCreateWithoutFlightsInput, AircraftUncheckedCreateWithoutFlightsInput>
  }

  export type Assigned_ToCreateWithoutFlightInput = {
    user: UserCreateNestedOneWithoutAssignedFlightsInput
  }

  export type Assigned_ToUncheckedCreateWithoutFlightInput = {
    UserAccountID: string
  }

  export type Assigned_ToCreateOrConnectWithoutFlightInput = {
    where: Assigned_ToWhereUniqueInput
    create: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput>
  }

  export type Assigned_ToCreateManyFlightInputEnvelope = {
    data: Assigned_ToCreateManyFlightInput | Assigned_ToCreateManyFlightInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutFlightInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutFlightInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutFlightInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput>
  }

  export type TicketCreateManyFlightInputEnvelope = {
    data: TicketCreateManyFlightInput | TicketCreateManyFlightInput[]
    skipDuplicates?: boolean
  }

  export type AirportUpsertWithoutArrivalFlightsInput = {
    update: XOR<AirportUpdateWithoutArrivalFlightsInput, AirportUncheckedUpdateWithoutArrivalFlightsInput>
    create: XOR<AirportCreateWithoutArrivalFlightsInput, AirportUncheckedCreateWithoutArrivalFlightsInput>
    where?: AirportWhereInput
  }

  export type AirportUpdateToOneWithWhereWithoutArrivalFlightsInput = {
    where?: AirportWhereInput
    data: XOR<AirportUpdateWithoutArrivalFlightsInput, AirportUncheckedUpdateWithoutArrivalFlightsInput>
  }

  export type AirportUpdateWithoutArrivalFlightsInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUpdateManyWithoutAirportNestedInput
    departureFlights?: FlightUpdateManyWithoutDepartureAirportNestedInput
  }

  export type AirportUncheckedUpdateWithoutArrivalFlightsInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUncheckedUpdateManyWithoutAirportNestedInput
    departureFlights?: FlightUncheckedUpdateManyWithoutDepartureAirportNestedInput
  }

  export type AirportUpsertWithoutDepartureFlightsInput = {
    update: XOR<AirportUpdateWithoutDepartureFlightsInput, AirportUncheckedUpdateWithoutDepartureFlightsInput>
    create: XOR<AirportCreateWithoutDepartureFlightsInput, AirportUncheckedCreateWithoutDepartureFlightsInput>
    where?: AirportWhereInput
  }

  export type AirportUpdateToOneWithWhereWithoutDepartureFlightsInput = {
    where?: AirportWhereInput
    data: XOR<AirportUpdateWithoutDepartureFlightsInput, AirportUncheckedUpdateWithoutDepartureFlightsInput>
  }

  export type AirportUpdateWithoutDepartureFlightsInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUpdateManyWithoutAirportNestedInput
    arrivalFlights?: FlightUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirportUncheckedUpdateWithoutDepartureFlightsInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    operates?: OperateUncheckedUpdateManyWithoutAirportNestedInput
    arrivalFlights?: FlightUncheckedUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirlineUpsertWithoutFlightsInput = {
    update: XOR<AirlineUpdateWithoutFlightsInput, AirlineUncheckedUpdateWithoutFlightsInput>
    create: XOR<AirlineCreateWithoutFlightsInput, AirlineUncheckedCreateWithoutFlightsInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutFlightsInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutFlightsInput, AirlineUncheckedUpdateWithoutFlightsInput>
  }

  export type AirlineUpdateWithoutFlightsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutFlightsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type AircraftUpsertWithoutFlightsInput = {
    update: XOR<AircraftUpdateWithoutFlightsInput, AircraftUncheckedUpdateWithoutFlightsInput>
    create: XOR<AircraftCreateWithoutFlightsInput, AircraftUncheckedCreateWithoutFlightsInput>
    where?: AircraftWhereInput
  }

  export type AircraftUpdateToOneWithWhereWithoutFlightsInput = {
    where?: AircraftWhereInput
    data: XOR<AircraftUpdateWithoutFlightsInput, AircraftUncheckedUpdateWithoutFlightsInput>
  }

  export type AircraftUpdateWithoutFlightsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutAircraftsNestedInput
    seats?: SeatUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateWithoutFlightsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    seats?: SeatUncheckedUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUncheckedUpdateManyWithoutAircraftNestedInput
  }

  export type Assigned_ToUpsertWithWhereUniqueWithoutFlightInput = {
    where: Assigned_ToWhereUniqueInput
    update: XOR<Assigned_ToUpdateWithoutFlightInput, Assigned_ToUncheckedUpdateWithoutFlightInput>
    create: XOR<Assigned_ToCreateWithoutFlightInput, Assigned_ToUncheckedCreateWithoutFlightInput>
  }

  export type Assigned_ToUpdateWithWhereUniqueWithoutFlightInput = {
    where: Assigned_ToWhereUniqueInput
    data: XOR<Assigned_ToUpdateWithoutFlightInput, Assigned_ToUncheckedUpdateWithoutFlightInput>
  }

  export type Assigned_ToUpdateManyWithWhereWithoutFlightInput = {
    where: Assigned_ToScalarWhereInput
    data: XOR<Assigned_ToUpdateManyMutationInput, Assigned_ToUncheckedUpdateManyWithoutFlightInput>
  }

  export type Assigned_ToScalarWhereInput = {
    AND?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
    OR?: Assigned_ToScalarWhereInput[]
    NOT?: Assigned_ToScalarWhereInput | Assigned_ToScalarWhereInput[]
    FlightNo?: StringFilter<"Assigned_To"> | string
    Schedule?: DateTimeFilter<"Assigned_To"> | Date | string
    UserAccountID?: StringFilter<"Assigned_To"> | string
  }

  export type TicketUpsertWithWhereUniqueWithoutFlightInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutFlightInput, TicketUncheckedUpdateWithoutFlightInput>
    create: XOR<TicketCreateWithoutFlightInput, TicketUncheckedCreateWithoutFlightInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutFlightInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutFlightInput, TicketUncheckedUpdateWithoutFlightInput>
  }

  export type TicketUpdateManyWithWhereWithoutFlightInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutFlightInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    TicketID?: StringFilter<"Ticket"> | string
    Price?: FloatFilter<"Ticket"> | number
    TicketStatus?: StringFilter<"Ticket"> | string
    PassengerName?: StringFilter<"Ticket"> | string
    PassengerLastName?: StringFilter<"Ticket"> | string
    Gender?: StringFilter<"Ticket"> | string
    DateOfBirth?: DateTimeFilter<"Ticket"> | Date | string
    Nationality?: StringFilter<"Ticket"> | string
    BaggageChecked?: FloatFilter<"Ticket"> | number
    BaggageCabin?: FloatFilter<"Ticket"> | number
    SeatNo?: StringFilter<"Ticket"> | string
    AircraftRegNo?: StringFilter<"Ticket"> | string
    FlightNo?: StringFilter<"Ticket"> | string
    Schedule?: DateTimeFilter<"Ticket"> | Date | string
  }

  export type FlightCreateWithoutTicketsInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    passengers?: Assigned_ToCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutTicketsInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
    passengers?: Assigned_ToUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutTicketsInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutTicketsInput, FlightUncheckedCreateWithoutTicketsInput>
  }

  export type SeatCreateWithoutTicketsInput = {
    SeatNo: string
    SeatType: string
    aircraft: AircraftCreateNestedOneWithoutSeatsInput
  }

  export type SeatUncheckedCreateWithoutTicketsInput = {
    AircraftRegNo: string
    SeatNo: string
    SeatType: string
  }

  export type SeatCreateOrConnectWithoutTicketsInput = {
    where: SeatWhereUniqueInput
    create: XOR<SeatCreateWithoutTicketsInput, SeatUncheckedCreateWithoutTicketsInput>
  }

  export type PurchaseCreateWithoutTicketInput = {
    payment: PaymentCreateNestedOneWithoutPurchaseInput
    user: UserCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateWithoutTicketInput = {
    PaymentID: string
    UserAccountID: string
  }

  export type PurchaseCreateOrConnectWithoutTicketInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
  }

  export type Domestic_TicketCreateWithoutTicketInput = {

  }

  export type Domestic_TicketUncheckedCreateWithoutTicketInput = {

  }

  export type Domestic_TicketCreateOrConnectWithoutTicketInput = {
    where: Domestic_TicketWhereUniqueInput
    create: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
  }

  export type International_TicketCreateWithoutTicketInput = {
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date | string
  }

  export type International_TicketUncheckedCreateWithoutTicketInput = {
    PassportNo: string
    IssuedCountry: string
    PassportExpiry: Date | string
  }

  export type International_TicketCreateOrConnectWithoutTicketInput = {
    where: International_TicketWhereUniqueInput
    create: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
  }

  export type Round_Trip_TicketCreateWithoutTicket1Input = {
    ticket2: TicketCreateNestedOneWithoutRoundTripTicketPart2Input
  }

  export type Round_Trip_TicketUncheckedCreateWithoutTicket1Input = {
    TicketID2: string
  }

  export type Round_Trip_TicketCreateOrConnectWithoutTicket1Input = {
    where: Round_Trip_TicketWhereUniqueInput
    create: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
  }

  export type Round_Trip_TicketCreateWithoutTicket2Input = {
    ticket1: TicketCreateNestedOneWithoutRoundTripTicketPart1Input
  }

  export type Round_Trip_TicketUncheckedCreateWithoutTicket2Input = {
    TicketID: string
  }

  export type Round_Trip_TicketCreateOrConnectWithoutTicket2Input = {
    where: Round_Trip_TicketWhereUniqueInput
    create: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
  }

  export type FlightUpsertWithoutTicketsInput = {
    update: XOR<FlightUpdateWithoutTicketsInput, FlightUncheckedUpdateWithoutTicketsInput>
    create: XOR<FlightCreateWithoutTicketsInput, FlightUncheckedCreateWithoutTicketsInput>
    where?: FlightWhereInput
  }

  export type FlightUpdateToOneWithWhereWithoutTicketsInput = {
    where?: FlightWhereInput
    data: XOR<FlightUpdateWithoutTicketsInput, FlightUncheckedUpdateWithoutTicketsInput>
  }

  export type FlightUpdateWithoutTicketsInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutTicketsInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type SeatUpsertWithoutTicketsInput = {
    update: XOR<SeatUpdateWithoutTicketsInput, SeatUncheckedUpdateWithoutTicketsInput>
    create: XOR<SeatCreateWithoutTicketsInput, SeatUncheckedCreateWithoutTicketsInput>
    where?: SeatWhereInput
  }

  export type SeatUpdateToOneWithWhereWithoutTicketsInput = {
    where?: SeatWhereInput
    data: XOR<SeatUpdateWithoutTicketsInput, SeatUncheckedUpdateWithoutTicketsInput>
  }

  export type SeatUpdateWithoutTicketsInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
    aircraft?: AircraftUpdateOneRequiredWithoutSeatsNestedInput
  }

  export type SeatUncheckedUpdateWithoutTicketsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUpsertWithoutTicketInput = {
    update: XOR<PurchaseUpdateWithoutTicketInput, PurchaseUncheckedUpdateWithoutTicketInput>
    create: XOR<PurchaseCreateWithoutTicketInput, PurchaseUncheckedCreateWithoutTicketInput>
    where?: PurchaseWhereInput
  }

  export type PurchaseUpdateToOneWithWhereWithoutTicketInput = {
    where?: PurchaseWhereInput
    data: XOR<PurchaseUpdateWithoutTicketInput, PurchaseUncheckedUpdateWithoutTicketInput>
  }

  export type PurchaseUpdateWithoutTicketInput = {
    payment?: PaymentUpdateOneRequiredWithoutPurchaseNestedInput
    user?: UserUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutTicketInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type Domestic_TicketUpsertWithoutTicketInput = {
    update: XOR<Domestic_TicketUpdateWithoutTicketInput, Domestic_TicketUncheckedUpdateWithoutTicketInput>
    create: XOR<Domestic_TicketCreateWithoutTicketInput, Domestic_TicketUncheckedCreateWithoutTicketInput>
    where?: Domestic_TicketWhereInput
  }

  export type Domestic_TicketUpdateToOneWithWhereWithoutTicketInput = {
    where?: Domestic_TicketWhereInput
    data: XOR<Domestic_TicketUpdateWithoutTicketInput, Domestic_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type Domestic_TicketUpdateWithoutTicketInput = {

  }

  export type Domestic_TicketUncheckedUpdateWithoutTicketInput = {

  }

  export type International_TicketUpsertWithoutTicketInput = {
    update: XOR<International_TicketUpdateWithoutTicketInput, International_TicketUncheckedUpdateWithoutTicketInput>
    create: XOR<International_TicketCreateWithoutTicketInput, International_TicketUncheckedCreateWithoutTicketInput>
    where?: International_TicketWhereInput
  }

  export type International_TicketUpdateToOneWithWhereWithoutTicketInput = {
    where?: International_TicketWhereInput
    data: XOR<International_TicketUpdateWithoutTicketInput, International_TicketUncheckedUpdateWithoutTicketInput>
  }

  export type International_TicketUpdateWithoutTicketInput = {
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type International_TicketUncheckedUpdateWithoutTicketInput = {
    PassportNo?: StringFieldUpdateOperationsInput | string
    IssuedCountry?: StringFieldUpdateOperationsInput | string
    PassportExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Round_Trip_TicketUpsertWithoutTicket1Input = {
    update: XOR<Round_Trip_TicketUpdateWithoutTicket1Input, Round_Trip_TicketUncheckedUpdateWithoutTicket1Input>
    create: XOR<Round_Trip_TicketCreateWithoutTicket1Input, Round_Trip_TicketUncheckedCreateWithoutTicket1Input>
    where?: Round_Trip_TicketWhereInput
  }

  export type Round_Trip_TicketUpdateToOneWithWhereWithoutTicket1Input = {
    where?: Round_Trip_TicketWhereInput
    data: XOR<Round_Trip_TicketUpdateWithoutTicket1Input, Round_Trip_TicketUncheckedUpdateWithoutTicket1Input>
  }

  export type Round_Trip_TicketUpdateWithoutTicket1Input = {
    ticket2?: TicketUpdateOneRequiredWithoutRoundTripTicketPart2NestedInput
  }

  export type Round_Trip_TicketUncheckedUpdateWithoutTicket1Input = {
    TicketID2?: StringFieldUpdateOperationsInput | string
  }

  export type Round_Trip_TicketUpsertWithoutTicket2Input = {
    update: XOR<Round_Trip_TicketUpdateWithoutTicket2Input, Round_Trip_TicketUncheckedUpdateWithoutTicket2Input>
    create: XOR<Round_Trip_TicketCreateWithoutTicket2Input, Round_Trip_TicketUncheckedCreateWithoutTicket2Input>
    where?: Round_Trip_TicketWhereInput
  }

  export type Round_Trip_TicketUpdateToOneWithWhereWithoutTicket2Input = {
    where?: Round_Trip_TicketWhereInput
    data: XOR<Round_Trip_TicketUpdateWithoutTicket2Input, Round_Trip_TicketUncheckedUpdateWithoutTicket2Input>
  }

  export type Round_Trip_TicketUpdateWithoutTicket2Input = {
    ticket1?: TicketUpdateOneRequiredWithoutRoundTripTicketPart1NestedInput
  }

  export type Round_Trip_TicketUncheckedUpdateWithoutTicket2Input = {
    TicketID?: StringFieldUpdateOperationsInput | string
  }

  export type AirportCreateWithoutOperatesInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    departureFlights?: FlightCreateNestedManyWithoutDepartureAirportInput
    arrivalFlights?: FlightCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportUncheckedCreateWithoutOperatesInput = {
    AirportID: string
    AirportName: string
    City: string
    Country: string
    departureFlights?: FlightUncheckedCreateNestedManyWithoutDepartureAirportInput
    arrivalFlights?: FlightUncheckedCreateNestedManyWithoutArrivalAirportInput
  }

  export type AirportCreateOrConnectWithoutOperatesInput = {
    where: AirportWhereUniqueInput
    create: XOR<AirportCreateWithoutOperatesInput, AirportUncheckedCreateWithoutOperatesInput>
  }

  export type AirlineCreateWithoutOperatesInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutOperatesInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutOperatesInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutOperatesInput, AirlineUncheckedCreateWithoutOperatesInput>
  }

  export type AirportUpsertWithoutOperatesInput = {
    update: XOR<AirportUpdateWithoutOperatesInput, AirportUncheckedUpdateWithoutOperatesInput>
    create: XOR<AirportCreateWithoutOperatesInput, AirportUncheckedCreateWithoutOperatesInput>
    where?: AirportWhereInput
  }

  export type AirportUpdateToOneWithWhereWithoutOperatesInput = {
    where?: AirportWhereInput
    data: XOR<AirportUpdateWithoutOperatesInput, AirportUncheckedUpdateWithoutOperatesInput>
  }

  export type AirportUpdateWithoutOperatesInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    departureFlights?: FlightUpdateManyWithoutDepartureAirportNestedInput
    arrivalFlights?: FlightUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirportUncheckedUpdateWithoutOperatesInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
    AirportName?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    departureFlights?: FlightUncheckedUpdateManyWithoutDepartureAirportNestedInput
    arrivalFlights?: FlightUncheckedUpdateManyWithoutArrivalAirportNestedInput
  }

  export type AirlineUpsertWithoutOperatesInput = {
    update: XOR<AirlineUpdateWithoutOperatesInput, AirlineUncheckedUpdateWithoutOperatesInput>
    create: XOR<AirlineCreateWithoutOperatesInput, AirlineUncheckedCreateWithoutOperatesInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutOperatesInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutOperatesInput, AirlineUncheckedUpdateWithoutOperatesInput>
  }

  export type AirlineUpdateWithoutOperatesInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutOperatesInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type FlightCreateWithoutPassengersInput = {
    FlightNo: string
    Schedule: Date | string
    arrivalAirport: AirportCreateNestedOneWithoutArrivalFlightsInput
    departureAirport: AirportCreateNestedOneWithoutDepartureFlightsInput
    airline: AirlineCreateNestedOneWithoutFlightsInput
    aircraft: AircraftCreateNestedOneWithoutFlightsInput
    tickets?: TicketCreateNestedManyWithoutFlightInput
  }

  export type FlightUncheckedCreateWithoutPassengersInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
    tickets?: TicketUncheckedCreateNestedManyWithoutFlightInput
  }

  export type FlightCreateOrConnectWithoutPassengersInput = {
    where: FlightWhereUniqueInput
    create: XOR<FlightCreateWithoutPassengersInput, FlightUncheckedCreateWithoutPassengersInput>
  }

  export type UserCreateWithoutAssignedFlightsInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedFlightsInput = {
    UserAccountID: string
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedFlightsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedFlightsInput, UserUncheckedCreateWithoutAssignedFlightsInput>
  }

  export type FlightUpsertWithoutPassengersInput = {
    update: XOR<FlightUpdateWithoutPassengersInput, FlightUncheckedUpdateWithoutPassengersInput>
    create: XOR<FlightCreateWithoutPassengersInput, FlightUncheckedCreateWithoutPassengersInput>
    where?: FlightWhereInput
  }

  export type FlightUpdateToOneWithWhereWithoutPassengersInput = {
    where?: FlightWhereInput
    data: XOR<FlightUpdateWithoutPassengersInput, FlightUncheckedUpdateWithoutPassengersInput>
  }

  export type FlightUpdateWithoutPassengersInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutPassengersInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type UserUpsertWithoutAssignedFlightsInput = {
    update: XOR<UserUpdateWithoutAssignedFlightsInput, UserUncheckedUpdateWithoutAssignedFlightsInput>
    create: XOR<UserCreateWithoutAssignedFlightsInput, UserUncheckedCreateWithoutAssignedFlightsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedFlightsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedFlightsInput, UserUncheckedUpdateWithoutAssignedFlightsInput>
  }

  export type UserUpdateWithoutAssignedFlightsInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedFlightsInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdminCreateWithoutContactsInput = {
    IPAddress?: string | null
    account: AccountCreateNestedOneWithoutAdminInput
    sentAirlineMessages?: Airline_MessageCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutContactsInput = {
    AdminAccountID: string
    IPAddress?: string | null
    sentAirlineMessages?: Airline_MessageUncheckedCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutContactsInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutContactsInput, AdminUncheckedCreateWithoutContactsInput>
  }

  export type AirlineCreateWithoutContactsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutContactsInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutContactsInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutContactsInput, AirlineUncheckedCreateWithoutContactsInput>
  }

  export type AdminUpsertWithoutContactsInput = {
    update: XOR<AdminUpdateWithoutContactsInput, AdminUncheckedUpdateWithoutContactsInput>
    create: XOR<AdminCreateWithoutContactsInput, AdminUncheckedCreateWithoutContactsInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutContactsInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutContactsInput, AdminUncheckedUpdateWithoutContactsInput>
  }

  export type AdminUpdateWithoutContactsInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutAdminNestedInput
    sentAirlineMessages?: Airline_MessageUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutContactsInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sentAirlineMessages?: Airline_MessageUncheckedUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AirlineUpsertWithoutContactsInput = {
    update: XOR<AirlineUpdateWithoutContactsInput, AirlineUncheckedUpdateWithoutContactsInput>
    create: XOR<AirlineCreateWithoutContactsInput, AirlineUncheckedCreateWithoutContactsInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutContactsInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutContactsInput, AirlineUncheckedUpdateWithoutContactsInput>
  }

  export type AirlineUpdateWithoutContactsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutContactsInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type AdminCreateWithoutInvolvedInReportsInput = {
    IPAddress?: string | null
    account: AccountCreateNestedOneWithoutAdminInput
    sentAirlineMessages?: Airline_MessageCreateNestedManyWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutInvolvedInReportsInput = {
    AdminAccountID: string
    IPAddress?: string | null
    sentAirlineMessages?: Airline_MessageUncheckedCreateNestedManyWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutInvolvedInReportsInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutInvolvedInReportsInput, AdminUncheckedCreateWithoutInvolvedInReportsInput>
  }

  export type UserCreateWithoutInvolvedInReportsInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvolvedInReportsInput = {
    UserAccountID: string
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvolvedInReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvolvedInReportsInput, UserUncheckedCreateWithoutInvolvedInReportsInput>
  }

  export type ReportCreateWithoutCreatorInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    Email: string
    TelNo: string
    PassengerName: string
  }

  export type ReportUncheckedCreateWithoutCreatorInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    Email: string
    TelNo: string
    PassengerName: string
  }

  export type ReportCreateOrConnectWithoutCreatorInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput>
  }

  export type ReportCreateManyCreatorInputEnvelope = {
    data: ReportCreateManyCreatorInput | ReportCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutInvolvedInReportsInput = {
    update: XOR<AdminUpdateWithoutInvolvedInReportsInput, AdminUncheckedUpdateWithoutInvolvedInReportsInput>
    create: XOR<AdminCreateWithoutInvolvedInReportsInput, AdminUncheckedCreateWithoutInvolvedInReportsInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutInvolvedInReportsInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutInvolvedInReportsInput, AdminUncheckedUpdateWithoutInvolvedInReportsInput>
  }

  export type AdminUpdateWithoutInvolvedInReportsInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutAdminNestedInput
    sentAirlineMessages?: Airline_MessageUpdateManyWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutInvolvedInReportsInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sentAirlineMessages?: Airline_MessageUncheckedUpdateManyWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserUpsertWithoutInvolvedInReportsInput = {
    update: XOR<UserUpdateWithoutInvolvedInReportsInput, UserUncheckedUpdateWithoutInvolvedInReportsInput>
    create: XOR<UserCreateWithoutInvolvedInReportsInput, UserUncheckedCreateWithoutInvolvedInReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvolvedInReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvolvedInReportsInput, UserUncheckedUpdateWithoutInvolvedInReportsInput>
  }

  export type UserUpdateWithoutInvolvedInReportsInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvolvedInReportsInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReportUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutCreatorInput, ReportUncheckedUpdateWithoutCreatorInput>
    create: XOR<ReportCreateWithoutCreatorInput, ReportUncheckedCreateWithoutCreatorInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutCreatorInput, ReportUncheckedUpdateWithoutCreatorInput>
  }

  export type ReportUpdateManyWithWhereWithoutCreatorInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    ReportID?: StringFilter<"Report"> | string
    ReportDescription?: StringFilter<"Report"> | string
    BookingID?: StringFilter<"Report"> | string
    Attachment?: StringNullableFilter<"Report"> | string | null
    UserAccountID?: StringFilter<"Report"> | string
    AdminAccountID?: StringFilter<"Report"> | string
    Email?: StringFilter<"Report"> | string
    TelNo?: StringFilter<"Report"> | string
    PassengerName?: StringFilter<"Report"> | string
  }

  export type AircraftCreateWithoutCabinsInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    airline: AirlineCreateNestedOneWithoutAircraftsInput
    seats?: SeatCreateNestedManyWithoutAircraftInput
    flights?: FlightCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUncheckedCreateWithoutCabinsInput = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
    seats?: SeatUncheckedCreateNestedManyWithoutAircraftInput
    flights?: FlightUncheckedCreateNestedManyWithoutAircraftInput
  }

  export type AircraftCreateOrConnectWithoutCabinsInput = {
    where: AircraftWhereUniqueInput
    create: XOR<AircraftCreateWithoutCabinsInput, AircraftUncheckedCreateWithoutCabinsInput>
  }

  export type AircraftUpsertWithoutCabinsInput = {
    update: XOR<AircraftUpdateWithoutCabinsInput, AircraftUncheckedUpdateWithoutCabinsInput>
    create: XOR<AircraftCreateWithoutCabinsInput, AircraftUncheckedCreateWithoutCabinsInput>
    where?: AircraftWhereInput
  }

  export type AircraftUpdateToOneWithWhereWithoutCabinsInput = {
    where?: AircraftWhereInput
    data: XOR<AircraftUpdateWithoutCabinsInput, AircraftUncheckedUpdateWithoutCabinsInput>
  }

  export type AircraftUpdateWithoutCabinsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutAircraftsNestedInput
    seats?: SeatUpdateManyWithoutAircraftNestedInput
    flights?: FlightUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateWithoutCabinsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    seats?: SeatUncheckedUpdateManyWithoutAircraftNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftCreateWithoutSeatsInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
    airline: AirlineCreateNestedOneWithoutAircraftsInput
    flights?: FlightCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassCreateNestedManyWithoutAircraftInput
  }

  export type AircraftUncheckedCreateWithoutSeatsInput = {
    AircraftRegNo: string
    AirlineName: string
    SeatCapacity: number
    ModelName: string
    flights?: FlightUncheckedCreateNestedManyWithoutAircraftInput
    cabins?: CabinClassUncheckedCreateNestedManyWithoutAircraftInput
  }

  export type AircraftCreateOrConnectWithoutSeatsInput = {
    where: AircraftWhereUniqueInput
    create: XOR<AircraftCreateWithoutSeatsInput, AircraftUncheckedCreateWithoutSeatsInput>
  }

  export type TicketCreateWithoutSeatInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutSeatInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutSeatInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput>
  }

  export type TicketCreateManySeatInputEnvelope = {
    data: TicketCreateManySeatInput | TicketCreateManySeatInput[]
    skipDuplicates?: boolean
  }

  export type AircraftUpsertWithoutSeatsInput = {
    update: XOR<AircraftUpdateWithoutSeatsInput, AircraftUncheckedUpdateWithoutSeatsInput>
    create: XOR<AircraftCreateWithoutSeatsInput, AircraftUncheckedCreateWithoutSeatsInput>
    where?: AircraftWhereInput
  }

  export type AircraftUpdateToOneWithWhereWithoutSeatsInput = {
    where?: AircraftWhereInput
    data: XOR<AircraftUpdateWithoutSeatsInput, AircraftUncheckedUpdateWithoutSeatsInput>
  }

  export type AircraftUpdateWithoutSeatsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutAircraftsNestedInput
    flights?: FlightUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateWithoutSeatsInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    flights?: FlightUncheckedUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUncheckedUpdateManyWithoutAircraftNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutSeatInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutSeatInput, TicketUncheckedUpdateWithoutSeatInput>
    create: XOR<TicketCreateWithoutSeatInput, TicketUncheckedCreateWithoutSeatInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutSeatInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutSeatInput, TicketUncheckedUpdateWithoutSeatInput>
  }

  export type TicketUpdateManyWithWhereWithoutSeatInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutSeatInput>
  }

  export type AccountCreateWithoutAdminInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    user?: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAdminInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    user?: UserUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAdminInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
  }

  export type Airline_MessageCreateWithoutAdminInput = {
    MessageText: string
    airline: AirlineCreateNestedOneWithoutMessagesInput
  }

  export type Airline_MessageUncheckedCreateWithoutAdminInput = {
    AirlineName: string
    MessageText: string
  }

  export type Airline_MessageCreateOrConnectWithoutAdminInput = {
    where: Airline_MessageWhereUniqueInput
    create: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput>
  }

  export type Airline_MessageCreateManyAdminInputEnvelope = {
    data: Airline_MessageCreateManyAdminInput | Airline_MessageCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutAdminInput = {
    ContactStatus: string
    airline: AirlineCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateWithoutAdminInput = {
    AirlineName: string
    ContactStatus: string
  }

  export type ContactCreateOrConnectWithoutAdminInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput>
  }

  export type ContactCreateManyAdminInputEnvelope = {
    data: ContactCreateManyAdminInput | ContactCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type Report_ToCreateWithoutAdminInput = {
    ReportStatus: string
    user: UserCreateNestedOneWithoutInvolvedInReportsInput
    Reports?: ReportCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToUncheckedCreateWithoutAdminInput = {
    UserAccountID: string
    ReportStatus: string
    Reports?: ReportUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToCreateOrConnectWithoutAdminInput = {
    where: Report_ToWhereUniqueInput
    create: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput>
  }

  export type Report_ToCreateManyAdminInputEnvelope = {
    data: Report_ToCreateManyAdminInput | Report_ToCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutAdminInput = {
    update: XOR<AccountUpdateWithoutAdminInput, AccountUncheckedUpdateWithoutAdminInput>
    create: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutAdminInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutAdminInput, AccountUncheckedUpdateWithoutAdminInput>
  }

  export type AccountUpdateWithoutAdminInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAdminInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type Airline_MessageUpsertWithWhereUniqueWithoutAdminInput = {
    where: Airline_MessageWhereUniqueInput
    update: XOR<Airline_MessageUpdateWithoutAdminInput, Airline_MessageUncheckedUpdateWithoutAdminInput>
    create: XOR<Airline_MessageCreateWithoutAdminInput, Airline_MessageUncheckedCreateWithoutAdminInput>
  }

  export type Airline_MessageUpdateWithWhereUniqueWithoutAdminInput = {
    where: Airline_MessageWhereUniqueInput
    data: XOR<Airline_MessageUpdateWithoutAdminInput, Airline_MessageUncheckedUpdateWithoutAdminInput>
  }

  export type Airline_MessageUpdateManyWithWhereWithoutAdminInput = {
    where: Airline_MessageScalarWhereInput
    data: XOR<Airline_MessageUpdateManyMutationInput, Airline_MessageUncheckedUpdateManyWithoutAdminInput>
  }

  export type ContactUpsertWithWhereUniqueWithoutAdminInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutAdminInput, ContactUncheckedUpdateWithoutAdminInput>
    create: XOR<ContactCreateWithoutAdminInput, ContactUncheckedCreateWithoutAdminInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutAdminInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutAdminInput, ContactUncheckedUpdateWithoutAdminInput>
  }

  export type ContactUpdateManyWithWhereWithoutAdminInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutAdminInput>
  }

  export type Report_ToUpsertWithWhereUniqueWithoutAdminInput = {
    where: Report_ToWhereUniqueInput
    update: XOR<Report_ToUpdateWithoutAdminInput, Report_ToUncheckedUpdateWithoutAdminInput>
    create: XOR<Report_ToCreateWithoutAdminInput, Report_ToUncheckedCreateWithoutAdminInput>
  }

  export type Report_ToUpdateWithWhereUniqueWithoutAdminInput = {
    where: Report_ToWhereUniqueInput
    data: XOR<Report_ToUpdateWithoutAdminInput, Report_ToUncheckedUpdateWithoutAdminInput>
  }

  export type Report_ToUpdateManyWithWhereWithoutAdminInput = {
    where: Report_ToScalarWhereInput
    data: XOR<Report_ToUpdateManyMutationInput, Report_ToUncheckedUpdateManyWithoutAdminInput>
  }

  export type Report_ToScalarWhereInput = {
    AND?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
    OR?: Report_ToScalarWhereInput[]
    NOT?: Report_ToScalarWhereInput | Report_ToScalarWhereInput[]
    UserAccountID?: StringFilter<"Report_To"> | string
    AdminAccountID?: StringFilter<"Report_To"> | string
    ReportStatus?: StringFilter<"Report_To"> | string
  }

  export type AdminCreateWithoutSentAirlineMessagesInput = {
    IPAddress?: string | null
    account: AccountCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutSentAirlineMessagesInput = {
    AdminAccountID: string
    IPAddress?: string | null
    contacts?: ContactUncheckedCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutSentAirlineMessagesInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutSentAirlineMessagesInput, AdminUncheckedCreateWithoutSentAirlineMessagesInput>
  }

  export type AirlineCreateWithoutMessagesInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutMessagesInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    telNos?: Airline_Tel_NoUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutMessagesInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutMessagesInput, AirlineUncheckedCreateWithoutMessagesInput>
  }

  export type AdminUpsertWithoutSentAirlineMessagesInput = {
    update: XOR<AdminUpdateWithoutSentAirlineMessagesInput, AdminUncheckedUpdateWithoutSentAirlineMessagesInput>
    create: XOR<AdminCreateWithoutSentAirlineMessagesInput, AdminUncheckedCreateWithoutSentAirlineMessagesInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutSentAirlineMessagesInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutSentAirlineMessagesInput, AdminUncheckedUpdateWithoutSentAirlineMessagesInput>
  }

  export type AdminUpdateWithoutSentAirlineMessagesInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutSentAirlineMessagesInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUncheckedUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AirlineUpsertWithoutMessagesInput = {
    update: XOR<AirlineUpdateWithoutMessagesInput, AirlineUncheckedUpdateWithoutMessagesInput>
    create: XOR<AirlineCreateWithoutMessagesInput, AirlineUncheckedCreateWithoutMessagesInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutMessagesInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutMessagesInput, AirlineUncheckedUpdateWithoutMessagesInput>
  }

  export type AirlineUpdateWithoutMessagesInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutMessagesInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    telNos?: Airline_Tel_NoUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type UserCreateWithoutAccountInput = {
    Email: string
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type AdminCreateWithoutAccountInput = {
    IPAddress?: string | null
    sentAirlineMessages?: Airline_MessageCreateNestedManyWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutAccountInput = {
    IPAddress?: string | null
    sentAirlineMessages?: Airline_MessageUncheckedCreateNestedManyWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAdminInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutAccountInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdminUpsertWithoutAccountInput = {
    update: XOR<AdminUpdateWithoutAccountInput, AdminUncheckedUpdateWithoutAccountInput>
    create: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutAccountInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutAccountInput, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUpdateWithoutAccountInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sentAirlineMessages?: Airline_MessageUpdateManyWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutAccountInput = {
    IPAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sentAirlineMessages?: Airline_MessageUncheckedUpdateManyWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAdminNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    admin?: AdminCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    AccountID: string
    Password: string
    FirstName: string
    LastName: string
    admin?: AdminUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type User_Tel_NoCreateWithoutUserInput = {
    TelNo: string
  }

  export type User_Tel_NoUncheckedCreateWithoutUserInput = {
    TelNo: string
  }

  export type User_Tel_NoCreateOrConnectWithoutUserInput = {
    where: User_Tel_NoWhereUniqueInput
    create: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput>
  }

  export type User_Tel_NoCreateManyUserInputEnvelope = {
    data: User_Tel_NoCreateManyUserInput | User_Tel_NoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Assigned_ToCreateWithoutUserInput = {
    flight: FlightCreateNestedOneWithoutPassengersInput
  }

  export type Assigned_ToUncheckedCreateWithoutUserInput = {
    FlightNo: string
    Schedule: Date | string
  }

  export type Assigned_ToCreateOrConnectWithoutUserInput = {
    where: Assigned_ToWhereUniqueInput
    create: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput>
  }

  export type Assigned_ToCreateManyUserInputEnvelope = {
    data: Assigned_ToCreateManyUserInput | Assigned_ToCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseCreateWithoutUserInput = {
    ticket: TicketCreateNestedOneWithoutPurchaseInput
    payment: PaymentCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutUserInput = {
    TicketID: string
    PaymentID: string
  }

  export type PurchaseCreateOrConnectWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type PurchaseCreateManyUserInputEnvelope = {
    data: PurchaseCreateManyUserInput | PurchaseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Report_ToCreateWithoutUserInput = {
    ReportStatus: string
    admin: AdminCreateNestedOneWithoutInvolvedInReportsInput
    Reports?: ReportCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToUncheckedCreateWithoutUserInput = {
    AdminAccountID: string
    ReportStatus: string
    Reports?: ReportUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type Report_ToCreateOrConnectWithoutUserInput = {
    where: Report_ToWhereUniqueInput
    create: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput>
  }

  export type Report_ToCreateManyUserInputEnvelope = {
    data: Report_ToCreateManyUserInput | Report_ToCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    SessionID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    SessionID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutUserInput = {
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutUserInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateWithoutUserInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    AccountID?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    admin?: AdminUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type User_Tel_NoUpsertWithWhereUniqueWithoutUserInput = {
    where: User_Tel_NoWhereUniqueInput
    update: XOR<User_Tel_NoUpdateWithoutUserInput, User_Tel_NoUncheckedUpdateWithoutUserInput>
    create: XOR<User_Tel_NoCreateWithoutUserInput, User_Tel_NoUncheckedCreateWithoutUserInput>
  }

  export type User_Tel_NoUpdateWithWhereUniqueWithoutUserInput = {
    where: User_Tel_NoWhereUniqueInput
    data: XOR<User_Tel_NoUpdateWithoutUserInput, User_Tel_NoUncheckedUpdateWithoutUserInput>
  }

  export type User_Tel_NoUpdateManyWithWhereWithoutUserInput = {
    where: User_Tel_NoScalarWhereInput
    data: XOR<User_Tel_NoUpdateManyMutationInput, User_Tel_NoUncheckedUpdateManyWithoutUserInput>
  }

  export type User_Tel_NoScalarWhereInput = {
    AND?: User_Tel_NoScalarWhereInput | User_Tel_NoScalarWhereInput[]
    OR?: User_Tel_NoScalarWhereInput[]
    NOT?: User_Tel_NoScalarWhereInput | User_Tel_NoScalarWhereInput[]
    UserAccountID?: StringFilter<"User_Tel_No"> | string
    TelNo?: StringFilter<"User_Tel_No"> | string
  }

  export type Assigned_ToUpsertWithWhereUniqueWithoutUserInput = {
    where: Assigned_ToWhereUniqueInput
    update: XOR<Assigned_ToUpdateWithoutUserInput, Assigned_ToUncheckedUpdateWithoutUserInput>
    create: XOR<Assigned_ToCreateWithoutUserInput, Assigned_ToUncheckedCreateWithoutUserInput>
  }

  export type Assigned_ToUpdateWithWhereUniqueWithoutUserInput = {
    where: Assigned_ToWhereUniqueInput
    data: XOR<Assigned_ToUpdateWithoutUserInput, Assigned_ToUncheckedUpdateWithoutUserInput>
  }

  export type Assigned_ToUpdateManyWithWhereWithoutUserInput = {
    where: Assigned_ToScalarWhereInput
    data: XOR<Assigned_ToUpdateManyMutationInput, Assigned_ToUncheckedUpdateManyWithoutUserInput>
  }

  export type PurchaseUpsertWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutUserInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutUserInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    OR?: PurchaseScalarWhereInput[]
    NOT?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    TicketID?: StringFilter<"Purchase"> | string
    PaymentID?: StringFilter<"Purchase"> | string
    UserAccountID?: StringFilter<"Purchase"> | string
  }

  export type Report_ToUpsertWithWhereUniqueWithoutUserInput = {
    where: Report_ToWhereUniqueInput
    update: XOR<Report_ToUpdateWithoutUserInput, Report_ToUncheckedUpdateWithoutUserInput>
    create: XOR<Report_ToCreateWithoutUserInput, Report_ToUncheckedCreateWithoutUserInput>
  }

  export type Report_ToUpdateWithWhereUniqueWithoutUserInput = {
    where: Report_ToWhereUniqueInput
    data: XOR<Report_ToUpdateWithoutUserInput, Report_ToUncheckedUpdateWithoutUserInput>
  }

  export type Report_ToUpdateManyWithWhereWithoutUserInput = {
    where: Report_ToScalarWhereInput
    data: XOR<Report_ToUpdateManyMutationInput, Report_ToUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    SessionID?: StringFilter<"Session"> | string
    UserAccountID?: StringFilter<"Session"> | string
    TokenHash?: StringFilter<"Session"> | string
    CreatedAt?: DateTimeFilter<"Session"> | Date | string
    LastSeenAt?: DateTimeFilter<"Session"> | Date | string
    IdleExpiresAt?: DateTimeFilter<"Session"> | Date | string
    AbsoluteExpiresAt?: DateTimeFilter<"Session"> | Date | string
    RevokedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    RevokeReason?: StringNullableFilter<"Session"> | string | null
  }

  export type UserCreateWithoutTelNosInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTelNosInput = {
    UserAccountID: string
    Email: string
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTelNosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTelNosInput, UserUncheckedCreateWithoutTelNosInput>
  }

  export type UserUpsertWithoutTelNosInput = {
    update: XOR<UserUpdateWithoutTelNosInput, UserUncheckedUpdateWithoutTelNosInput>
    create: XOR<UserCreateWithoutTelNosInput, UserUncheckedCreateWithoutTelNosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTelNosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTelNosInput, UserUncheckedUpdateWithoutTelNosInput>
  }

  export type UserUpdateWithoutTelNosInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTelNosInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type Report_ToCreateWithoutReportsInput = {
    ReportStatus: string
    admin: AdminCreateNestedOneWithoutInvolvedInReportsInput
    user: UserCreateNestedOneWithoutInvolvedInReportsInput
  }

  export type Report_ToUncheckedCreateWithoutReportsInput = {
    UserAccountID: string
    AdminAccountID: string
    ReportStatus: string
  }

  export type Report_ToCreateOrConnectWithoutReportsInput = {
    where: Report_ToWhereUniqueInput
    create: XOR<Report_ToCreateWithoutReportsInput, Report_ToUncheckedCreateWithoutReportsInput>
  }

  export type Report_ToUpsertWithoutReportsInput = {
    update: XOR<Report_ToUpdateWithoutReportsInput, Report_ToUncheckedUpdateWithoutReportsInput>
    create: XOR<Report_ToCreateWithoutReportsInput, Report_ToUncheckedCreateWithoutReportsInput>
    where?: Report_ToWhereInput
  }

  export type Report_ToUpdateToOneWithWhereWithoutReportsInput = {
    where?: Report_ToWhereInput
    data: XOR<Report_ToUpdateWithoutReportsInput, Report_ToUncheckedUpdateWithoutReportsInput>
  }

  export type Report_ToUpdateWithoutReportsInput = {
    ReportStatus?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutInvolvedInReportsNestedInput
    user?: UserUpdateOneRequiredWithoutInvolvedInReportsNestedInput
  }

  export type Report_ToUncheckedUpdateWithoutReportsInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateWithoutDomesticTicketInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutDomesticTicketInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutDomesticTicketInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutDomesticTicketInput, TicketUncheckedCreateWithoutDomesticTicketInput>
  }

  export type TicketUpsertWithoutDomesticTicketInput = {
    update: XOR<TicketUpdateWithoutDomesticTicketInput, TicketUncheckedUpdateWithoutDomesticTicketInput>
    create: XOR<TicketCreateWithoutDomesticTicketInput, TicketUncheckedCreateWithoutDomesticTicketInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutDomesticTicketInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutDomesticTicketInput, TicketUncheckedUpdateWithoutDomesticTicketInput>
  }

  export type TicketUpdateWithoutDomesticTicketInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutDomesticTicketInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketCreateWithoutInternationalTicketInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutInternationalTicketInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutInternationalTicketInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutInternationalTicketInput, TicketUncheckedCreateWithoutInternationalTicketInput>
  }

  export type TicketUpsertWithoutInternationalTicketInput = {
    update: XOR<TicketUpdateWithoutInternationalTicketInput, TicketUncheckedUpdateWithoutInternationalTicketInput>
    create: XOR<TicketCreateWithoutInternationalTicketInput, TicketUncheckedCreateWithoutInternationalTicketInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutInternationalTicketInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutInternationalTicketInput, TicketUncheckedUpdateWithoutInternationalTicketInput>
  }

  export type TicketUpdateWithoutInternationalTicketInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutInternationalTicketInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketCreateWithoutRoundTripTicketPart1Input = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutRoundTripTicketPart1Input = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutRoundTripTicketPart1Input = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutRoundTripTicketPart1Input, TicketUncheckedCreateWithoutRoundTripTicketPart1Input>
  }

  export type TicketCreateWithoutRoundTripTicketPart2Input = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    purchase?: PurchaseCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
  }

  export type TicketUncheckedCreateWithoutRoundTripTicketPart2Input = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    purchase?: PurchaseUncheckedCreateNestedOneWithoutTicketInput
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
  }

  export type TicketCreateOrConnectWithoutRoundTripTicketPart2Input = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutRoundTripTicketPart2Input, TicketUncheckedCreateWithoutRoundTripTicketPart2Input>
  }

  export type TicketUpsertWithoutRoundTripTicketPart1Input = {
    update: XOR<TicketUpdateWithoutRoundTripTicketPart1Input, TicketUncheckedUpdateWithoutRoundTripTicketPart1Input>
    create: XOR<TicketCreateWithoutRoundTripTicketPart1Input, TicketUncheckedCreateWithoutRoundTripTicketPart1Input>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutRoundTripTicketPart1Input = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutRoundTripTicketPart1Input, TicketUncheckedUpdateWithoutRoundTripTicketPart1Input>
  }

  export type TicketUpdateWithoutRoundTripTicketPart1Input = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutRoundTripTicketPart1Input = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUpsertWithoutRoundTripTicketPart2Input = {
    update: XOR<TicketUpdateWithoutRoundTripTicketPart2Input, TicketUncheckedUpdateWithoutRoundTripTicketPart2Input>
    create: XOR<TicketCreateWithoutRoundTripTicketPart2Input, TicketUncheckedCreateWithoutRoundTripTicketPart2Input>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutRoundTripTicketPart2Input = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutRoundTripTicketPart2Input, TicketUncheckedUpdateWithoutRoundTripTicketPart2Input>
  }

  export type TicketUpdateWithoutRoundTripTicketPart2Input = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
  }

  export type TicketUncheckedUpdateWithoutRoundTripTicketPart2Input = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
  }

  export type TicketCreateWithoutPurchaseInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    flight: FlightCreateNestedOneWithoutTicketsInput
    seat: SeatCreateNestedOneWithoutTicketsInput
    domesticTicket?: Domestic_TicketCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketCreateNestedOneWithoutTicket2Input
  }

  export type TicketUncheckedCreateWithoutPurchaseInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
    FlightNo: string
    Schedule: Date | string
    domesticTicket?: Domestic_TicketUncheckedCreateNestedOneWithoutTicketInput
    internationalTicket?: International_TicketUncheckedCreateNestedOneWithoutTicketInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket1Input
    roundTripTicketPart2?: Round_Trip_TicketUncheckedCreateNestedOneWithoutTicket2Input
  }

  export type TicketCreateOrConnectWithoutPurchaseInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutPurchaseInput, TicketUncheckedCreateWithoutPurchaseInput>
  }

  export type PaymentCreateWithoutPurchaseInput = {
    PaymentID: string
    PaymentDateTime: Date | string
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
  }

  export type PaymentUncheckedCreateWithoutPurchaseInput = {
    PaymentID: string
    PaymentDateTime: Date | string
    PaymentMethod: string
    TransactionStatus: string
    Amount: number
  }

  export type PaymentCreateOrConnectWithoutPurchaseInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPurchaseInput, PaymentUncheckedCreateWithoutPurchaseInput>
  }

  export type UserCreateWithoutPurchasesInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchasesInput = {
    UserAccountID: string
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
  }

  export type TicketUpsertWithoutPurchaseInput = {
    update: XOR<TicketUpdateWithoutPurchaseInput, TicketUncheckedUpdateWithoutPurchaseInput>
    create: XOR<TicketCreateWithoutPurchaseInput, TicketUncheckedCreateWithoutPurchaseInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutPurchaseInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutPurchaseInput, TicketUncheckedUpdateWithoutPurchaseInput>
  }

  export type TicketUpdateWithoutPurchaseInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutPurchaseInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type PaymentUpsertWithoutPurchaseInput = {
    update: XOR<PaymentUpdateWithoutPurchaseInput, PaymentUncheckedUpdateWithoutPurchaseInput>
    create: XOR<PaymentCreateWithoutPurchaseInput, PaymentUncheckedCreateWithoutPurchaseInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutPurchaseInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutPurchaseInput, PaymentUncheckedUpdateWithoutPurchaseInput>
  }

  export type PaymentUpdateWithoutPurchaseInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateWithoutPurchaseInput = {
    PaymentID?: StringFieldUpdateOperationsInput | string
    PaymentDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentMethod?: StringFieldUpdateOperationsInput | string
    TransactionStatus?: StringFieldUpdateOperationsInput | string
    Amount?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutPurchasesInput = {
    update: XOR<UserUpdateWithoutPurchasesInput, UserUncheckedUpdateWithoutPurchasesInput>
    create: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPurchasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPurchasesInput, UserUncheckedUpdateWithoutPurchasesInput>
  }

  export type UserUpdateWithoutPurchasesInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchasesInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PurchaseCreateWithoutPaymentInput = {
    ticket: TicketCreateNestedOneWithoutPurchaseInput
    user: UserCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateWithoutPaymentInput = {
    TicketID: string
    UserAccountID: string
  }

  export type PurchaseCreateOrConnectWithoutPaymentInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
  }

  export type PurchaseUpsertWithoutPaymentInput = {
    update: XOR<PurchaseUpdateWithoutPaymentInput, PurchaseUncheckedUpdateWithoutPaymentInput>
    create: XOR<PurchaseCreateWithoutPaymentInput, PurchaseUncheckedCreateWithoutPaymentInput>
    where?: PurchaseWhereInput
  }

  export type PurchaseUpdateToOneWithWhereWithoutPaymentInput = {
    where?: PurchaseWhereInput
    data: XOR<PurchaseUpdateWithoutPaymentInput, PurchaseUncheckedUpdateWithoutPaymentInput>
  }

  export type PurchaseUpdateWithoutPaymentInput = {
    ticket?: TicketUpdateOneRequiredWithoutPurchaseNestedInput
    user?: UserUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutPaymentInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type AirlineCreateWithoutTelNosInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftCreateNestedManyWithoutAirlineInput
    flights?: FlightCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageCreateNestedManyWithoutAirlineInput
    contacts?: ContactCreateNestedManyWithoutAirlineInput
  }

  export type AirlineUncheckedCreateWithoutTelNosInput = {
    AirlineName: string
    AirlineCaption: string
    Website?: string | null
    AmountOfAircraft: number
    Logo?: string | null
    operates?: OperateUncheckedCreateNestedManyWithoutAirlineInput
    aircrafts?: AircraftUncheckedCreateNestedManyWithoutAirlineInput
    flights?: FlightUncheckedCreateNestedManyWithoutAirlineInput
    messages?: Airline_MessageUncheckedCreateNestedManyWithoutAirlineInput
    contacts?: ContactUncheckedCreateNestedManyWithoutAirlineInput
  }

  export type AirlineCreateOrConnectWithoutTelNosInput = {
    where: AirlineWhereUniqueInput
    create: XOR<AirlineCreateWithoutTelNosInput, AirlineUncheckedCreateWithoutTelNosInput>
  }

  export type AirlineUpsertWithoutTelNosInput = {
    update: XOR<AirlineUpdateWithoutTelNosInput, AirlineUncheckedUpdateWithoutTelNosInput>
    create: XOR<AirlineCreateWithoutTelNosInput, AirlineUncheckedCreateWithoutTelNosInput>
    where?: AirlineWhereInput
  }

  export type AirlineUpdateToOneWithWhereWithoutTelNosInput = {
    where?: AirlineWhereInput
    data: XOR<AirlineUpdateWithoutTelNosInput, AirlineUncheckedUpdateWithoutTelNosInput>
  }

  export type AirlineUpdateWithoutTelNosInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUpdateManyWithoutAirlineNestedInput
    flights?: FlightUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUpdateManyWithoutAirlineNestedInput
  }

  export type AirlineUncheckedUpdateWithoutTelNosInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    AirlineCaption?: StringFieldUpdateOperationsInput | string
    Website?: NullableStringFieldUpdateOperationsInput | string | null
    AmountOfAircraft?: IntFieldUpdateOperationsInput | number
    Logo?: NullableStringFieldUpdateOperationsInput | string | null
    operates?: OperateUncheckedUpdateManyWithoutAirlineNestedInput
    aircrafts?: AircraftUncheckedUpdateManyWithoutAirlineNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAirlineNestedInput
    messages?: Airline_MessageUncheckedUpdateManyWithoutAirlineNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutAirlineNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    Email: string
    account: AccountCreateNestedOneWithoutUserInput
    telNos?: User_Tel_NoCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToCreateNestedManyWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    UserAccountID: string
    Email: string
    telNos?: User_Tel_NoUncheckedCreateNestedManyWithoutUserInput
    assignedFlights?: Assigned_ToUncheckedCreateNestedManyWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    involvedInReports?: Report_ToUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    Email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    telNos?: User_Tel_NoUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    telNos?: User_Tel_NoUncheckedUpdateManyWithoutUserNestedInput
    assignedFlights?: Assigned_ToUncheckedUpdateManyWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    involvedInReports?: Report_ToUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OperateCreateManyAirportInput = {
    AirlineName: string
  }

  export type FlightCreateManyDepartureAirportInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    AirlineName: string
    AircraftRegNo: string
  }

  export type FlightCreateManyArrivalAirportInput = {
    FlightNo: string
    Schedule: Date | string
    DepartureAirportID: string
    AirlineName: string
    AircraftRegNo: string
  }

  export type OperateUpdateWithoutAirportInput = {
    airline?: AirlineUpdateOneRequiredWithoutOperatesNestedInput
  }

  export type OperateUncheckedUpdateWithoutAirportInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type OperateUncheckedUpdateManyWithoutAirportInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type FlightUpdateWithoutDepartureAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutDepartureAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateManyWithoutDepartureAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
  }

  export type FlightUpdateWithoutArrivalAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutArrivalAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateManyWithoutArrivalAirportInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
  }

  export type OperateCreateManyAirlineInput = {
    AirportID: string
  }

  export type AircraftCreateManyAirlineInput = {
    AircraftRegNo: string
    SeatCapacity: number
    ModelName: string
  }

  export type FlightCreateManyAirlineInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AircraftRegNo: string
  }

  export type Airline_Tel_NoCreateManyAirlineInput = {
    TelNo: string
  }

  export type Airline_MessageCreateManyAirlineInput = {
    AdminAccountID: string
    MessageText: string
  }

  export type ContactCreateManyAirlineInput = {
    AdminAccountID: string
    ContactStatus: string
  }

  export type OperateUpdateWithoutAirlineInput = {
    airport?: AirportUpdateOneRequiredWithoutOperatesNestedInput
  }

  export type OperateUncheckedUpdateWithoutAirlineInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
  }

  export type OperateUncheckedUpdateManyWithoutAirlineInput = {
    AirportID?: StringFieldUpdateOperationsInput | string
  }

  export type AircraftUpdateWithoutAirlineInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    seats?: SeatUpdateManyWithoutAircraftNestedInput
    flights?: FlightUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateWithoutAirlineInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
    seats?: SeatUncheckedUpdateManyWithoutAircraftNestedInput
    flights?: FlightUncheckedUpdateManyWithoutAircraftNestedInput
    cabins?: CabinClassUncheckedUpdateManyWithoutAircraftNestedInput
  }

  export type AircraftUncheckedUpdateManyWithoutAirlineInput = {
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    SeatCapacity?: IntFieldUpdateOperationsInput | number
    ModelName?: StringFieldUpdateOperationsInput | string
  }

  export type FlightUpdateWithoutAirlineInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    aircraft?: AircraftUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutAirlineInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateManyWithoutAirlineInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_Tel_NoUpdateWithoutAirlineInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_Tel_NoUncheckedUpdateWithoutAirlineInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_Tel_NoUncheckedUpdateManyWithoutAirlineInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_MessageUpdateWithoutAirlineInput = {
    MessageText?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutSentAirlineMessagesNestedInput
  }

  export type Airline_MessageUncheckedUpdateWithoutAirlineInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_MessageUncheckedUpdateManyWithoutAirlineInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUpdateWithoutAirlineInput = {
    ContactStatus?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateWithoutAirlineInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyWithoutAirlineInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SeatCreateManyAircraftInput = {
    SeatNo: string
    SeatType: string
  }

  export type FlightCreateManyAircraftInput = {
    FlightNo: string
    Schedule: Date | string
    ArrivalAirportID: string
    DepartureAirportID: string
    AirlineName: string
  }

  export type CabinClassCreateManyAircraftInput = {
    Class: string
    StandardPrice: number
  }

  export type SeatUpdateWithoutAircraftInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
    tickets?: TicketUpdateManyWithoutSeatNestedInput
  }

  export type SeatUncheckedUpdateWithoutAircraftInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
    tickets?: TicketUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type SeatUncheckedUpdateManyWithoutAircraftInput = {
    SeatNo?: StringFieldUpdateOperationsInput | string
    SeatType?: StringFieldUpdateOperationsInput | string
  }

  export type FlightUpdateWithoutAircraftInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalAirport?: AirportUpdateOneRequiredWithoutArrivalFlightsNestedInput
    departureAirport?: AirportUpdateOneRequiredWithoutDepartureFlightsNestedInput
    airline?: AirlineUpdateOneRequiredWithoutFlightsNestedInput
    passengers?: Assigned_ToUpdateManyWithoutFlightNestedInput
    tickets?: TicketUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateWithoutAircraftInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
    passengers?: Assigned_ToUncheckedUpdateManyWithoutFlightNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutFlightNestedInput
  }

  export type FlightUncheckedUpdateManyWithoutAircraftInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    ArrivalAirportID?: StringFieldUpdateOperationsInput | string
    DepartureAirportID?: StringFieldUpdateOperationsInput | string
    AirlineName?: StringFieldUpdateOperationsInput | string
  }

  export type CabinClassUpdateWithoutAircraftInput = {
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type CabinClassUncheckedUpdateWithoutAircraftInput = {
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type CabinClassUncheckedUpdateManyWithoutAircraftInput = {
    Class?: StringFieldUpdateOperationsInput | string
    StandardPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type Assigned_ToCreateManyFlightInput = {
    UserAccountID: string
  }

  export type TicketCreateManyFlightInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    SeatNo: string
    AircraftRegNo: string
  }

  export type Assigned_ToUpdateWithoutFlightInput = {
    user?: UserUpdateOneRequiredWithoutAssignedFlightsNestedInput
  }

  export type Assigned_ToUncheckedUpdateWithoutFlightInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type Assigned_ToUncheckedUpdateManyWithoutFlightInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUpdateWithoutFlightInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    seat?: SeatUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutFlightInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateManyWithoutFlightInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    SeatNo?: StringFieldUpdateOperationsInput | string
    AircraftRegNo?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateManyCreatorInput = {
    ReportID: string
    ReportDescription: string
    BookingID: string
    Attachment?: string | null
    Email: string
    TelNo: string
    PassengerName: string
  }

  export type ReportUpdateWithoutCreatorInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type ReportUncheckedUpdateWithoutCreatorInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type ReportUncheckedUpdateManyWithoutCreatorInput = {
    ReportID?: StringFieldUpdateOperationsInput | string
    ReportDescription?: StringFieldUpdateOperationsInput | string
    BookingID?: StringFieldUpdateOperationsInput | string
    Attachment?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    TelNo?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateManySeatInput = {
    TicketID: string
    Price: number
    TicketStatus: string
    PassengerName: string
    PassengerLastName: string
    Gender: string
    DateOfBirth: Date | string
    Nationality: string
    BaggageChecked: number
    BaggageCabin: number
    FlightNo: string
    Schedule: Date | string
  }

  export type TicketUpdateWithoutSeatInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    flight?: FlightUpdateOneRequiredWithoutTicketsNestedInput
    purchase?: PurchaseUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateWithoutSeatInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
    purchase?: PurchaseUncheckedUpdateOneWithoutTicketNestedInput
    domesticTicket?: Domestic_TicketUncheckedUpdateOneWithoutTicketNestedInput
    internationalTicket?: International_TicketUncheckedUpdateOneWithoutTicketNestedInput
    roundTripTicketPart1?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket1NestedInput
    roundTripTicketPart2?: Round_Trip_TicketUncheckedUpdateOneWithoutTicket2NestedInput
  }

  export type TicketUncheckedUpdateManyWithoutSeatInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    Price?: FloatFieldUpdateOperationsInput | number
    TicketStatus?: StringFieldUpdateOperationsInput | string
    PassengerName?: StringFieldUpdateOperationsInput | string
    PassengerLastName?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    Nationality?: StringFieldUpdateOperationsInput | string
    BaggageChecked?: FloatFieldUpdateOperationsInput | number
    BaggageCabin?: FloatFieldUpdateOperationsInput | number
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Airline_MessageCreateManyAdminInput = {
    AirlineName: string
    MessageText: string
  }

  export type ContactCreateManyAdminInput = {
    AirlineName: string
    ContactStatus: string
  }

  export type Report_ToCreateManyAdminInput = {
    UserAccountID: string
    ReportStatus: string
  }

  export type Airline_MessageUpdateWithoutAdminInput = {
    MessageText?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type Airline_MessageUncheckedUpdateWithoutAdminInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type Airline_MessageUncheckedUpdateManyWithoutAdminInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    MessageText?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUpdateWithoutAdminInput = {
    ContactStatus?: StringFieldUpdateOperationsInput | string
    airline?: AirlineUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateWithoutAdminInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyWithoutAdminInput = {
    AirlineName?: StringFieldUpdateOperationsInput | string
    ContactStatus?: StringFieldUpdateOperationsInput | string
  }

  export type Report_ToUpdateWithoutAdminInput = {
    ReportStatus?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInvolvedInReportsNestedInput
    Reports?: ReportUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToUncheckedUpdateWithoutAdminInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
    Reports?: ReportUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToUncheckedUpdateManyWithoutAdminInput = {
    UserAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoCreateManyUserInput = {
    TelNo: string
  }

  export type Assigned_ToCreateManyUserInput = {
    FlightNo: string
    Schedule: Date | string
  }

  export type PurchaseCreateManyUserInput = {
    TicketID: string
    PaymentID: string
  }

  export type Report_ToCreateManyUserInput = {
    AdminAccountID: string
    ReportStatus: string
  }

  export type SessionCreateManyUserInput = {
    SessionID: string
    TokenHash: string
    CreatedAt?: Date | string
    LastSeenAt: Date | string
    IdleExpiresAt: Date | string
    AbsoluteExpiresAt: Date | string
    RevokedAt?: Date | string | null
    RevokeReason?: string | null
  }

  export type User_Tel_NoUpdateWithoutUserInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoUncheckedUpdateWithoutUserInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type User_Tel_NoUncheckedUpdateManyWithoutUserInput = {
    TelNo?: StringFieldUpdateOperationsInput | string
  }

  export type Assigned_ToUpdateWithoutUserInput = {
    flight?: FlightUpdateOneRequiredWithoutPassengersNestedInput
  }

  export type Assigned_ToUncheckedUpdateWithoutUserInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Assigned_ToUncheckedUpdateManyWithoutUserInput = {
    FlightNo?: StringFieldUpdateOperationsInput | string
    Schedule?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseUpdateWithoutUserInput = {
    ticket?: TicketUpdateOneRequiredWithoutPurchaseNestedInput
    payment?: PaymentUpdateOneRequiredWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutUserInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PaymentID?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUncheckedUpdateManyWithoutUserInput = {
    TicketID?: StringFieldUpdateOperationsInput | string
    PaymentID?: StringFieldUpdateOperationsInput | string
  }

  export type Report_ToUpdateWithoutUserInput = {
    ReportStatus?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutInvolvedInReportsNestedInput
    Reports?: ReportUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToUncheckedUpdateWithoutUserInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
    Reports?: ReportUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type Report_ToUncheckedUpdateManyWithoutUserInput = {
    AdminAccountID?: StringFieldUpdateOperationsInput | string
    ReportStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUpdateWithoutUserInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    SessionID?: StringFieldUpdateOperationsInput | string
    TokenHash?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    IdleExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AbsoluteExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RevokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RevokeReason?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}